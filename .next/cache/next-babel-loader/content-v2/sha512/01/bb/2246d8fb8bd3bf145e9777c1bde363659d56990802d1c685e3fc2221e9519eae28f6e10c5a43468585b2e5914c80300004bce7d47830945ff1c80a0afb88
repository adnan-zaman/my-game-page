{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\adnan\\\\web-dev\\\\my-game-page\\\\components\\\\Form.js\",\n    _s = $RefreshSig$();\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useState, useRef } from \"react\";\n/**\r\n *\r\n * General form component that validates and controls the state\r\n * of all of its fields. Children of Form should be a list of FormElements.\r\n *\r\n *\r\n * @param {object} props Expected props:\r\n * - id {string} form htmlElement's id\r\n *\r\n * - onSubmit {function(event, object)} callback for when form submits.\r\n *   Form will send two arguments, the first is the event, the second\r\n *   is the error info object. If one of the FormFields within the Form\r\n *   were not valid, the second argument will be an object containing\r\n *   information about the error. If everything was valid, it will be null.\r\n *\r\n * - submitBtnText {string} the textContent for the submit button\r\n *\r\n * - action? {string} value for form's action attribute\r\n *\r\n * - method? {string} value for form's method attribute\r\n *\r\n * -props.children should be a list of FormField elements. Each FormField\r\n *  should be initialized with an initial value prop.\r\n *\r\n */\n\nexport default function Form(props) {\n  _s();\n\n  //array of values for all children (FormFields)\n  //initializes state to be equal to the initial value given by\n  //parent component\n  var _useState = useState(React.Children.map(props.children, function (child) {\n    return child.props.value;\n  })),\n      fieldValues = _useState[0],\n      setFieldValues = _useState[1]; //list of validators of all of this Form's FormFields\n\n\n  var fieldValidators = useRef([]); //takes control of childrens state and passes own props\n\n  var children = React.Children.map(props.children, function (child, index) {\n    return /*#__PURE__*/React.cloneElement(child, {\n      value: fieldValues[index],\n      addValidator: function addValidator(validator) {\n        return fieldValidators.current.push(validator);\n      },\n      onChange: handleChange,\n      parentId: props.id,\n      //add parent id to so FormField can make unique ids for its elements\n      index: index\n    });\n  });\n  /**\r\n   * Handles value changes for all of a Form's FormFields.\r\n   *\r\n   * @param {Event} e\r\n   * @param {Number} index FormField's index prop\r\n   */\n\n  function handleChange(e, index) {\n    //the index prop of each FormField and fieldValues are parallel\n    //so if a FormField passes it's props.index, we can set\n    //the correct state\n    var newFieldValues = fieldValues.map(function (value, i) {\n      return i === index ? e.target.value : value;\n    });\n    setFieldValues(newFieldValues);\n  }\n  /**\r\n   * Calls every FormField's validator function. If any field\r\n   * is invalid, will send the error info object to parent component.\r\n   *\r\n   * @param {event} e\r\n   */\n\n\n  function validateAllFields(e) {\n    var _iterator = _createForOfIteratorHelper(fieldValidators.current),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var validator = _step.value;\n        var errorInfo = validator();\n        if (errorInfo) return props.onSubmit(e, errorInfo);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    props.onSubmit(e, null);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          \"for\": \"exampleFormControlInput1\",\n          \"class\": \"form-label\",\n          children: \"Email address\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          \"class\": \"form-control\",\n          id: \"exampleFormControlInput1\",\n          placeholder: \"name@example.com\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          \"for\": \"exampleFormControlTextarea1\",\n          \"class\": \"form-label\",\n          children: \"Example textarea\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"form-control\",\n          id: \"exampleFormControlTextarea1\",\n          rows: \"3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      id: props.id,\n      onSubmit: validateAllFields,\n      noValidate: true,\n      action: props.action,\n      method: props.method,\n      children: [children, /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: props.submitBtnText || \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Form, \"IGmCPaP0Nl8H0OpLITXuIJM9a/M=\");\n\n_c = Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["C:/Users/adnan/web-dev/my-game-page/components/Form.js"],"names":["React","useState","useRef","Form","props","Children","map","children","child","value","fieldValues","setFieldValues","fieldValidators","index","cloneElement","addValidator","validator","current","push","onChange","handleChange","parentId","id","e","newFieldValues","i","target","validateAllFields","errorInfo","onSubmit","action","method","submitBtnText"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\r\n\r\n/**\r\n *\r\n * General form component that validates and controls the state\r\n * of all of its fields. Children of Form should be a list of FormElements.\r\n *\r\n *\r\n * @param {object} props Expected props:\r\n * - id {string} form htmlElement's id\r\n *\r\n * - onSubmit {function(event, object)} callback for when form submits.\r\n *   Form will send two arguments, the first is the event, the second\r\n *   is the error info object. If one of the FormFields within the Form\r\n *   were not valid, the second argument will be an object containing\r\n *   information about the error. If everything was valid, it will be null.\r\n *\r\n * - submitBtnText {string} the textContent for the submit button\r\n *\r\n * - action? {string} value for form's action attribute\r\n *\r\n * - method? {string} value for form's method attribute\r\n *\r\n * -props.children should be a list of FormField elements. Each FormField\r\n *  should be initialized with an initial value prop.\r\n *\r\n */\r\nexport default function Form(props) {\r\n  //array of values for all children (FormFields)\r\n  //initializes state to be equal to the initial value given by\r\n  //parent component\r\n  const [fieldValues, setFieldValues] = useState(\r\n    React.Children.map(props.children, (child) => child.props.value)\r\n  );\r\n\r\n  //list of validators of all of this Form's FormFields\r\n  const fieldValidators = useRef([]);\r\n\r\n  //takes control of childrens state and passes own props\r\n  const children = React.Children.map(props.children, (child, index) =>\r\n    React.cloneElement(child, {\r\n      value: fieldValues[index],\r\n      addValidator: (validator) => fieldValidators.current.push(validator),\r\n      onChange: handleChange,\r\n      parentId: props.id, //add parent id to so FormField can make unique ids for its elements\r\n      index,\r\n    })\r\n  );\r\n\r\n  /**\r\n   * Handles value changes for all of a Form's FormFields.\r\n   *\r\n   * @param {Event} e\r\n   * @param {Number} index FormField's index prop\r\n   */\r\n  function handleChange(e, index) {\r\n    //the index prop of each FormField and fieldValues are parallel\r\n    //so if a FormField passes it's props.index, we can set\r\n    //the correct state\r\n    const newFieldValues = fieldValues.map((value, i) =>\r\n      i === index ? e.target.value : value\r\n    );\r\n    setFieldValues(newFieldValues);\r\n  }\r\n\r\n  /**\r\n   * Calls every FormField's validator function. If any field\r\n   * is invalid, will send the error info object to parent component.\r\n   *\r\n   * @param {event} e\r\n   */\r\n  function validateAllFields(e) {\r\n    for (const validator of fieldValidators.current) {\r\n      const errorInfo = validator();\r\n      if (errorInfo) return props.onSubmit(e, errorInfo);\r\n    }\r\n    props.onSubmit(e, null);\r\n  }\r\n  return (\r\n    <>\r\n      <form>\r\n        <div className=\"mb-3\">\r\n          <label for=\"exampleFormControlInput1\" class=\"form-label\">\r\n            Email address\r\n          </label>\r\n          <input\r\n            type=\"email\"\r\n            class=\"form-control\"\r\n            id=\"exampleFormControlInput1\"\r\n            placeholder=\"name@example.com\"\r\n          />\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label for=\"exampleFormControlTextarea1\" class=\"form-label\">\r\n            Example textarea\r\n          </label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"exampleFormControlTextarea1\"\r\n            rows=\"3\"\r\n          ></textarea>\r\n        </div>\r\n      </form>\r\n      <form\r\n        id={props.id}\r\n        onSubmit={validateAllFields}\r\n        noValidate={true}\r\n        action={props.action}\r\n        method={props.method}\r\n      >\r\n        {children}\r\n        <button type=\"submit\">{props.submitBtnText || \"Submit\"}</button>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}