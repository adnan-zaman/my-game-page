{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\adnan\\\\web-dev\\\\my-game-page\\\\components\\\\FormFields.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useState, useRef, useEffect } from \"react\";\n/**\r\n * FormFields are meant to be used with the Form component.\r\n * They are a combination of a label and a corresponding input element of some kind.\r\n * They make up the fields of a Form component. Each FormField has its own\r\n * validator function that checks the validity of its input. FormField validators\r\n * are called by its parent Form. FormFields should be the children of a Form\r\n * component and should be initialied with an initial value prop. After first render,\r\n * the Form component will take control of the FormField's value state.\r\n *\r\n */\n\n/**\r\n * General text input field.\r\n *\r\n * @param {object} props\r\n * - label {string} FormField's label\r\n * - name {string} name for input element\r\n * - required? {boolean} whether this FormField is required or not\r\n * - min? {number} minimum number of characters\r\n * - max? {number} maximum number of characters\r\n */\n\nexport function TextField(props) {\n  _s();\n\n  var inputId = \"form-field-\".concat(props.label, \"-\").concat(props.parentId);\n  var minLength = props.min;\n  var maxLength = props.max;\n  var validatorAdded = useRef(false); //to ensure validator only gets added to parent Form once\n\n  if (!validatorAdded.current) {\n    props.addValidator(validate);\n    validatorAdded.current = true;\n  }\n  /**\r\n   * Checks the validity of input\r\n   */\n\n\n  function validate() {\n    var _getElementAndValidit = getElementAndValidityState(inputId),\n        _getElementAndValidit2 = _slicedToArray(_getElementAndValidit, 2),\n        element = _getElementAndValidit2[0],\n        validityState = _getElementAndValidit2[1];\n\n    if (validityState.valueMissing) return {\n      message: \"\".concat(props.label, \" is required.\"),\n      element: element\n    };\n    if (validityState.tooShort) return {\n      message: \"\".concat(props.label, \" must be at least \").concat(minLength, \" characters long.\"),\n      element: element\n    };\n    if (validityState.tooLong) return {\n      message: \"\".concat(props.label, \" must be less than or equal to \").concat(maxLength, \" characters long.\"),\n      element: element\n    };\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"col-form-label\",\n      htmlFor: inputId,\n      children: [props.label, \":\", \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: inputId,\n      name: props.name,\n      value: props.value || \"\",\n      onChange: function onChange(e) {\n        return props.onChange(e, props.index);\n      },\n      required: props.required,\n      minLength: minLength,\n      maxLength: maxLength\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n/**\r\n * Input field for emails.\r\n *\r\n * @param {object} props\r\n * - label? {string} FormField's label (default label is Email)\r\n * - name {string} name for input element\r\n * - required? {boolean} whether this FormField is required or not\r\n * - min? {number} minimum number of characters\r\n * - max? {number} maximum number of characters\r\n */\n\n_s(TextField, \"LBzU2/6EwRp3XK6tfogFFJSW0Po=\");\n\n_c = TextField;\nexport function EmailField(props) {\n  _s2();\n\n  var labelName = props.label || \"Email\";\n  var inputId = \"form-field-\".concat(labelName, \"-\").concat(props.parentId);\n  var minLength = props.min;\n  var maxLength = props.max || 50;\n  var validatorAdded = useRef(false); //to ensure validator only gets added to parent Form once\n\n  if (!validatorAdded.current) {\n    props.addValidator(validate);\n    validatorAdded.current = true;\n  }\n  /**\r\n   * Checks the validity of input.\r\n   *\r\n   * @returns {object} if input is valid, returns null. Otherwise, returns an object\r\n   * containg information about the error\r\n   * {message: error message, element: reference to HtmlElement that contains error}\r\n   */\n\n\n  function validate() {\n    var _getElementAndValidit3 = getElementAndValidityState(inputId),\n        _getElementAndValidit4 = _slicedToArray(_getElementAndValidit3, 2),\n        element = _getElementAndValidit4[0],\n        validityState = _getElementAndValidit4[1];\n\n    if (validityState.valueMissing) return {\n      message: \"\".concat(labelName, \" is required.\"),\n      element: element\n    };\n    if (validityState.typeMismatch) return {\n      message: \"\".concat(labelName, \" must be an email.\"),\n      element: element\n    };\n    if (validityState.tooShort) return {\n      message: \"\".concat(labelName, \" must be at least \").concat(minLength, \" characters long.\"),\n      element: element\n    };\n    if (validityState.tooLong) return {\n      message: \"\".concat(labelName, \" must be less than or equal to \").concat(maxLength, \" characters long.\"),\n      element: element\n    };\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"form-label col-2\",\n        htmlFor: inputId,\n        children: labelName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-control col-10\",\n        id: inputId,\n        name: props.name,\n        value: props.value,\n        type: \"email\",\n        onChange: function onChange(e) {\n          return props.onChange(e, props.index);\n        },\n        required: props.required,\n        minLength: minLength,\n        maxLength: maxLength\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n/**\r\n * Input field for passwords. Input is always required.\r\n *\r\n * @param {object} props\r\n * - label? {string} FormField's label (default label is Password)\r\n * - name {string} name for input element\r\n * - min? {number} minimum number of characters\r\n */\n\n_s2(EmailField, \"LBzU2/6EwRp3XK6tfogFFJSW0Po=\");\n\n_c2 = EmailField;\nexport function PasswordField(props) {\n  _s3();\n\n  var labelName = props.label || \"Password\";\n  var inputId = \"form-field-\".concat(labelName, \"-\").concat(props.parentId);\n  var minLength = props.min;\n  var maxLength = props.max || 50;\n  var validatorAdded = useRef(false); //to ensure validator only gets added to parent Form once\n\n  if (!validatorAdded.current) {\n    props.addValidator(validate);\n    validatorAdded.current = true;\n  }\n  /**\r\n   * Checks the validity of input\r\n   */\n\n\n  function validate() {\n    var _getElementAndValidit5 = getElementAndValidityState(inputId),\n        _getElementAndValidit6 = _slicedToArray(_getElementAndValidit5, 2),\n        element = _getElementAndValidit6[0],\n        validityState = _getElementAndValidit6[1];\n\n    if (validityState.valueMissing) return {\n      message: \"\".concat(labelName, \" is required.\"),\n      element: element\n    };\n    if (validityState.tooShort) return {\n      message: \"\".concat(labelName, \" must be at least \").concat(minLength, \" characters long.\"),\n      element: element\n    };\n    if (validityState.tooLong) return {\n      message: \"\".concat(labelName, \" must be less than or equal to \").concat(maxLength, \" characters long.\"),\n      element: element\n    };\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"form-label col-2\",\n        htmlFor: inputId,\n        children: labelName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-control col-10\",\n        id: inputId,\n        name: props.name,\n        value: props.value || \"\",\n        type: \"password\",\n        onChange: function onChange(e) {\n          return props.onChange(e, props.index);\n        },\n        required: true,\n        minLength: minLength,\n        maxLength: maxLength\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n/**\r\n * Convenience function that returns an HtmlElement and its ValidityState\r\n * object given an id.\r\n *\r\n * @param {string} elementId id of FormField's HtmlElement to validate\r\n * @returns {array} [HtmlElement, validityState]\r\n */\n\n_s3(PasswordField, \"LBzU2/6EwRp3XK6tfogFFJSW0Po=\");\n\n_c3 = PasswordField;\n\nfunction getElementAndValidityState(elementId) {\n  var element = document.querySelector(\"[id='\".concat(elementId, \"']\"));\n  var validityState = element.validity;\n  return [element, validityState];\n}\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"TextField\");\n$RefreshReg$(_c2, \"EmailField\");\n$RefreshReg$(_c3, \"PasswordField\");","map":{"version":3,"sources":["C:/Users/adnan/web-dev/my-game-page/components/FormFields.js"],"names":["useState","useRef","useEffect","TextField","props","inputId","label","parentId","minLength","min","maxLength","max","validatorAdded","current","addValidator","validate","getElementAndValidityState","element","validityState","valueMissing","message","tooShort","tooLong","name","value","e","onChange","index","required","EmailField","labelName","typeMismatch","PasswordField","elementId","document","querySelector","validity"],"mappings":"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","sourcesContent":["import { useState, useRef, useEffect } from \"react\";\r\n\r\n/**\r\n * FormFields are meant to be used with the Form component.\r\n * They are a combination of a label and a corresponding input element of some kind.\r\n * They make up the fields of a Form component. Each FormField has its own\r\n * validator function that checks the validity of its input. FormField validators\r\n * are called by its parent Form. FormFields should be the children of a Form\r\n * component and should be initialied with an initial value prop. After first render,\r\n * the Form component will take control of the FormField's value state.\r\n *\r\n */\r\n\r\n/**\r\n * General text input field.\r\n *\r\n * @param {object} props\r\n * - label {string} FormField's label\r\n * - name {string} name for input element\r\n * - required? {boolean} whether this FormField is required or not\r\n * - min? {number} minimum number of characters\r\n * - max? {number} maximum number of characters\r\n */\r\nexport function TextField(props) {\r\n  const inputId = `form-field-${props.label}-${props.parentId}`;\r\n  const minLength = props.min;\r\n  const maxLength = props.max;\r\n\r\n  const validatorAdded = useRef(false);\r\n\r\n  //to ensure validator only gets added to parent Form once\r\n  if (!validatorAdded.current) {\r\n    props.addValidator(validate);\r\n    validatorAdded.current = true;\r\n  }\r\n\r\n  /**\r\n   * Checks the validity of input\r\n   */\r\n  function validate() {\r\n    const [element, validityState] = getElementAndValidityState(inputId);\r\n\r\n    if (validityState.valueMissing)\r\n      return { message: `${props.label} is required.`, element };\r\n    if (validityState.tooShort)\r\n      return {\r\n        message: `${props.label} must be at least ${minLength} characters long.`,\r\n        element,\r\n      };\r\n    if (validityState.tooLong)\r\n      return {\r\n        message: `${props.label} must be less than or equal to ${maxLength} characters long.`,\r\n        element,\r\n      };\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <label className=\"col-form-label\" htmlFor={inputId}>\r\n        {props.label}:{\" \"}\r\n      </label>\r\n      <input\r\n        id={inputId}\r\n        name={props.name}\r\n        value={props.value || \"\"}\r\n        onChange={(e) => props.onChange(e, props.index)}\r\n        required={props.required}\r\n        minLength={minLength}\r\n        maxLength={maxLength}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\n/**\r\n * Input field for emails.\r\n *\r\n * @param {object} props\r\n * - label? {string} FormField's label (default label is Email)\r\n * - name {string} name for input element\r\n * - required? {boolean} whether this FormField is required or not\r\n * - min? {number} minimum number of characters\r\n * - max? {number} maximum number of characters\r\n */\r\nexport function EmailField(props) {\r\n  const labelName = props.label || \"Email\";\r\n  const inputId = `form-field-${labelName}-${props.parentId}`;\r\n  const minLength = props.min;\r\n  const maxLength = props.max || 50;\r\n\r\n  const validatorAdded = useRef(false);\r\n\r\n  //to ensure validator only gets added to parent Form once\r\n  if (!validatorAdded.current) {\r\n    props.addValidator(validate);\r\n    validatorAdded.current = true;\r\n  }\r\n\r\n  /**\r\n   * Checks the validity of input.\r\n   *\r\n   * @returns {object} if input is valid, returns null. Otherwise, returns an object\r\n   * containg information about the error\r\n   * {message: error message, element: reference to HtmlElement that contains error}\r\n   */\r\n  function validate() {\r\n    const [element, validityState] = getElementAndValidityState(inputId);\r\n\r\n    if (validityState.valueMissing)\r\n      return { message: `${labelName} is required.`, element };\r\n    if (validityState.typeMismatch)\r\n      return { message: `${labelName} must be an email.`, element };\r\n    if (validityState.tooShort)\r\n      return {\r\n        message: `${labelName} must be at least ${minLength} characters long.`,\r\n        element,\r\n      };\r\n    if (validityState.tooLong)\r\n      return {\r\n        message: `${labelName} must be less than or equal to ${maxLength} characters long.`,\r\n        element,\r\n      };\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <label className=\"form-label col-2\" htmlFor={inputId}>\r\n          {labelName}\r\n        </label>\r\n        <input\r\n          className=\"form-control col-10\"\r\n          id={inputId}\r\n          name={props.name}\r\n          value={props.value}\r\n          type=\"email\"\r\n          onChange={(e) => props.onChange(e, props.index)}\r\n          required={props.required}\r\n          minLength={minLength}\r\n          maxLength={maxLength}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\n/**\r\n * Input field for passwords. Input is always required.\r\n *\r\n * @param {object} props\r\n * - label? {string} FormField's label (default label is Password)\r\n * - name {string} name for input element\r\n * - min? {number} minimum number of characters\r\n */\r\nexport function PasswordField(props) {\r\n  const labelName = props.label || \"Password\";\r\n  const inputId = `form-field-${labelName}-${props.parentId}`;\r\n  const minLength = props.min;\r\n  const maxLength = props.max || 50;\r\n\r\n  const validatorAdded = useRef(false);\r\n\r\n  //to ensure validator only gets added to parent Form once\r\n  if (!validatorAdded.current) {\r\n    props.addValidator(validate);\r\n    validatorAdded.current = true;\r\n  }\r\n\r\n  /**\r\n   * Checks the validity of input\r\n   */\r\n  function validate() {\r\n    const [element, validityState] = getElementAndValidityState(inputId);\r\n\r\n    if (validityState.valueMissing)\r\n      return { message: `${labelName} is required.`, element };\r\n    if (validityState.tooShort)\r\n      return {\r\n        message: `${labelName} must be at least ${minLength} characters long.`,\r\n        element,\r\n      };\r\n    if (validityState.tooLong)\r\n      return {\r\n        message: `${labelName} must be less than or equal to ${maxLength} characters long.`,\r\n        element,\r\n      };\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container mb-3\">\r\n        <label className=\"form-label col-2\" htmlFor={inputId}>\r\n          {labelName}\r\n        </label>\r\n        <input\r\n          className=\"form-control col-10\"\r\n          id={inputId}\r\n          name={props.name}\r\n          value={props.value || \"\"}\r\n          type=\"password\"\r\n          onChange={(e) => props.onChange(e, props.index)}\r\n          required={true}\r\n          minLength={minLength}\r\n          maxLength={maxLength}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\n/**\r\n * Convenience function that returns an HtmlElement and its ValidityState\r\n * object given an id.\r\n *\r\n * @param {string} elementId id of FormField's HtmlElement to validate\r\n * @returns {array} [HtmlElement, validityState]\r\n */\r\nfunction getElementAndValidityState(elementId) {\r\n  const element = document.querySelector(`[id='${elementId}']`);\r\n  const validityState = element.validity;\r\n  return [element, validityState];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}