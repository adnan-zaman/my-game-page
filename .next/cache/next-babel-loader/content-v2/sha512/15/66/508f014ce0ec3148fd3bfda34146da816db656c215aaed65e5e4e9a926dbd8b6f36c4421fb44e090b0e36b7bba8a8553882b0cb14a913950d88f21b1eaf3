{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\adnan\\\\web-dev\\\\my-game-page\\\\pages\\\\userPage.js\";\nimport { useState, useRef } from \"react\";\nimport Game from \"../components/Game\";\nimport GameSearchBox from \"../components/GameSearchBox\";\n/**\r\n *\r\n * The page that is displayed when\r\n * viewing a user's profile\r\n *\r\n * @param {object} props\r\n */\n\nexport default function UserPage(props) {\n  /* setting state */\n  //the user's actual favorite games\n  const {\n    0: favoriteGames,\n    1: setFavoriteGames\n  } = useState(props.games); //the user's favorite game as currently displayed. these may differ\n  //from actual favorite games during editing\n\n  const {\n    0: displayedFavoriteGames,\n    1: setDisplayedFavoriteGames\n  } = useState(favoriteGames); //whether or not user is editing favorite games\n\n  const {\n    0: isEditing,\n    1: setIsEditing\n  } = useState(false);\n  /**\r\n   * Called when a Game is dragged. Adds\r\n   * the Game's data-index attribute to\r\n   * DragEvent.dataTransfer to be used by\r\n   * dropGame() later on\r\n   *\r\n   * @param {DragEvent} e\r\n   */\n\n  function startDragGame(e) {\n    e.stopPropagation();\n    e.dataTransfer.setData(\"text/plain\", e.target.dataset.index);\n  } //dragover handler is needed to make element\n  //draggable\n\n\n  function dragOver(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    e.dataTransfer.dropEffect = \"move\";\n  }\n  /**\r\n   * The dragged game will be swapped with the game\r\n   * it's dropped on.\r\n   *\r\n   * @param {DragEvent} e\r\n   */\n\n\n  function dropGame(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const newFaveGames = [...displayedFavoriteGames];\n    const newGame = e.dataTransfer.getData(\"application/json\"); //index of game that was dropped on\n\n    const dropTarget = Number(e.target.dataset.index); //dataTransfer will contain a js object if the game being dragged\n    //is from search results, meaning a new game is being added\n    //to favorite games\n\n    if (newGame) {\n      const newGameAsObject = JSON.parse(newGame); //we replace elements as we go, eventually we an element to newFaveGames[newFaveGames.length]\n      //this increases the length and the loop goes on forever\n      //so we keep the length of the list before we start\n\n      const length = newFaveGames.length; //game to be added in\n\n      let holder = newGameAsObject;\n\n      for (let i = 0; i <= length; i++) {\n        if (newFaveGames[i] && newFaveGames[i].id === newGameAsObject.id) return; //start swapping from dropTarget onwards\n\n        if (i >= dropTarget) {\n          //put holder into the list, take what was there and put into holder\n          const temp = newFaveGames[i];\n          newFaveGames[i] = holder;\n          holder = temp;\n        }\n      }\n    } //if there is no js object, then the game being dragged is an already\n    //existing game so we just swap places\n    else {\n        //the game that was being dragged\n        const draggedGame = Number(e.dataTransfer.getData(\"text/plain\"));\n        const temp = newFaveGames[dropTarget];\n        newFaveGames[dropTarget] = newFaveGames[draggedGame];\n        newFaveGames[draggedGame] = temp;\n      }\n\n    setDisplayedFavoriteGames(newFaveGames);\n  }\n  /**\r\n   * Deletes a game from displayedFavoriteGames.\r\n   *\r\n   * @param {number} gameId the id of game to be deleted\r\n   */\n\n\n  function deleteGame(gameId) {\n    setDisplayedFavoriteGames(displayedFavoriteGames.filter(game => game.id !== gameId));\n  }\n  /**\r\n   * Called when editing is cancelled. Sets displayed favorite games\r\n   * to actual favorite games.\r\n   */\n\n\n  function rollbackChanges() {\n    setDisplayedFavoriteGames(favoriteGames);\n    setIsEditing(false);\n  }\n\n  async function saveChanges() {\n    console.log(\"o wa\");\n  }\n\n  console.log(displayedFavoriteGames); //get a list of Game components corresponding to favorite games\n  //each is given a data-index attribute that corresponds to\n  //what position in the list they are. this will be used during\n  //editing favorite games.\n\n  const favoriteGamesList = displayedFavoriteGames.map((game, index) => /*#__PURE__*/_jsxDEV(Game, {\n    gameId: game.id,\n    gameName: game.name,\n    gameCoverUrl: game.coverurl,\n    isEditing: isEditing,\n    \"data-index\": \"\" + index,\n    draggable: isEditing + \"\",\n    onDragStart: isEditing ? startDragGame : undefined,\n    onDragOver: isEditing ? dragOver : undefined,\n    onDrop: isEditing ? dropGame : undefined,\n    onDelete: deleteGame\n  }, game.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: props.displayName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"favorite-games-list\",\n        children: favoriteGamesList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), props.id && (!isEditing ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsEditing(true),\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: rollbackChanges,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: saveChanges,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), isEditing && /*#__PURE__*/_jsxDEV(GameSearchBox, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true);\n}\nexport function getServerSideProps(context) {\n  return {\n    props: JSON.parse(JSON.stringify(context.res.locals))\n  };\n}","map":{"version":3,"sources":["C:/Users/adnan/web-dev/my-game-page/pages/userPage.js"],"names":["useState","useRef","Game","GameSearchBox","UserPage","props","favoriteGames","setFavoriteGames","games","displayedFavoriteGames","setDisplayedFavoriteGames","isEditing","setIsEditing","startDragGame","e","stopPropagation","dataTransfer","setData","target","dataset","index","dragOver","preventDefault","dropEffect","dropGame","newFaveGames","newGame","getData","dropTarget","Number","newGameAsObject","JSON","parse","length","holder","i","id","temp","draggedGame","deleteGame","gameId","filter","game","rollbackChanges","saveChanges","console","log","favoriteGamesList","map","name","coverurl","undefined","displayName","getServerSideProps","context","stringify","res","locals"],"mappings":"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","sourcesContent":["import { useState, useRef } from \"react\";\r\nimport Game from \"../components/Game\";\r\nimport GameSearchBox from \"../components/GameSearchBox\";\r\n\r\n/**\r\n *\r\n * The page that is displayed when\r\n * viewing a user's profile\r\n *\r\n * @param {object} props\r\n */\r\n\r\nexport default function UserPage(props) {\r\n  /* setting state */\r\n  //the user's actual favorite games\r\n  const [favoriteGames, setFavoriteGames] = useState(props.games);\r\n  //the user's favorite game as currently displayed. these may differ\r\n  //from actual favorite games during editing\r\n  const [displayedFavoriteGames, setDisplayedFavoriteGames] = useState(\r\n    favoriteGames\r\n  );\r\n  //whether or not user is editing favorite games\r\n  const [isEditing, setIsEditing] = useState(false);\r\n\r\n  /**\r\n   * Called when a Game is dragged. Adds\r\n   * the Game's data-index attribute to\r\n   * DragEvent.dataTransfer to be used by\r\n   * dropGame() later on\r\n   *\r\n   * @param {DragEvent} e\r\n   */\r\n  function startDragGame(e) {\r\n    e.stopPropagation();\r\n    e.dataTransfer.setData(\"text/plain\", e.target.dataset.index);\r\n  }\r\n\r\n  //dragover handler is needed to make element\r\n  //draggable\r\n  function dragOver(e) {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    e.dataTransfer.dropEffect = \"move\";\r\n  }\r\n\r\n  /**\r\n   * The dragged game will be swapped with the game\r\n   * it's dropped on.\r\n   *\r\n   * @param {DragEvent} e\r\n   */\r\n  function dropGame(e) {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    const newFaveGames = [...displayedFavoriteGames];\r\n    const newGame = e.dataTransfer.getData(\"application/json\");\r\n    //index of game that was dropped on\r\n    const dropTarget = Number(e.target.dataset.index);\r\n    //dataTransfer will contain a js object if the game being dragged\r\n    //is from search results, meaning a new game is being added\r\n    //to favorite games\r\n    if (newGame) {\r\n      const newGameAsObject = JSON.parse(newGame);\r\n      //we replace elements as we go, eventually we an element to newFaveGames[newFaveGames.length]\r\n      //this increases the length and the loop goes on forever\r\n      //so we keep the length of the list before we start\r\n      const length = newFaveGames.length;\r\n      //game to be added in\r\n      let holder = newGameAsObject;\r\n      for (let i = 0; i <= length; i++) {\r\n        if (newFaveGames[i] && newFaveGames[i].id === newGameAsObject.id)\r\n          return;\r\n        //start swapping from dropTarget onwards\r\n        if (i >= dropTarget) {\r\n          //put holder into the list, take what was there and put into holder\r\n          const temp = newFaveGames[i];\r\n          newFaveGames[i] = holder;\r\n          holder = temp;\r\n        }\r\n      }\r\n    }\r\n    //if there is no js object, then the game being dragged is an already\r\n    //existing game so we just swap places\r\n    else {\r\n      //the game that was being dragged\r\n      const draggedGame = Number(e.dataTransfer.getData(\"text/plain\"));\r\n      const temp = newFaveGames[dropTarget];\r\n      newFaveGames[dropTarget] = newFaveGames[draggedGame];\r\n      newFaveGames[draggedGame] = temp;\r\n    }\r\n\r\n    setDisplayedFavoriteGames(newFaveGames);\r\n  }\r\n\r\n  /**\r\n   * Deletes a game from displayedFavoriteGames.\r\n   *\r\n   * @param {number} gameId the id of game to be deleted\r\n   */\r\n  function deleteGame(gameId) {\r\n    setDisplayedFavoriteGames(\r\n      displayedFavoriteGames.filter((game) => game.id !== gameId)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Called when editing is cancelled. Sets displayed favorite games\r\n   * to actual favorite games.\r\n   */\r\n  function rollbackChanges() {\r\n    setDisplayedFavoriteGames(favoriteGames);\r\n    setIsEditing(false);\r\n  }\r\n\r\n  async function saveChanges() {\r\n    console.log(\"o wa\");\r\n  }\r\n\r\n  console.log(displayedFavoriteGames);\r\n\r\n  //get a list of Game components corresponding to favorite games\r\n  //each is given a data-index attribute that corresponds to\r\n  //what position in the list they are. this will be used during\r\n  //editing favorite games.\r\n  const favoriteGamesList = displayedFavoriteGames.map((game, index) => (\r\n    <Game\r\n      key={game.id}\r\n      gameId={game.id}\r\n      gameName={game.name}\r\n      gameCoverUrl={game.coverurl}\r\n      isEditing={isEditing}\r\n      data-index={\"\" + index}\r\n      draggable={isEditing + \"\"}\r\n      onDragStart={isEditing ? startDragGame : undefined}\r\n      onDragOver={isEditing ? dragOver : undefined}\r\n      onDrop={isEditing ? dropGame : undefined}\r\n      onDelete={deleteGame}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      <h1>{props.displayName}</h1>\r\n      <div>\r\n        <div className=\"favorite-games-list\">{favoriteGamesList}</div>\r\n        {props.id &&\r\n          (!isEditing ? (\r\n            <button onClick={() => setIsEditing(true)}>Edit</button>\r\n          ) : (\r\n            <>\r\n              <button onClick={rollbackChanges}>Cancel</button>\r\n              <button onClick={saveChanges}>Save</button>\r\n            </>\r\n          ))}\r\n      </div>\r\n      {isEditing && <GameSearchBox />}\r\n    </>\r\n  );\r\n}\r\n\r\nexport function getServerSideProps(context) {\r\n  return {\r\n    props: JSON.parse(JSON.stringify(context.res.locals)),\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}