{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\adnan\\\\web-dev\\\\my-game-page\\\\components\\\\FormFields.js\";\nimport { useRef } from \"react\";\nexport function TextField(props) {\n  const inputId = `form-field-${props.label}-${props.uniqueId}`;\n  const minLength = 8;\n  const validatorAdded = useRef(false);\n  console.log(\"render formfield\"); //to ensure validator only gets added to parent Form once\n\n  if (!validatorAdded.current) {\n    console.log(\"validator added is false\");\n    validatorAdded.current = true;\n    console.log(\"now true\");\n  }\n\n  function validate() {\n    const [element, validityState] = getElementAndValidityState();\n    if (validityState.valueMissing) return {\n      message: `${props.label} is required.`,\n      element\n    };\n    if (validityState.tooShort) return {\n      message: `${props.label} must be at least ${minLength} characters long.`,\n      element\n    };\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      for: inputId,\n      children: props.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: inputId,\n      value: props.value,\n      onChange: e => props.onChange(e, props.index),\n      required: true,\n      minLength: minLength\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\nfunction getElementAndValidityState(elementId) {\n  const element = document.querySelector(`form-field-${props.label}-${props.uniqueId}`);\n  const validityState = element.validity;\n  return [element, validityState];\n}","map":{"version":3,"sources":["C:/Users/adnan/web-dev/my-game-page/components/FormFields.js"],"names":["useRef","TextField","props","inputId","label","uniqueId","minLength","validatorAdded","console","log","current","validate","element","validityState","getElementAndValidityState","valueMissing","message","tooShort","value","e","onChange","index","elementId","document","querySelector","validity"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,OAAvB;AAEA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAC/B,QAAMC,OAAO,GAAI,cAAaD,KAAK,CAACE,KAAM,IAAGF,KAAK,CAACG,QAAS,EAA5D;AACA,QAAMC,SAAS,GAAG,CAAlB;AAEA,QAAMC,cAAc,GAAGP,MAAM,CAAC,KAAD,CAA7B;AAEAQ,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAN+B,CAO/B;;AACA,MAAI,CAACF,cAAc,CAACG,OAApB,EAA6B;AAC3BF,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAF,IAAAA,cAAc,CAACG,OAAf,GAAyB,IAAzB;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACD;;AAED,WAASE,QAAT,GAAoB;AAClB,UAAM,CAACC,OAAD,EAAUC,aAAV,IAA2BC,0BAA0B,EAA3D;AAEA,QAAID,aAAa,CAACE,YAAlB,EACE,OAAO;AAAEC,MAAAA,OAAO,EAAG,GAAEd,KAAK,CAACE,KAAM,eAA1B;AAA0CQ,MAAAA;AAA1C,KAAP;AACF,QAAIC,aAAa,CAACI,QAAlB,EACE,OAAO;AACLD,MAAAA,OAAO,EAAG,GAAEd,KAAK,CAACE,KAAM,qBAAoBE,SAAU,mBADjD;AAELM,MAAAA;AAFK,KAAP;AAIF,WAAO,IAAP;AACD;;AAED,sBACE;AAAA,4BACE;AAAO,MAAA,GAAG,EAAET,OAAZ;AAAA,gBAAsBD,KAAK,CAACE;AAA5B;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AACE,MAAA,EAAE,EAAED,OADN;AAEE,MAAA,KAAK,EAAED,KAAK,CAACgB,KAFf;AAGE,MAAA,QAAQ,EAAGC,CAAD,IAAOjB,KAAK,CAACkB,QAAN,CAAeD,CAAf,EAAkBjB,KAAK,CAACmB,KAAxB,CAHnB;AAIE,MAAA,QAAQ,EAAE,IAJZ;AAKE,MAAA,SAAS,EAAEf;AALb;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAYD;;AAED,SAASQ,0BAAT,CAAoCQ,SAApC,EAA+C;AAC7C,QAAMV,OAAO,GAAGW,QAAQ,CAACC,aAAT,CACb,cAAatB,KAAK,CAACE,KAAM,IAAGF,KAAK,CAACG,QAAS,EAD9B,CAAhB;AAGA,QAAMQ,aAAa,GAAGD,OAAO,CAACa,QAA9B;AACA,SAAO,CAACb,OAAD,EAAUC,aAAV,CAAP;AACD","sourcesContent":["import { useRef } from \"react\";\r\n\r\nexport function TextField(props) {\r\n  const inputId = `form-field-${props.label}-${props.uniqueId}`;\r\n  const minLength = 8;\r\n\r\n  const validatorAdded = useRef(false);\r\n\r\n  console.log(\"render formfield\");\r\n  //to ensure validator only gets added to parent Form once\r\n  if (!validatorAdded.current) {\r\n    console.log(\"validator added is false\");\r\n    validatorAdded.current = true;\r\n    console.log(\"now true\");\r\n  }\r\n\r\n  function validate() {\r\n    const [element, validityState] = getElementAndValidityState();\r\n\r\n    if (validityState.valueMissing)\r\n      return { message: `${props.label} is required.`, element };\r\n    if (validityState.tooShort)\r\n      return {\r\n        message: `${props.label} must be at least ${minLength} characters long.`,\r\n        element,\r\n      };\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <label for={inputId}>{props.label}</label>\r\n      <input\r\n        id={inputId}\r\n        value={props.value}\r\n        onChange={(e) => props.onChange(e, props.index)}\r\n        required={true}\r\n        minLength={minLength}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nfunction getElementAndValidityState(elementId) {\r\n  const element = document.querySelector(\r\n    `form-field-${props.label}-${props.uniqueId}`\r\n  );\r\n  const validityState = element.validity;\r\n  return [element, validityState];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}