{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\adnan\\\\web-dev\\\\my-game-page\\\\components\\\\FormFields.js\";\nimport { useState, useRef, useEffect } from \"react\";\nimport { nanoid } from \"nanoid\";\nexport function TextField(props) {\n  const {\n    0: uniqueId,\n    1: setUniqueId\n  } = useState(undefined);\n  const inputId = `form-field-${props.label}-${uniqueId}`;\n  const minLength = props.min;\n  useEffect(() => {\n    console.log(\"effec\");\n    setUniqueId(nanoid());\n  }, []);\n  const validatorAdded = useRef(false); //to ensure validator only gets added to parent Form once\n\n  if (!validatorAdded.current) {\n    props.addValidator(validate);\n    validatorAdded.current = true;\n  }\n\n  function validate() {\n    const [element, validityState] = getElementAndValidityState(inputId);\n    if (validityState.valueMissing) return {\n      message: `${props.label} is required.`,\n      element\n    };\n    if (validityState.tooShort) return {\n      message: `${props.label} must be at least ${minLength} characters long.`,\n      element\n    };\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: inputId,\n      children: props.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: inputId,\n      value: props.value,\n      onChange: e => props.onChange(e, props.index),\n      required: props.required,\n      minLength: minLength\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\nfunction getElementAndValidityState(elementId) {\n  const element = document.querySelector(`#${elementId}`);\n  const validityState = element.validity;\n  return [element, validityState];\n}","map":{"version":3,"sources":["C:/Users/adnan/web-dev/my-game-page/components/FormFields.js"],"names":["useState","useRef","useEffect","nanoid","TextField","props","uniqueId","setUniqueId","undefined","inputId","label","minLength","min","console","log","validatorAdded","current","addValidator","validate","element","validityState","getElementAndValidityState","valueMissing","message","tooShort","value","e","onChange","index","required","elementId","document","querySelector","validity"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,SAASC,MAAT,QAAuB,QAAvB;AAEA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAC/B,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0BP,QAAQ,CAACQ,SAAD,CAAxC;AACA,QAAMC,OAAO,GAAI,cAAaJ,KAAK,CAACK,KAAM,IAAGJ,QAAS,EAAtD;AACA,QAAMK,SAAS,GAAGN,KAAK,CAACO,GAAxB;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAP,IAAAA,WAAW,CAACJ,MAAM,EAAP,CAAX;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA,QAAMY,cAAc,GAAGd,MAAM,CAAC,KAAD,CAA7B,CAV+B,CAY/B;;AACA,MAAI,CAACc,cAAc,CAACC,OAApB,EAA6B;AAC3BX,IAAAA,KAAK,CAACY,YAAN,CAAmBC,QAAnB;AACAH,IAAAA,cAAc,CAACC,OAAf,GAAyB,IAAzB;AACD;;AAED,WAASE,QAAT,GAAoB;AAClB,UAAM,CAACC,OAAD,EAAUC,aAAV,IAA2BC,0BAA0B,CAACZ,OAAD,CAA3D;AAEA,QAAIW,aAAa,CAACE,YAAlB,EACE,OAAO;AAAEC,MAAAA,OAAO,EAAG,GAAElB,KAAK,CAACK,KAAM,eAA1B;AAA0CS,MAAAA;AAA1C,KAAP;AACF,QAAIC,aAAa,CAACI,QAAlB,EACE,OAAO;AACLD,MAAAA,OAAO,EAAG,GAAElB,KAAK,CAACK,KAAM,qBAAoBC,SAAU,mBADjD;AAELQ,MAAAA;AAFK,KAAP;AAIF,WAAO,IAAP;AACD;;AAED,sBACE;AAAA,4BACE;AAAO,MAAA,OAAO,EAAEV,OAAhB;AAAA,gBAA0BJ,KAAK,CAACK;AAAhC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AACE,MAAA,EAAE,EAAED,OADN;AAEE,MAAA,KAAK,EAAEJ,KAAK,CAACoB,KAFf;AAGE,MAAA,QAAQ,EAAGC,CAAD,IAAOrB,KAAK,CAACsB,QAAN,CAAeD,CAAf,EAAkBrB,KAAK,CAACuB,KAAxB,CAHnB;AAIE,MAAA,QAAQ,EAAEvB,KAAK,CAACwB,QAJlB;AAKE,MAAA,SAAS,EAAElB;AALb;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAYD;;AAED,SAASU,0BAAT,CAAoCS,SAApC,EAA+C;AAC7C,QAAMX,OAAO,GAAGY,QAAQ,CAACC,aAAT,CAAwB,IAAGF,SAAU,EAArC,CAAhB;AACA,QAAMV,aAAa,GAAGD,OAAO,CAACc,QAA9B;AACA,SAAO,CAACd,OAAD,EAAUC,aAAV,CAAP;AACD","sourcesContent":["import { useState, useRef, useEffect } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nexport function TextField(props) {\r\n  const [uniqueId, setUniqueId] = useState(undefined);\r\n  const inputId = `form-field-${props.label}-${uniqueId}`;\r\n  const minLength = props.min;\r\n\r\n  useEffect(() => {\r\n    console.log(\"effec\");\r\n    setUniqueId(nanoid());\r\n  }, []);\r\n\r\n  const validatorAdded = useRef(false);\r\n\r\n  //to ensure validator only gets added to parent Form once\r\n  if (!validatorAdded.current) {\r\n    props.addValidator(validate);\r\n    validatorAdded.current = true;\r\n  }\r\n\r\n  function validate() {\r\n    const [element, validityState] = getElementAndValidityState(inputId);\r\n\r\n    if (validityState.valueMissing)\r\n      return { message: `${props.label} is required.`, element };\r\n    if (validityState.tooShort)\r\n      return {\r\n        message: `${props.label} must be at least ${minLength} characters long.`,\r\n        element,\r\n      };\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <label htmlFor={inputId}>{props.label}</label>\r\n      <input\r\n        id={inputId}\r\n        value={props.value}\r\n        onChange={(e) => props.onChange(e, props.index)}\r\n        required={props.required}\r\n        minLength={minLength}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nfunction getElementAndValidityState(elementId) {\r\n  const element = document.querySelector(`#${elementId}`);\r\n  const validityState = element.validity;\r\n  return [element, validityState];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}