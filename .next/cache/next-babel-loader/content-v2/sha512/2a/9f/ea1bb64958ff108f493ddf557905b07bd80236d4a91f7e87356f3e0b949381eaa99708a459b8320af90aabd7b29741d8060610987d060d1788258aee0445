{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\adnan\\\\web-dev\\\\my-game-page\\\\pages\\\\userPage.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef } from \"react\";\nimport Game from \"../components/Game\";\nimport GameSearchBox from \"../components/GameSearchBox\";\n/**\r\n *\r\n * The page that is displayed when\r\n * viewing a user's profile\r\n *\r\n * @param {object} props\r\n */\n\nexport var __N_SSP = true;\nexport default function UserPage(props) {\n  _s();\n\n  var _this = this;\n\n  /* setting state */\n  //the user's actual favorite games\n  var _useState = useState(props.games),\n      favoriteGames = _useState[0],\n      setFavoriteGames = _useState[1]; //the user's favorite game as currently displayed. these may differ\n  //from actual favorite games during editing\n\n\n  var _useState2 = useState(favoriteGames),\n      displayedFavoriteGames = _useState2[0],\n      setdisplayedFavoriteGames = _useState2[1]; //whether or not user is editing favorite games\n\n\n  var _useState3 = useState(false),\n      isEditing = _useState3[0],\n      setIsEditing = _useState3[1];\n  /**\r\n   * Called when a Game is dragged. Adds\r\n   * the Game's data-index attribute to\r\n   * DragEvent.dataTransfer to be used by\r\n   * dropGame() later on\r\n   *\r\n   * @param {DragEvent} e\r\n   */\n\n\n  function startDragGame(e) {\n    e.stopPropagation();\n    e.dataTransfer.setData(\"text/plain\", e.target.dataset.index);\n  } //dragover handler is needed to make element\n  //draggable\n\n\n  function dragOver(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    e.dataTransfer.dropEffect = \"move\";\n  }\n  /**\r\n   * The dragged game will be swapped with the game\r\n   * it's dropped on.\r\n   *\r\n   * @param {DragEvent} e\r\n   */\n\n\n  function dropGame(e) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    var newFaveGames = _toConsumableArray(displayedFavoriteGames);\n\n    var i = Number(e.target.dataset.index);\n    var j = Number(e.dataTransfer.getData(\"text/plain\"));\n    var temp = newFaveGames[i];\n    newFaveGames[i] = newFaveGames[j];\n    newFaveGames[j] = temp;\n    setdisplayedFavoriteGames(newFaveGames);\n  }\n  /**\r\n   * Deletes a game from displayedFavoriteGames.\r\n   *\r\n   * @param {number} gameId the id of game to be deleted\r\n   */\n\n\n  function deleteGame(gameId) {\n    setdisplayedFavoriteGames(displayedFavoriteGames.filter(function (game) {\n      return game.id !== gameId;\n    }));\n  }\n  /**\r\n   * Called when editing is cancelled. Sets displayed favorite games\r\n   * to actual favorite games.\r\n   */\n\n\n  function rollbackChanges() {\n    setdisplayedFavoriteGames(favoriteGames);\n    setIsEditing(false);\n  } //get a list of Game components corresponding to favorite games\n  //each is given a data-index attribute that corresponds to\n  //what position in the list they are. this will be used during\n  //editing favorite games.\n\n\n  var favoriteGamesList = displayedFavoriteGames.map(function (game, index) {\n    return /*#__PURE__*/_jsxDEV(Game, {\n      gameId: game.id,\n      gameName: game.name,\n      gameCoverUrl: game.coverurl,\n      isEditing: isEditing,\n      \"data-index\": \"\" + index,\n      draggable: isEditing + \"\",\n      onDragStart: isEditing ? startDragGame : undefined,\n      onDragOver: isEditing ? dragOver : undefined,\n      onDrop: isEditing ? dropGame : undefined,\n      onDelete: deleteGame\n    }, game.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }, _this);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: props.displayName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"favorite-games-list\",\n      children: favoriteGamesList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), props.id && (!isEditing ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: function onClick() {\n        return setIsEditing(true);\n      },\n      children: \"Edit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }, this) : isEditing && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: rollbackChanges,\n      children: \"Cancel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 24\n    }, this))]\n  }, void 0, true);\n}\n\n_s(UserPage, \"8A0nR8LetBXEaFzx9gwvZXMVKCk=\");\n\n_c = UserPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserPage\");","map":{"version":3,"sources":["C:/Users/adnan/web-dev/my-game-page/pages/userPage.js"],"names":["useState","useRef","Game","GameSearchBox","UserPage","props","games","favoriteGames","setFavoriteGames","displayedFavoriteGames","setdisplayedFavoriteGames","isEditing","setIsEditing","startDragGame","e","stopPropagation","dataTransfer","setData","target","dataset","index","dragOver","preventDefault","dropEffect","dropGame","newFaveGames","i","Number","j","getData","temp","deleteGame","gameId","filter","game","id","rollbackChanges","favoriteGamesList","map","name","coverurl","undefined","displayName"],"mappings":"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","sourcesContent":["import { useState, useRef } from \"react\";\r\nimport Game from \"../components/Game\";\r\nimport GameSearchBox from \"../components/GameSearchBox\";\r\n\r\n/**\r\n *\r\n * The page that is displayed when\r\n * viewing a user's profile\r\n *\r\n * @param {object} props\r\n */\r\n\r\nexport default function UserPage(props) {\r\n  /* setting state */\r\n  //the user's actual favorite games\r\n  const [favoriteGames, setFavoriteGames] = useState(props.games);\r\n  //the user's favorite game as currently displayed. these may differ\r\n  //from actual favorite games during editing\r\n  const [displayedFavoriteGames, setdisplayedFavoriteGames] = useState(\r\n    favoriteGames\r\n  );\r\n  //whether or not user is editing favorite games\r\n  const [isEditing, setIsEditing] = useState(false);\r\n\r\n  /**\r\n   * Called when a Game is dragged. Adds\r\n   * the Game's data-index attribute to\r\n   * DragEvent.dataTransfer to be used by\r\n   * dropGame() later on\r\n   *\r\n   * @param {DragEvent} e\r\n   */\r\n  function startDragGame(e) {\r\n    e.stopPropagation();\r\n    e.dataTransfer.setData(\"text/plain\", e.target.dataset.index);\r\n  }\r\n\r\n  //dragover handler is needed to make element\r\n  //draggable\r\n  function dragOver(e) {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    e.dataTransfer.dropEffect = \"move\";\r\n  }\r\n\r\n  /**\r\n   * The dragged game will be swapped with the game\r\n   * it's dropped on.\r\n   *\r\n   * @param {DragEvent} e\r\n   */\r\n  function dropGame(e) {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    const newFaveGames = [...displayedFavoriteGames];\r\n    const i = Number(e.target.dataset.index);\r\n    const j = Number(e.dataTransfer.getData(\"text/plain\"));\r\n    const temp = newFaveGames[i];\r\n    newFaveGames[i] = newFaveGames[j];\r\n    newFaveGames[j] = temp;\r\n    setdisplayedFavoriteGames(newFaveGames);\r\n  }\r\n\r\n  /**\r\n   * Deletes a game from displayedFavoriteGames.\r\n   *\r\n   * @param {number} gameId the id of game to be deleted\r\n   */\r\n  function deleteGame(gameId) {\r\n    setdisplayedFavoriteGames(\r\n      displayedFavoriteGames.filter((game) => game.id !== gameId)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Called when editing is cancelled. Sets displayed favorite games\r\n   * to actual favorite games.\r\n   */\r\n  function rollbackChanges() {\r\n    setdisplayedFavoriteGames(favoriteGames);\r\n    setIsEditing(false);\r\n  }\r\n\r\n  //get a list of Game components corresponding to favorite games\r\n  //each is given a data-index attribute that corresponds to\r\n  //what position in the list they are. this will be used during\r\n  //editing favorite games.\r\n  const favoriteGamesList = displayedFavoriteGames.map((game, index) => (\r\n    <Game\r\n      key={game.id}\r\n      gameId={game.id}\r\n      gameName={game.name}\r\n      gameCoverUrl={game.coverurl}\r\n      isEditing={isEditing}\r\n      data-index={\"\" + index}\r\n      draggable={isEditing + \"\"}\r\n      onDragStart={isEditing ? startDragGame : undefined}\r\n      onDragOver={isEditing ? dragOver : undefined}\r\n      onDrop={isEditing ? dropGame : undefined}\r\n      onDelete={deleteGame}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      <h1>{props.displayName}</h1>\r\n      <div className=\"favorite-games-list\">{favoriteGamesList}</div>\r\n      {props.id &&\r\n        (!isEditing ? (\r\n          <button onClick={() => setIsEditing(true)}>Edit</button>\r\n        ) : (\r\n          isEditing && <button onClick={rollbackChanges}>Cancel</button>\r\n        ))}\r\n    </>\r\n  );\r\n}\r\n\r\nexport function getServerSideProps(context) {\r\n  return {\r\n    props: JSON.parse(JSON.stringify(context.res.locals)),\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}