{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\adnan\\\\web-dev\\\\my-game-page\\\\components\\\\FormFields.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useEffect } from \"react\";\nimport { nanoid } from \"nanoid\";\nexport function TextField(props) {\n  _s();\n\n  //   const [uniqueId, setUniqueId] = useState(undefined);\n  var uniqueId = props.index;\n  var inputId = \"form-field-\".concat(props.label, \"-\").concat(uniqueId);\n  var minLength = props.min; //to avoid server/client mismatch of randomly generated id\n  //id is set after render\n  //   useEffect(() => {\n  //     setUniqueId(nanoid());\n  //   }, []);\n\n  var validatorAdded = useRef(false); //to ensure validator only gets added to parent Form once\n\n  if (!validatorAdded.current) {\n    props.addValidator(validate);\n    validatorAdded.current = true;\n  }\n\n  function validate() {\n    var _getElementAndValidit = getElementAndValidityState(inputId),\n        _getElementAndValidit2 = _slicedToArray(_getElementAndValidit, 2),\n        element = _getElementAndValidit2[0],\n        validityState = _getElementAndValidit2[1];\n\n    if (validityState.valueMissing) return {\n      message: \"\".concat(props.label, \" is required.\"),\n      element: element\n    };\n    if (validityState.tooShort) return {\n      message: \"\".concat(props.label, \" must be at least \").concat(minLength, \" characters long.\"),\n      element: element\n    };\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: inputId,\n      children: props.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: inputId,\n      value: props.value,\n      onChange: function onChange(e) {\n        return props.onChange(e, props.index);\n      },\n      required: props.required,\n      minLength: minLength\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(TextField, \"LBzU2/6EwRp3XK6tfogFFJSW0Po=\");\n\n_c = TextField;\n\nfunction getElementAndValidityState(elementId) {\n  console.log(\"called with \".concat(elementId));\n  var element = document.querySelector(\"#\".concat(elementId));\n  var validityState = element.validity;\n  return [element, validityState];\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"TextField\");","map":{"version":3,"sources":["C:/Users/adnan/web-dev/my-game-page/components/FormFields.js"],"names":["useState","useRef","useEffect","nanoid","TextField","props","uniqueId","index","inputId","label","minLength","min","validatorAdded","current","addValidator","validate","getElementAndValidityState","element","validityState","valueMissing","message","tooShort","value","e","onChange","required","elementId","console","log","document","querySelector","validity"],"mappings":";;;;;;;AAAA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,SAASC,MAAT,QAAuB,QAAvB;AAEA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA;;AAC/B;AACA,MAAMC,QAAQ,GAAGD,KAAK,CAACE,KAAvB;AACA,MAAMC,OAAO,wBAAiBH,KAAK,CAACI,KAAvB,cAAgCH,QAAhC,CAAb;AACA,MAAMI,SAAS,GAAGL,KAAK,CAACM,GAAxB,CAJ+B,CAM/B;AACA;AACA;AACA;AACA;;AAEA,MAAMC,cAAc,GAAGX,MAAM,CAAC,KAAD,CAA7B,CAZ+B,CAc/B;;AACA,MAAI,CAACW,cAAc,CAACC,OAApB,EAA6B;AAC3BR,IAAAA,KAAK,CAACS,YAAN,CAAmBC,QAAnB;AACAH,IAAAA,cAAc,CAACC,OAAf,GAAyB,IAAzB;AACD;;AAED,WAASE,QAAT,GAAoB;AAAA,gCACeC,0BAA0B,CAACR,OAAD,CADzC;AAAA;AAAA,QACXS,OADW;AAAA,QACFC,aADE;;AAGlB,QAAIA,aAAa,CAACC,YAAlB,EACE,OAAO;AAAEC,MAAAA,OAAO,YAAKf,KAAK,CAACI,KAAX,kBAAT;AAA0CQ,MAAAA,OAAO,EAAPA;AAA1C,KAAP;AACF,QAAIC,aAAa,CAACG,QAAlB,EACE,OAAO;AACLD,MAAAA,OAAO,YAAKf,KAAK,CAACI,KAAX,+BAAqCC,SAArC,sBADF;AAELO,MAAAA,OAAO,EAAPA;AAFK,KAAP;AAIF,WAAO,IAAP;AACD;;AAED,sBACE;AAAA,4BACE;AAAO,MAAA,OAAO,EAAET,OAAhB;AAAA,gBAA0BH,KAAK,CAACI;AAAhC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AACE,MAAA,EAAE,EAAED,OADN;AAEE,MAAA,KAAK,EAAEH,KAAK,CAACiB,KAFf;AAGE,MAAA,QAAQ,EAAE,kBAACC,CAAD;AAAA,eAAOlB,KAAK,CAACmB,QAAN,CAAeD,CAAf,EAAkBlB,KAAK,CAACE,KAAxB,CAAP;AAAA,OAHZ;AAIE,MAAA,QAAQ,EAAEF,KAAK,CAACoB,QAJlB;AAKE,MAAA,SAAS,EAAEf;AALb;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAYD;;GA7CeN,S;;KAAAA,S;;AA+ChB,SAASY,0BAAT,CAAoCU,SAApC,EAA+C;AAC7CC,EAAAA,OAAO,CAACC,GAAR,uBAA2BF,SAA3B;AACA,MAAMT,OAAO,GAAGY,QAAQ,CAACC,aAAT,YAA2BJ,SAA3B,EAAhB;AACA,MAAMR,aAAa,GAAGD,OAAO,CAACc,QAA9B;AACA,SAAO,CAACd,OAAD,EAAUC,aAAV,CAAP;AACD","sourcesContent":["import { useState, useRef, useEffect } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nexport function TextField(props) {\r\n  //   const [uniqueId, setUniqueId] = useState(undefined);\r\n  const uniqueId = props.index;\r\n  const inputId = `form-field-${props.label}-${uniqueId}`;\r\n  const minLength = props.min;\r\n\r\n  //to avoid server/client mismatch of randomly generated id\r\n  //id is set after render\r\n  //   useEffect(() => {\r\n  //     setUniqueId(nanoid());\r\n  //   }, []);\r\n\r\n  const validatorAdded = useRef(false);\r\n\r\n  //to ensure validator only gets added to parent Form once\r\n  if (!validatorAdded.current) {\r\n    props.addValidator(validate);\r\n    validatorAdded.current = true;\r\n  }\r\n\r\n  function validate() {\r\n    const [element, validityState] = getElementAndValidityState(inputId);\r\n\r\n    if (validityState.valueMissing)\r\n      return { message: `${props.label} is required.`, element };\r\n    if (validityState.tooShort)\r\n      return {\r\n        message: `${props.label} must be at least ${minLength} characters long.`,\r\n        element,\r\n      };\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <label htmlFor={inputId}>{props.label}</label>\r\n      <input\r\n        id={inputId}\r\n        value={props.value}\r\n        onChange={(e) => props.onChange(e, props.index)}\r\n        required={props.required}\r\n        minLength={minLength}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nfunction getElementAndValidityState(elementId) {\r\n  console.log(`called with ${elementId}`);\r\n  const element = document.querySelector(`#${elementId}`);\r\n  const validityState = element.validity;\r\n  return [element, validityState];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}