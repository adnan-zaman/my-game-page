{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\adnan\\\\web-dev\\\\my-game-page\\\\components\\\\FormFields.js\";\nimport { useRef } from \"react\";\nexport function TextField(props) {\n  const inputId = `form-field-${props.label}-${props.uniqueId}`;\n  const minLength = props.min;\n  const validatorAdded = useRef(false); //to ensure validator only gets added to parent Form once\n\n  if (!validatorAdded.current) {\n    props.addValidator(validate);\n    validatorAdded.current = true;\n  }\n\n  function validate() {\n    const [element, validityState] = getElementAndValidityState(\"abc\");\n    if (validityState.valueMissing) return {\n      message: `${props.label} is required.`,\n      element\n    };\n    if (validityState.tooShort) return {\n      message: `${props.label} must be at least ${minLength} characters long.`,\n      element\n    };\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"abc\",\n      children: props.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"abc\",\n      value: props.value,\n      onChange: e => props.onChange(e, props.index),\n      required: props.required,\n      minLength: minLength\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\nfunction getElementAndValidityState(elementId) {\n  const element = document.querySelector(`#elementId`);\n  const validityState = element.validity;\n  return [element, validityState];\n}","map":{"version":3,"sources":["C:/Users/adnan/web-dev/my-game-page/components/FormFields.js"],"names":["useRef","TextField","props","inputId","label","uniqueId","minLength","min","validatorAdded","current","addValidator","validate","element","validityState","getElementAndValidityState","valueMissing","message","tooShort","value","e","onChange","index","required","elementId","document","querySelector","validity"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,OAAvB;AAEA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAC/B,QAAMC,OAAO,GAAI,cAAaD,KAAK,CAACE,KAAM,IAAGF,KAAK,CAACG,QAAS,EAA5D;AACA,QAAMC,SAAS,GAAGJ,KAAK,CAACK,GAAxB;AAEA,QAAMC,cAAc,GAAGR,MAAM,CAAC,KAAD,CAA7B,CAJ+B,CAM/B;;AACA,MAAI,CAACQ,cAAc,CAACC,OAApB,EAA6B;AAC3BP,IAAAA,KAAK,CAACQ,YAAN,CAAmBC,QAAnB;AACAH,IAAAA,cAAc,CAACC,OAAf,GAAyB,IAAzB;AACD;;AAED,WAASE,QAAT,GAAoB;AAClB,UAAM,CAACC,OAAD,EAAUC,aAAV,IAA2BC,0BAA0B,CAAC,KAAD,CAA3D;AAEA,QAAID,aAAa,CAACE,YAAlB,EACE,OAAO;AAAEC,MAAAA,OAAO,EAAG,GAAEd,KAAK,CAACE,KAAM,eAA1B;AAA0CQ,MAAAA;AAA1C,KAAP;AACF,QAAIC,aAAa,CAACI,QAAlB,EACE,OAAO;AACLD,MAAAA,OAAO,EAAG,GAAEd,KAAK,CAACE,KAAM,qBAAoBE,SAAU,mBADjD;AAELM,MAAAA;AAFK,KAAP;AAIF,WAAO,IAAP;AACD;;AAED,sBACE;AAAA,4BACE;AAAO,MAAA,OAAO,EAAC,KAAf;AAAA,gBAAsBV,KAAK,CAACE;AAA5B;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AACE,MAAA,EAAE,EAAC,KADL;AAEE,MAAA,KAAK,EAAEF,KAAK,CAACgB,KAFf;AAGE,MAAA,QAAQ,EAAGC,CAAD,IAAOjB,KAAK,CAACkB,QAAN,CAAeD,CAAf,EAAkBjB,KAAK,CAACmB,KAAxB,CAHnB;AAIE,MAAA,QAAQ,EAAEnB,KAAK,CAACoB,QAJlB;AAKE,MAAA,SAAS,EAAEhB;AALb;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAYD;;AAED,SAASQ,0BAAT,CAAoCS,SAApC,EAA+C;AAC7C,QAAMX,OAAO,GAAGY,QAAQ,CAACC,aAAT,CAAwB,YAAxB,CAAhB;AACA,QAAMZ,aAAa,GAAGD,OAAO,CAACc,QAA9B;AACA,SAAO,CAACd,OAAD,EAAUC,aAAV,CAAP;AACD","sourcesContent":["import { useRef } from \"react\";\r\n\r\nexport function TextField(props) {\r\n  const inputId = `form-field-${props.label}-${props.uniqueId}`;\r\n  const minLength = props.min;\r\n\r\n  const validatorAdded = useRef(false);\r\n\r\n  //to ensure validator only gets added to parent Form once\r\n  if (!validatorAdded.current) {\r\n    props.addValidator(validate);\r\n    validatorAdded.current = true;\r\n  }\r\n\r\n  function validate() {\r\n    const [element, validityState] = getElementAndValidityState(\"abc\");\r\n\r\n    if (validityState.valueMissing)\r\n      return { message: `${props.label} is required.`, element };\r\n    if (validityState.tooShort)\r\n      return {\r\n        message: `${props.label} must be at least ${minLength} characters long.`,\r\n        element,\r\n      };\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <label htmlFor=\"abc\">{props.label}</label>\r\n      <input\r\n        id=\"abc\"\r\n        value={props.value}\r\n        onChange={(e) => props.onChange(e, props.index)}\r\n        required={props.required}\r\n        minLength={minLength}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nfunction getElementAndValidityState(elementId) {\r\n  const element = document.querySelector(`#elementId`);\r\n  const validityState = element.validity;\r\n  return [element, validityState];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}