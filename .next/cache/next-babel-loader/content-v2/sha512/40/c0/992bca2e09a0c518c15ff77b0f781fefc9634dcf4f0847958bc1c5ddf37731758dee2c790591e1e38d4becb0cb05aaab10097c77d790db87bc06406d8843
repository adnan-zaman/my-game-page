{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\adnan\\\\web-dev\\\\my-game-page\\\\components\\\\Form.js\";\nimport React, { useState, useRef } from \"react\";\n/**\r\n *\r\n * General form component that validates and controls the state\r\n * of all of its fields. Children of Form should be a list of FormElements.\r\n *\r\n *\r\n * @param {object} props Expected props:\r\n * - id {string} form htmlElement's id\r\n *\r\n * - onSubmit {function(event, object)} callback for when form submits.\r\n *   Form will send two arguments, the first is the event, the second\r\n *   is the error info object. If one of the FormFields within the Form\r\n *   were not valid, the second argument will be an object containing\r\n *   information about the error. If everything was valid, it will be null.\r\n *\r\n * - submitBtnText {string} the textContent for the submit button\r\n *\r\n * - action? {string} value for form's action attribute\r\n *\r\n * - method? {string} value for form's method attribute\r\n *\r\n * -props.children should be a list of FormField elements. Each FormField\r\n *  should be initialized with an initial value prop.\r\n *\r\n */\n\nexport default function Form(props) {\n  //array of values for all children (FormFields)\n  //initializes state to be equal to the initial value given by\n  //parent component\n  const {\n    0: fieldValues,\n    1: setFieldValues\n  } = useState(React.Children.map(props.children, child => {\n    console.log(child);\n    console.log(child.props.value);\n    return child.props.value;\n  })); //list of validators of all of this Form's FormFields\n\n  const fieldValidators = useRef([]);\n  console.log(\"in form, field values\");\n  console.log(fieldValues); //takes control of childrens state and passes own props\n\n  const children = React.Children.map(props.children, (child, index) => /*#__PURE__*/React.cloneElement(child, {\n    value: fieldValues[index],\n    addValidator: validator => fieldValidators.current.push(validator),\n    onChange: handleChange,\n    parentId: props.id,\n    //add parent id to so FormField can make unique ids for its elements\n    index\n  }));\n  /**\r\n   * Handles value changes for all of a Form's FormFields.\r\n   *\r\n   * @param {Event} e\r\n   * @param {Number} index FormField's index prop\r\n   */\n\n  function handleChange(e, index) {\n    console.log(`changed called ${e.target.value}`); //the index prop of each FormField and fieldValues are parallel\n    //so if a FormField passes it's props.index, we can set\n    //the correct state\n\n    const newFieldValues = fieldValues.map((value, i) => i === index ? e.target.value : value);\n    setFieldValues(newFieldValues);\n  }\n  /**\r\n   * Calls every FormField's validator function. If any field\r\n   * is invalid, will send the error info object to parent component.\r\n   *\r\n   * @param {event} e\r\n   */\n\n\n  function validateAllFields(e) {\n    for (const validator of fieldValidators.current) {\n      const errorInfo = validator();\n      if (errorInfo) return props.onSubmit(e, errorInfo);\n    }\n\n    props.onSubmit(e, null);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    id: props.id,\n    onSubmit: validateAllFields,\n    noValidate: true,\n    action: props.action,\n    method: props.action,\n    children: [children, /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: props.submitBtnText || \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/adnan/web-dev/my-game-page/components/Form.js"],"names":["React","useState","useRef","Form","props","fieldValues","setFieldValues","Children","map","children","child","console","log","value","fieldValidators","index","cloneElement","addValidator","validator","current","push","onChange","handleChange","parentId","id","e","target","newFieldValues","i","validateAllFields","errorInfo","onSubmit","action","submitBtnText"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\r\n\r\n/**\r\n *\r\n * General form component that validates and controls the state\r\n * of all of its fields. Children of Form should be a list of FormElements.\r\n *\r\n *\r\n * @param {object} props Expected props:\r\n * - id {string} form htmlElement's id\r\n *\r\n * - onSubmit {function(event, object)} callback for when form submits.\r\n *   Form will send two arguments, the first is the event, the second\r\n *   is the error info object. If one of the FormFields within the Form\r\n *   were not valid, the second argument will be an object containing\r\n *   information about the error. If everything was valid, it will be null.\r\n *\r\n * - submitBtnText {string} the textContent for the submit button\r\n *\r\n * - action? {string} value for form's action attribute\r\n *\r\n * - method? {string} value for form's method attribute\r\n *\r\n * -props.children should be a list of FormField elements. Each FormField\r\n *  should be initialized with an initial value prop.\r\n *\r\n */\r\nexport default function Form(props) {\r\n  //array of values for all children (FormFields)\r\n  //initializes state to be equal to the initial value given by\r\n  //parent component\r\n  const [fieldValues, setFieldValues] = useState(\r\n    React.Children.map(props.children, (child) => {\r\n      console.log(child);\r\n      console.log(child.props.value);\r\n      return child.props.value;\r\n    })\r\n  );\r\n\r\n  //list of validators of all of this Form's FormFields\r\n  const fieldValidators = useRef([]);\r\n\r\n  console.log(\"in form, field values\");\r\n  console.log(fieldValues);\r\n  //takes control of childrens state and passes own props\r\n  const children = React.Children.map(props.children, (child, index) =>\r\n    React.cloneElement(child, {\r\n      value: fieldValues[index],\r\n      addValidator: (validator) => fieldValidators.current.push(validator),\r\n      onChange: handleChange,\r\n      parentId: props.id, //add parent id to so FormField can make unique ids for its elements\r\n      index,\r\n    })\r\n  );\r\n\r\n  /**\r\n   * Handles value changes for all of a Form's FormFields.\r\n   *\r\n   * @param {Event} e\r\n   * @param {Number} index FormField's index prop\r\n   */\r\n  function handleChange(e, index) {\r\n    console.log(`changed called ${e.target.value}`);\r\n    //the index prop of each FormField and fieldValues are parallel\r\n    //so if a FormField passes it's props.index, we can set\r\n    //the correct state\r\n    const newFieldValues = fieldValues.map((value, i) =>\r\n      i === index ? e.target.value : value\r\n    );\r\n    setFieldValues(newFieldValues);\r\n  }\r\n\r\n  /**\r\n   * Calls every FormField's validator function. If any field\r\n   * is invalid, will send the error info object to parent component.\r\n   *\r\n   * @param {event} e\r\n   */\r\n  function validateAllFields(e) {\r\n    for (const validator of fieldValidators.current) {\r\n      const errorInfo = validator();\r\n      if (errorInfo) return props.onSubmit(e, errorInfo);\r\n    }\r\n    props.onSubmit(e, null);\r\n  }\r\n  return (\r\n    <form\r\n      id={props.id}\r\n      onSubmit={validateAllFields}\r\n      noValidate={true}\r\n      action={props.action}\r\n      method={props.action}\r\n    >\r\n      {children}\r\n      <button type=\"submit\">{props.submitBtnText || \"Submit\"}</button>\r\n    </form>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}