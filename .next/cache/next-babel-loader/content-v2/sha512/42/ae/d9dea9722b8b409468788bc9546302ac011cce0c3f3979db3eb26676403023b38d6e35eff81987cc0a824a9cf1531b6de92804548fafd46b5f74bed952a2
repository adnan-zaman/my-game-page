{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\adnan\\\\web-dev\\\\my-game-page\\\\components\\\\GameSearchBox.js\";\nimport { useState, useEffect, useRef } from \"react\";\nimport Game from \"./Game\";\nexport default function GameSearchBox(props) {\n  //search term in search bar\n  const {\n    0: displayedSearchTerm,\n    1: setDisplayedSearchTerm\n  } = useState(\"\"); //the actual underlying search term regardless of whats typed\n  //clicking next/prev will change pages for this value\n  //clicking search button will change this value\n\n  const {\n    0: searchTerm,\n    1: setSearchTerm\n  } = useState(displayedSearchTerm); //page of search results\n\n  const {\n    0: searchPage,\n    1: setSearchPage\n  } = useState(undefined); //list of objects that will be retrieved from search api\n\n  const {\n    0: searchResults,\n    1: setSearchResults\n  } = useState([]); //whether or not search results are currently loading\n\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false); //error message\n\n  const {\n    0: errorMessage,\n    1: setErrorMessage\n  } = useState(\"\"); //whether or not there is a next page of search results\n\n  const {\n    0: hasNext,\n    1: setHasNext\n  } = useState(true); //used to determine whether its first render or not\n\n  const firstRender = useRef(true);\n\n  function startDragGame(e, game) {\n    e.stopPropagation();\n    e.dataTransfer.setData(\"application/json\", JSON.stringify(game));\n  } //dragover handler is needed to make element\n  //draggable\n\n\n  function dragOver(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    e.dataTransfer.dropEffect = \"move\";\n  }\n\n  const displayedSearchResults = searchResults.map(game => /*#__PURE__*/_jsxDEV(Game, {\n    gameId: game.id,\n    gameName: game.name,\n    gameCoverUrl: game.coverurl,\n    draggable: true,\n    onDragStart: e => startDragGame(e, game),\n    onDragOver: dragOver\n  }, game.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this));\n  /**\r\n   * Updates displayed search term\r\n   * @param {Event} e\r\n   */\n\n  function handleChange(e) {\n    setDisplayedSearchTerm(e.target.value);\n  }\n  /**\r\n   * Sets searchTerm to displayedSearchTerm\r\n   * and fetches search results.\r\n   *\r\n   * @param {Event} e\r\n   */\n\n\n  function handleSearch(e) {\n    e.preventDefault();\n    if (displayedSearchTerm === \"\") return;\n    setSearchTerm(displayedSearchTerm);\n    setSearchPage(0);\n    fetchAndPopulateSearchResults(displayedSearchTerm, 0);\n  }\n  /**\r\n   * Changes page number for searchTerm\r\n   * (not displayedSearchTerm) and fetches search\r\n   * results.\r\n   *\r\n   * @param {number} pageNumber new page number\r\n   */\n\n\n  function changePage(pageNumber) {\n    if (pageNumber < 0) return;\n    setSearchPage(pageNumber);\n    fetchAndPopulateSearchResults(searchTerm, pageNumber);\n  }\n  /**\r\n   * Fetches a search from the API and populates page\r\n   * with search results. This function needs to be called\r\n   * with a search term and page manually instead of relying on\r\n   * checking state as reading state immediately after setting it\r\n   * will return stale values. So, we give it the fresh values manually.\r\n   *\r\n   * @param {string} term search term\r\n   * @param {number} page search page number\r\n   */\n\n\n  async function fetchAndPopulateSearchResults(term, page) {\n    setErrorMessage(\"\");\n    setLoading(true);\n    const query = `http://localhost:3000/api/search/${term}/${page}`;\n    const response = await fetch(query);\n    const data = await response.json();\n\n    if (response.ok) {\n      setSearchResults(data.results);\n      setHasNext(data.hasNext);\n    } else {\n      setErrorMessage(results.message);\n    }\n\n    setLoading(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSearch,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"game-search-bar\",\n          children: \"Name of Game:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"game-search-bar\",\n          value: displayedSearchTerm,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), searchPage >= 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [searchPage > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => changePage(searchPage - 1),\n            children: \"Prev\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"page-number\",\n            children: \"Page:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"page-number\",\n            disabled: true,\n            value: searchPage + 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this), hasNext && /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => changePage(searchPage + 1),\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-results\",\n      children: [errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 26\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 21\n      }, this), displayedSearchResults]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/adnan/web-dev/my-game-page/components/GameSearchBox.js"],"names":["useState","useEffect","useRef","Game","GameSearchBox","props","displayedSearchTerm","setDisplayedSearchTerm","searchTerm","setSearchTerm","searchPage","setSearchPage","undefined","searchResults","setSearchResults","loading","setLoading","errorMessage","setErrorMessage","hasNext","setHasNext","firstRender","startDragGame","e","game","stopPropagation","dataTransfer","setData","JSON","stringify","dragOver","preventDefault","dropEffect","displayedSearchResults","map","id","name","coverurl","handleChange","target","value","handleSearch","fetchAndPopulateSearchResults","changePage","pageNumber","term","page","query","response","fetch","data","json","ok","results","message"],"mappings":"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","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\r\nimport Game from \"./Game\";\r\n\r\nexport default function GameSearchBox(props) {\r\n  //search term in search bar\r\n  const [displayedSearchTerm, setDisplayedSearchTerm] = useState(\"\");\r\n  //the actual underlying search term regardless of whats typed\r\n  //clicking next/prev will change pages for this value\r\n  //clicking search button will change this value\r\n  const [searchTerm, setSearchTerm] = useState(displayedSearchTerm);\r\n  //page of search results\r\n  const [searchPage, setSearchPage] = useState(undefined);\r\n  //list of objects that will be retrieved from search api\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  //whether or not search results are currently loading\r\n  const [loading, setLoading] = useState(false);\r\n  //error message\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  //whether or not there is a next page of search results\r\n  const [hasNext, setHasNext] = useState(true);\r\n\r\n  //used to determine whether its first render or not\r\n  const firstRender = useRef(true);\r\n\r\n  function startDragGame(e, game) {\r\n    e.stopPropagation();\r\n    e.dataTransfer.setData(\"application/json\", JSON.stringify(game));\r\n  }\r\n\r\n  //dragover handler is needed to make element\r\n  //draggable\r\n  function dragOver(e) {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    e.dataTransfer.dropEffect = \"move\";\r\n  }\r\n\r\n  const displayedSearchResults = searchResults.map((game) => (\r\n    <Game\r\n      key={game.id}\r\n      gameId={game.id}\r\n      gameName={game.name}\r\n      gameCoverUrl={game.coverurl}\r\n      draggable={true}\r\n      onDragStart={(e) => startDragGame(e, game)}\r\n      onDragOver={dragOver}\r\n    />\r\n  ));\r\n\r\n  /**\r\n   * Updates displayed search term\r\n   * @param {Event} e\r\n   */\r\n  function handleChange(e) {\r\n    setDisplayedSearchTerm(e.target.value);\r\n  }\r\n\r\n  /**\r\n   * Sets searchTerm to displayedSearchTerm\r\n   * and fetches search results.\r\n   *\r\n   * @param {Event} e\r\n   */\r\n  function handleSearch(e) {\r\n    e.preventDefault();\r\n    if (displayedSearchTerm === \"\") return;\r\n    setSearchTerm(displayedSearchTerm);\r\n    setSearchPage(0);\r\n    fetchAndPopulateSearchResults(displayedSearchTerm, 0);\r\n  }\r\n\r\n  /**\r\n   * Changes page number for searchTerm\r\n   * (not displayedSearchTerm) and fetches search\r\n   * results.\r\n   *\r\n   * @param {number} pageNumber new page number\r\n   */\r\n  function changePage(pageNumber) {\r\n    if (pageNumber < 0) return;\r\n    setSearchPage(pageNumber);\r\n    fetchAndPopulateSearchResults(searchTerm, pageNumber);\r\n  }\r\n\r\n  /**\r\n   * Fetches a search from the API and populates page\r\n   * with search results. This function needs to be called\r\n   * with a search term and page manually instead of relying on\r\n   * checking state as reading state immediately after setting it\r\n   * will return stale values. So, we give it the fresh values manually.\r\n   *\r\n   * @param {string} term search term\r\n   * @param {number} page search page number\r\n   */\r\n  async function fetchAndPopulateSearchResults(term, page) {\r\n    setErrorMessage(\"\");\r\n    setLoading(true);\r\n    const query = `http://localhost:3000/api/search/${term}/${page}`;\r\n    const response = await fetch(query);\r\n    const data = await response.json();\r\n    if (response.ok) {\r\n      setSearchResults(data.results);\r\n      setHasNext(data.hasNext);\r\n    } else {\r\n      setErrorMessage(results.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <form onSubmit={handleSearch}>\r\n          <label htmlFor=\"game-search-bar\">Name of Game:</label>\r\n          <input\r\n            id=\"game-search-bar\"\r\n            value={displayedSearchTerm}\r\n            onChange={handleChange}\r\n          ></input>\r\n          <button type=\"submit\">Search</button>\r\n          {searchPage >= 0 && (\r\n            <>\r\n              {searchPage > 0 && (\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => changePage(searchPage - 1)}\r\n                >\r\n                  Prev\r\n                </button>\r\n              )}\r\n              <label htmlFor=\"page-number\">Page:</label>\r\n              <input\r\n                id=\"page-number\"\r\n                disabled={true}\r\n                value={searchPage + 1}\r\n              ></input>\r\n              {hasNext && (\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => changePage(searchPage + 1)}\r\n                >\r\n                  Next\r\n                </button>\r\n              )}\r\n            </>\r\n          )}\r\n        </form>\r\n      </div>\r\n      <div className=\"search-results\">\r\n        {errorMessage && <p>{errorMessage}</p>}\r\n        {loading && <p>Loading...</p>}\r\n        {displayedSearchResults}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}