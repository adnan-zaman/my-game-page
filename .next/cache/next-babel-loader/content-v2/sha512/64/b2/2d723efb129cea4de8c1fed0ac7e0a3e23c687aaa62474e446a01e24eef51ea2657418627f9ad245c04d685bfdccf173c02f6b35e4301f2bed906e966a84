{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState, useRef, useEffect } from \"react\";\n/**\r\n * FormFields are meant to be used with the Form component.\r\n * They are a combination of a label and a corresponding input element of some kind.\r\n * They make up the fields of a Form component. Each FormField has its own\r\n * validator function that checks the validity of its input. FormField validators\r\n * are called by its parent Form. FormFields should be the children of a Form\r\n * component and should be initialied with an initial value prop. After first render,\r\n * the Form component will take control of the FormField's value state.\r\n *\r\n */\n\n/**\r\n * Common layout template that FormFields use\r\n * @param {object} props expected props:\r\n * - FormField's label should be first child\r\n * - FormField's control should be second child\r\n *\r\n */\n\nfunction FormFieldTemplate(props) {\n  var children = React.Children.toArray(props.children); //preserve existing css classes + add bootstrap classes\n\n  var label = /*#__PURE__*/React.cloneElement(children[0], {\n    className: (children[0].className || \"\") + \" col-form-label col-md-1\"\n  });\n  var control = /*#__PURE__*/React.cloneElement(children[1], {\n    className: (children[1].className || \"\") + \" form-control\"\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-md mb-3\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\"\n  }, label, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-11\"\n  }, control)));\n}\n/**\r\n * General text input field.\r\n *\r\n * @param {object} props\r\n * - label {string} FormField's label\r\n * - name {string} name for input element\r\n * - required? {boolean} whether this FormField is required or not\r\n * - min? {number} minimum number of characters\r\n * - max? {number} maximum number of characters\r\n */\n\n\nexport function TextField(props) {\n  var inputId = \"form-field-\".concat(props.label, \"-\").concat(props.parentId);\n  var minLength = props.min;\n  var maxLength = props.max;\n  var validatorAdded = useRef(false); //to ensure validator only gets added to parent Form once\n\n  if (!validatorAdded.current) {\n    props.addValidator(validate);\n    validatorAdded.current = true;\n  }\n  /**\r\n   * Checks the validity of input\r\n   */\n\n\n  function validate() {\n    var _getElementAndValidit = getElementAndValidityState(inputId),\n        _getElementAndValidit2 = _slicedToArray(_getElementAndValidit, 2),\n        element = _getElementAndValidit2[0],\n        validityState = _getElementAndValidit2[1];\n\n    if (validityState.valueMissing) return {\n      message: \"\".concat(props.label, \" is required.\"),\n      element: element\n    };\n    if (validityState.tooShort) return {\n      message: \"\".concat(props.label, \" must be at least \").concat(minLength, \" characters long.\"),\n      element: element\n    };\n    if (validityState.tooLong) return {\n      message: \"\".concat(props.label, \" must be less than or equal to \").concat(maxLength, \" characters long.\"),\n      element: element\n    };\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(FormFieldTemplate, null, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: inputId\n  }, props.label), /*#__PURE__*/React.createElement(\"input\", {\n    id: inputId,\n    name: props.name,\n    value: props.value || \"\",\n    onChange: function onChange(e) {\n      return props.onChange(e, props.index);\n    },\n    required: props.required,\n    minLength: minLength,\n    maxLength: maxLength\n  }));\n}\n/**\r\n * Input field for emails.\r\n *\r\n * @param {object} props\r\n * - label? {string} FormField's label (default label is Email)\r\n * - name {string} name for input element\r\n * - required? {boolean} whether this FormField is required or not\r\n * - min? {number} minimum number of characters\r\n * - max? {number} maximum number of characters\r\n */\n\nexport function EmailField(props) {\n  var labelName = props.label || \"Email\";\n  var inputId = \"form-field-\".concat(labelName, \"-\").concat(props.parentId);\n  var minLength = props.min;\n  var maxLength = props.max || 50;\n  var validatorAdded = useRef(false); //to ensure validator only gets added to parent Form once\n\n  if (!validatorAdded.current) {\n    props.addValidator(validate);\n    validatorAdded.current = true;\n  }\n  /**\r\n   * Checks the validity of input.\r\n   *\r\n   * @returns {object} if input is valid, returns null. Otherwise, returns an object\r\n   * containg information about the error\r\n   * {message: error message, element: reference to HtmlElement that contains error}\r\n   */\n\n\n  function validate() {\n    var _getElementAndValidit3 = getElementAndValidityState(inputId),\n        _getElementAndValidit4 = _slicedToArray(_getElementAndValidit3, 2),\n        element = _getElementAndValidit4[0],\n        validityState = _getElementAndValidit4[1];\n\n    if (validityState.valueMissing) return {\n      message: \"\".concat(labelName, \" is required.\"),\n      element: element\n    };\n    if (validityState.typeMismatch) return {\n      message: \"\".concat(labelName, \" must be an email.\"),\n      element: element\n    };\n    if (validityState.tooShort) return {\n      message: \"\".concat(labelName, \" must be at least \").concat(minLength, \" characters long.\"),\n      element: element\n    };\n    if (validityState.tooLong) return {\n      message: \"\".concat(labelName, \" must be less than or equal to \").concat(maxLength, \" characters long.\"),\n      element: element\n    };\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(FormFieldTemplate, null, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: inputId\n  }, labelName), /*#__PURE__*/React.createElement(\"input\", {\n    id: inputId,\n    name: props.name,\n    value: props.value,\n    type: \"email\",\n    onChange: function onChange(e) {\n      return props.onChange(e, props.index);\n    },\n    required: props.required,\n    minLength: minLength,\n    maxLength: maxLength\n  }));\n}\n/**\r\n * Input field for passwords. Input is always required.\r\n *\r\n * @param {object} props\r\n * - label? {string} FormField's label (default label is Password)\r\n * - name {string} name for input element\r\n * - min? {number} minimum number of characters\r\n */\n\nexport function PasswordField(props) {\n  var labelName = props.label || \"Password\";\n  var inputId = \"form-field-\".concat(labelName, \"-\").concat(props.parentId);\n  var minLength = props.min;\n  var maxLength = props.max || 50;\n  var validatorAdded = useRef(false); //to ensure validator only gets added to parent Form once\n\n  if (!validatorAdded.current) {\n    props.addValidator(validate);\n    validatorAdded.current = true;\n  }\n  /**\r\n   * Checks the validity of input\r\n   */\n\n\n  function validate() {\n    var _getElementAndValidit5 = getElementAndValidityState(inputId),\n        _getElementAndValidit6 = _slicedToArray(_getElementAndValidit5, 2),\n        element = _getElementAndValidit6[0],\n        validityState = _getElementAndValidit6[1];\n\n    if (validityState.valueMissing) return {\n      message: \"\".concat(labelName, \" is required.\"),\n      element: element\n    };\n    if (validityState.tooShort) return {\n      message: \"\".concat(labelName, \" must be at least \").concat(minLength, \" characters long.\"),\n      element: element\n    };\n    if (validityState.tooLong) return {\n      message: \"\".concat(labelName, \" must be less than or equal to \").concat(maxLength, \" characters long.\"),\n      element: element\n    };\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(FormFieldTemplate, null, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: inputId\n  }, labelName), /*#__PURE__*/React.createElement(\"input\", {\n    id: inputId,\n    name: props.name,\n    value: props.value || \"\",\n    type: \"password\",\n    onChange: function onChange(e) {\n      return props.onChange(e, props.index);\n    },\n    required: true,\n    minLength: minLength,\n    maxLength: maxLength\n  }));\n}\n/**\r\n * Convenience function that returns an HtmlElement and its ValidityState\r\n * object given an id.\r\n *\r\n * @param {string} elementId id of FormField's HtmlElement to validate\r\n * @returns {array} [HtmlElement, validityState]\r\n */\n\nfunction getElementAndValidityState(elementId) {\n  var element = document.querySelector(\"[id='\".concat(elementId, \"']\"));\n  var validityState = element.validity;\n  return [element, validityState];\n}","map":{"version":3,"sources":["C:/Users/adnan/web-dev/my-game-page/components/FormFields.js"],"names":["React","useState","useRef","useEffect","FormFieldTemplate","props","children","Children","toArray","label","cloneElement","className","control","TextField","inputId","parentId","minLength","min","maxLength","max","validatorAdded","current","addValidator","validate","getElementAndValidityState","element","validityState","valueMissing","message","tooShort","tooLong","name","value","e","onChange","index","required","EmailField","labelName","typeMismatch","PasswordField","elementId","document","querySelector","validity"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\n\r\n/**\r\n * FormFields are meant to be used with the Form component.\r\n * They are a combination of a label and a corresponding input element of some kind.\r\n * They make up the fields of a Form component. Each FormField has its own\r\n * validator function that checks the validity of its input. FormField validators\r\n * are called by its parent Form. FormFields should be the children of a Form\r\n * component and should be initialied with an initial value prop. After first render,\r\n * the Form component will take control of the FormField's value state.\r\n *\r\n */\r\n\r\n/**\r\n * Common layout template that FormFields use\r\n * @param {object} props expected props:\r\n * - FormField's label should be first child\r\n * - FormField's control should be second child\r\n *\r\n */\r\nfunction FormFieldTemplate(props) {\r\n  const children = React.Children.toArray(props.children);\r\n  //preserve existing css classes + add bootstrap classes\r\n  const label = React.cloneElement(children[0], {\r\n    className: (children[0].className || \"\") + \" col-form-label col-md-1\",\r\n  });\r\n  const control = React.cloneElement(children[1], {\r\n    className: (children[1].className || \"\") + \" form-control\",\r\n  });\r\n\r\n  return (\r\n    <div className=\"container-md mb-3\">\r\n      <div className=\"row\">\r\n        {label}\r\n        <div className=\"col-md-11\">{control}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * General text input field.\r\n *\r\n * @param {object} props\r\n * - label {string} FormField's label\r\n * - name {string} name for input element\r\n * - required? {boolean} whether this FormField is required or not\r\n * - min? {number} minimum number of characters\r\n * - max? {number} maximum number of characters\r\n */\r\nexport function TextField(props) {\r\n  const inputId = `form-field-${props.label}-${props.parentId}`;\r\n  const minLength = props.min;\r\n  const maxLength = props.max;\r\n\r\n  const validatorAdded = useRef(false);\r\n\r\n  //to ensure validator only gets added to parent Form once\r\n  if (!validatorAdded.current) {\r\n    props.addValidator(validate);\r\n    validatorAdded.current = true;\r\n  }\r\n\r\n  /**\r\n   * Checks the validity of input\r\n   */\r\n  function validate() {\r\n    const [element, validityState] = getElementAndValidityState(inputId);\r\n\r\n    if (validityState.valueMissing)\r\n      return { message: `${props.label} is required.`, element };\r\n    if (validityState.tooShort)\r\n      return {\r\n        message: `${props.label} must be at least ${minLength} characters long.`,\r\n        element,\r\n      };\r\n    if (validityState.tooLong)\r\n      return {\r\n        message: `${props.label} must be less than or equal to ${maxLength} characters long.`,\r\n        element,\r\n      };\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <FormFieldTemplate>\r\n      <label htmlFor={inputId}>{props.label}</label>\r\n      <input\r\n        id={inputId}\r\n        name={props.name}\r\n        value={props.value || \"\"}\r\n        onChange={(e) => props.onChange(e, props.index)}\r\n        required={props.required}\r\n        minLength={minLength}\r\n        maxLength={maxLength}\r\n      />\r\n    </FormFieldTemplate>\r\n  );\r\n}\r\n\r\n/**\r\n * Input field for emails.\r\n *\r\n * @param {object} props\r\n * - label? {string} FormField's label (default label is Email)\r\n * - name {string} name for input element\r\n * - required? {boolean} whether this FormField is required or not\r\n * - min? {number} minimum number of characters\r\n * - max? {number} maximum number of characters\r\n */\r\nexport function EmailField(props) {\r\n  const labelName = props.label || \"Email\";\r\n  const inputId = `form-field-${labelName}-${props.parentId}`;\r\n  const minLength = props.min;\r\n  const maxLength = props.max || 50;\r\n\r\n  const validatorAdded = useRef(false);\r\n\r\n  //to ensure validator only gets added to parent Form once\r\n  if (!validatorAdded.current) {\r\n    props.addValidator(validate);\r\n    validatorAdded.current = true;\r\n  }\r\n\r\n  /**\r\n   * Checks the validity of input.\r\n   *\r\n   * @returns {object} if input is valid, returns null. Otherwise, returns an object\r\n   * containg information about the error\r\n   * {message: error message, element: reference to HtmlElement that contains error}\r\n   */\r\n  function validate() {\r\n    const [element, validityState] = getElementAndValidityState(inputId);\r\n\r\n    if (validityState.valueMissing)\r\n      return { message: `${labelName} is required.`, element };\r\n    if (validityState.typeMismatch)\r\n      return { message: `${labelName} must be an email.`, element };\r\n    if (validityState.tooShort)\r\n      return {\r\n        message: `${labelName} must be at least ${minLength} characters long.`,\r\n        element,\r\n      };\r\n    if (validityState.tooLong)\r\n      return {\r\n        message: `${labelName} must be less than or equal to ${maxLength} characters long.`,\r\n        element,\r\n      };\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <FormFieldTemplate>\r\n      <label htmlFor={inputId}>{labelName}</label>\r\n      <input\r\n        id={inputId}\r\n        name={props.name}\r\n        value={props.value}\r\n        type=\"email\"\r\n        onChange={(e) => props.onChange(e, props.index)}\r\n        required={props.required}\r\n        minLength={minLength}\r\n        maxLength={maxLength}\r\n      />\r\n    </FormFieldTemplate>\r\n  );\r\n}\r\n\r\n/**\r\n * Input field for passwords. Input is always required.\r\n *\r\n * @param {object} props\r\n * - label? {string} FormField's label (default label is Password)\r\n * - name {string} name for input element\r\n * - min? {number} minimum number of characters\r\n */\r\nexport function PasswordField(props) {\r\n  const labelName = props.label || \"Password\";\r\n  const inputId = `form-field-${labelName}-${props.parentId}`;\r\n  const minLength = props.min;\r\n  const maxLength = props.max || 50;\r\n\r\n  const validatorAdded = useRef(false);\r\n\r\n  //to ensure validator only gets added to parent Form once\r\n  if (!validatorAdded.current) {\r\n    props.addValidator(validate);\r\n    validatorAdded.current = true;\r\n  }\r\n\r\n  /**\r\n   * Checks the validity of input\r\n   */\r\n  function validate() {\r\n    const [element, validityState] = getElementAndValidityState(inputId);\r\n\r\n    if (validityState.valueMissing)\r\n      return { message: `${labelName} is required.`, element };\r\n    if (validityState.tooShort)\r\n      return {\r\n        message: `${labelName} must be at least ${minLength} characters long.`,\r\n        element,\r\n      };\r\n    if (validityState.tooLong)\r\n      return {\r\n        message: `${labelName} must be less than or equal to ${maxLength} characters long.`,\r\n        element,\r\n      };\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <FormFieldTemplate>\r\n      <label htmlFor={inputId}>{labelName}</label>\r\n      <input\r\n        id={inputId}\r\n        name={props.name}\r\n        value={props.value || \"\"}\r\n        type=\"password\"\r\n        onChange={(e) => props.onChange(e, props.index)}\r\n        required={true}\r\n        minLength={minLength}\r\n        maxLength={maxLength}\r\n      />\r\n    </FormFieldTemplate>\r\n  );\r\n}\r\n\r\n/**\r\n * Convenience function that returns an HtmlElement and its ValidityState\r\n * object given an id.\r\n *\r\n * @param {string} elementId id of FormField's HtmlElement to validate\r\n * @returns {array} [HtmlElement, validityState]\r\n */\r\nfunction getElementAndValidityState(elementId) {\r\n  const element = document.querySelector(`[id='${elementId}']`);\r\n  const validityState = element.validity;\r\n  return [element, validityState];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}