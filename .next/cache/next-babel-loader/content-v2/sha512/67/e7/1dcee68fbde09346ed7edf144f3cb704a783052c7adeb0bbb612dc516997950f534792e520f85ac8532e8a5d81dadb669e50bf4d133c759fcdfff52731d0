{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\adnan\\\\web-dev\\\\my-game-page\\\\pages\\\\userPage.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef } from \"react\";\nimport Game from \"../components/Game\";\nimport GameSearchBox from \"../components/GameSearchBox\";\n/**\r\n *\r\n * The page that is displayed when\r\n * viewing a user's profile\r\n *\r\n * @param {object} props\r\n */\n\nexport var __N_SSP = true;\nexport default function UserPage(props) {\n  _s();\n\n  var _this = this;\n\n  /* setting state */\n  //the user's actual favorite games\n  var _useState = useState(props.games),\n      favoriteGames = _useState[0],\n      setFavoriteGames = _useState[1]; //the user's favorite game as currently displayed. these may differ\n  //from actual favorite games during editing\n\n\n  var _useState2 = useState(favoriteGames),\n      displayedFavoriteGames = _useState2[0],\n      setDisplayedFavoriteGames = _useState2[1]; //whether or not user is editing favorite games\n\n\n  var _useState3 = useState(false),\n      isEditing = _useState3[0],\n      setIsEditing = _useState3[1];\n  /**\r\n   * Called when a Game is dragged. Adds\r\n   * the Game's data-index attribute to\r\n   * DragEvent.dataTransfer to be used by\r\n   * dropGame() later on\r\n   *\r\n   * @param {DragEvent} e\r\n   */\n\n\n  function startDragGame(e) {\n    e.stopPropagation();\n    e.dataTransfer.setData(\"text/plain\", e.target.dataset.index);\n  } //dragover handler is needed to make element\n  //draggable\n\n\n  function dragOver(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    e.dataTransfer.dropEffect = \"move\";\n  }\n  /**\r\n   * The dragged game will be swapped with the game\r\n   * it's dropped on.\r\n   *\r\n   * @param {DragEvent} e\r\n   */\n\n\n  function dropGame(e) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    var newFaveGames = _toConsumableArray(displayedFavoriteGames);\n\n    var newGame = e.dataTransfer.getData(\"application/json\"); //index of game that was dropped on\n\n    var dropTarget = Number(e.target.dataset.index); //dataTransfer will contain a js object if the game being dragged\n    //is from search results, meaning a new game is being added\n    //to favorite games\n\n    if (newGame) {\n      var newGameAsObject = JSON.parse(newGame); //we replace elements as we go, eventually we an element to newFaveGames[newFaveGames.length]\n      //this increases the length and the loop goes on forever\n      //so we keep the length of the list before we start\n\n      var length = newFaveGames.length; //game to be added in\n\n      var holder = newGameAsObject;\n\n      for (var i = 0; i <= length; i++) {\n        if (newFaveGames[i] && newFaveGames[i].id === newGameAsObject.id) return; //start swapping from dropTarget onwards\n\n        if (i >= dropTarget) {\n          //put holder into the list, take what was there and put into holder\n          var temp = newFaveGames[i];\n          newFaveGames[i] = holder;\n          holder = temp;\n        }\n      }\n    } //if there is no js object, then the game being dragged is an already\n    //existing game so we just swap places\n    else {\n        //the game that was being dragged\n        var draggedGame = Number(e.dataTransfer.getData(\"text/plain\"));\n        var _temp = newFaveGames[dropTarget];\n        newFaveGames[dropTarget] = newFaveGames[draggedGame];\n        newFaveGames[draggedGame] = _temp;\n      }\n\n    setDisplayedFavoriteGames(newFaveGames);\n  }\n  /**\r\n   * Deletes a game from displayedFavoriteGames.\r\n   *\r\n   * @param {number} gameId the id of game to be deleted\r\n   */\n\n\n  function deleteGame(gameId) {\n    setDisplayedFavoriteGames(displayedFavoriteGames.filter(function (game) {\n      return game.id !== gameId;\n    }));\n  }\n  /**\r\n   * Called when editing is cancelled. Sets displayed favorite games\r\n   * to actual favorite games.\r\n   */\n\n\n  function rollbackChanges() {\n    setDisplayedFavoriteGames(favoriteGames);\n    setIsEditing(false);\n  }\n\n  function saveChanges() {\n    return _saveChanges.apply(this, arguments);\n  } //get a list of Game components corresponding to favorite games\n  //each is given a data-index attribute that corresponds to\n  //what position in the list they are. this will be used during\n  //editing favorite games.\n\n\n  function _saveChanges() {\n    _saveChanges = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var faveGameIds, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              faveGameIds = displayedFavoriteGames.map(function (game) {\n                return game.id;\n              });\n              _context.prev = 1;\n              _context.next = 4;\n              return fetch(\"http://localhost:3000/api/favorites/\".concat(props.id), {\n                method: \"PUT\",\n                credentials: \"same-origin\",\n                body: JSON.stringify(faveGameIds),\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                }\n              });\n\n            case 4:\n              response = _context.sent;\n              setIsEditing(false);\n              setFavoriteGames(displayedFavoriteGames);\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(_context.t0);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 9]]);\n    }));\n    return _saveChanges.apply(this, arguments);\n  }\n\n  var favoriteGamesList = displayedFavoriteGames.map(function (game, index) {\n    return /*#__PURE__*/_jsxDEV(Game, {\n      gameId: game.id,\n      gameName: game.name,\n      gameCoverUrl: game.coverurl,\n      isEditing: isEditing,\n      \"data-index\": \"\" + index,\n      draggable: isEditing + \"\",\n      onDragStart: isEditing ? startDragGame : undefined,\n      onDragOver: isEditing ? dragOver : undefined,\n      onDrop: isEditing ? dropGame : undefined,\n      onDelete: deleteGame\n    }, game.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 5\n    }, _this);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: props.displayName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"favorite-games-list\",\n        children: favoriteGamesList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), props.id && (!isEditing ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: function onClick() {\n          return setIsEditing(true);\n        },\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: rollbackChanges,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: saveChanges,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), isEditing && /*#__PURE__*/_jsxDEV(GameSearchBox, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true);\n}\n\n_s(UserPage, \"vlOo9sr0fToQo7T+homRCMhCx8U=\");\n\n_c = UserPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserPage\");","map":{"version":3,"sources":["C:/Users/adnan/web-dev/my-game-page/pages/userPage.js"],"names":["useState","useRef","Game","GameSearchBox","UserPage","props","games","favoriteGames","setFavoriteGames","displayedFavoriteGames","setDisplayedFavoriteGames","isEditing","setIsEditing","startDragGame","e","stopPropagation","dataTransfer","setData","target","dataset","index","dragOver","preventDefault","dropEffect","dropGame","newFaveGames","newGame","getData","dropTarget","Number","newGameAsObject","JSON","parse","length","holder","i","id","temp","draggedGame","deleteGame","gameId","filter","game","rollbackChanges","saveChanges","faveGameIds","map","fetch","method","credentials","body","stringify","headers","response","console","log","favoriteGamesList","name","coverurl","undefined","displayName"],"mappings":"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","sourcesContent":["import { useState, useRef } from \"react\";\r\nimport Game from \"../components/Game\";\r\nimport GameSearchBox from \"../components/GameSearchBox\";\r\n\r\n/**\r\n *\r\n * The page that is displayed when\r\n * viewing a user's profile\r\n *\r\n * @param {object} props\r\n */\r\n\r\nexport default function UserPage(props) {\r\n  /* setting state */\r\n  //the user's actual favorite games\r\n  const [favoriteGames, setFavoriteGames] = useState(props.games);\r\n  //the user's favorite game as currently displayed. these may differ\r\n  //from actual favorite games during editing\r\n  const [displayedFavoriteGames, setDisplayedFavoriteGames] = useState(\r\n    favoriteGames\r\n  );\r\n  //whether or not user is editing favorite games\r\n  const [isEditing, setIsEditing] = useState(false);\r\n\r\n  /**\r\n   * Called when a Game is dragged. Adds\r\n   * the Game's data-index attribute to\r\n   * DragEvent.dataTransfer to be used by\r\n   * dropGame() later on\r\n   *\r\n   * @param {DragEvent} e\r\n   */\r\n  function startDragGame(e) {\r\n    e.stopPropagation();\r\n    e.dataTransfer.setData(\"text/plain\", e.target.dataset.index);\r\n  }\r\n\r\n  //dragover handler is needed to make element\r\n  //draggable\r\n  function dragOver(e) {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    e.dataTransfer.dropEffect = \"move\";\r\n  }\r\n\r\n  /**\r\n   * The dragged game will be swapped with the game\r\n   * it's dropped on.\r\n   *\r\n   * @param {DragEvent} e\r\n   */\r\n  function dropGame(e) {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    const newFaveGames = [...displayedFavoriteGames];\r\n    const newGame = e.dataTransfer.getData(\"application/json\");\r\n    //index of game that was dropped on\r\n    const dropTarget = Number(e.target.dataset.index);\r\n    //dataTransfer will contain a js object if the game being dragged\r\n    //is from search results, meaning a new game is being added\r\n    //to favorite games\r\n    if (newGame) {\r\n      const newGameAsObject = JSON.parse(newGame);\r\n      //we replace elements as we go, eventually we an element to newFaveGames[newFaveGames.length]\r\n      //this increases the length and the loop goes on forever\r\n      //so we keep the length of the list before we start\r\n      const length = newFaveGames.length;\r\n      //game to be added in\r\n      let holder = newGameAsObject;\r\n      for (let i = 0; i <= length; i++) {\r\n        if (newFaveGames[i] && newFaveGames[i].id === newGameAsObject.id)\r\n          return;\r\n        //start swapping from dropTarget onwards\r\n        if (i >= dropTarget) {\r\n          //put holder into the list, take what was there and put into holder\r\n          const temp = newFaveGames[i];\r\n          newFaveGames[i] = holder;\r\n          holder = temp;\r\n        }\r\n      }\r\n    }\r\n    //if there is no js object, then the game being dragged is an already\r\n    //existing game so we just swap places\r\n    else {\r\n      //the game that was being dragged\r\n      const draggedGame = Number(e.dataTransfer.getData(\"text/plain\"));\r\n      const temp = newFaveGames[dropTarget];\r\n      newFaveGames[dropTarget] = newFaveGames[draggedGame];\r\n      newFaveGames[draggedGame] = temp;\r\n    }\r\n\r\n    setDisplayedFavoriteGames(newFaveGames);\r\n  }\r\n\r\n  /**\r\n   * Deletes a game from displayedFavoriteGames.\r\n   *\r\n   * @param {number} gameId the id of game to be deleted\r\n   */\r\n  function deleteGame(gameId) {\r\n    setDisplayedFavoriteGames(\r\n      displayedFavoriteGames.filter((game) => game.id !== gameId)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Called when editing is cancelled. Sets displayed favorite games\r\n   * to actual favorite games.\r\n   */\r\n  function rollbackChanges() {\r\n    setDisplayedFavoriteGames(favoriteGames);\r\n    setIsEditing(false);\r\n  }\r\n\r\n  async function saveChanges() {\r\n    const faveGameIds = displayedFavoriteGames.map((game) => game.id);\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:3000/api/favorites/${props.id}`,\r\n        {\r\n          method: \"PUT\",\r\n          credentials: \"same-origin\",\r\n          body: JSON.stringify(faveGameIds),\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n        }\r\n      );\r\n      setIsEditing(false);\r\n      setFavoriteGames(displayedFavoriteGames);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  //get a list of Game components corresponding to favorite games\r\n  //each is given a data-index attribute that corresponds to\r\n  //what position in the list they are. this will be used during\r\n  //editing favorite games.\r\n  const favoriteGamesList = displayedFavoriteGames.map((game, index) => (\r\n    <Game\r\n      key={game.id}\r\n      gameId={game.id}\r\n      gameName={game.name}\r\n      gameCoverUrl={game.coverurl}\r\n      isEditing={isEditing}\r\n      data-index={\"\" + index}\r\n      draggable={isEditing + \"\"}\r\n      onDragStart={isEditing ? startDragGame : undefined}\r\n      onDragOver={isEditing ? dragOver : undefined}\r\n      onDrop={isEditing ? dropGame : undefined}\r\n      onDelete={deleteGame}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      <h1>{props.displayName}</h1>\r\n      <div>\r\n        <div className=\"favorite-games-list\">{favoriteGamesList}</div>\r\n        {props.id &&\r\n          (!isEditing ? (\r\n            <button onClick={() => setIsEditing(true)}>Edit</button>\r\n          ) : (\r\n            <>\r\n              <button onClick={rollbackChanges}>Cancel</button>\r\n              <button onClick={saveChanges}>Save</button>\r\n            </>\r\n          ))}\r\n      </div>\r\n      {isEditing && <GameSearchBox />}\r\n    </>\r\n  );\r\n}\r\n\r\nexport function getServerSideProps(context) {\r\n  return {\r\n    props: JSON.parse(JSON.stringify(context.res.locals)),\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}