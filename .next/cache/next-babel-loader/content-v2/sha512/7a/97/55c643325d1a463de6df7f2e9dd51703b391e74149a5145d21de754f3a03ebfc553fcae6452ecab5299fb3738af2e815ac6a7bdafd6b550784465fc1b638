{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\adnan\\\\web-dev\\\\my-game-page\\\\components\\\\Form.js\";\nimport React, { useState, useRef } from \"react\";\nimport { nanoid } from \"nanoid\";\nexport default function Form(props) {\n  //array of values for all children (FormFields)\n  //initializes state to be equal to the initial value given by\n  //parent component\n  const {\n    0: fieldValues,\n    1: setFieldValues\n  } = useState(React.Children.map(props.children, child => child.props.value));\n  const fieldValidators = useRef([]); //takes control of childrens state and passes own props\n\n  const children = React.Children.map(props.children, (child, index) => /*#__PURE__*/React.cloneElement(child, {\n    value: fieldValues[index],\n    addValidator: validator => fieldValidators.current.push(validator),\n    onChange: handleChange,\n    uniqueId: nanoid(),\n    index\n  }));\n  /**\r\n   * Handles value changes for all of a Form's FormFields.\r\n   *\r\n   * @param {Event} e\r\n   * @param {Number} index FormField's index prop\r\n   */\n\n  function handleChange(e, index) {\n    //the index prop of each FormField and fieldValues are parallel\n    //so if a FormField passes it's props.index, we can set\n    //the correct state\n    const newFieldValues = fieldValues.map((value, i) => i === index ? e.target.value : value);\n    setFieldValues(newFieldValues);\n  }\n\n  function validateAllFields(e) {\n    console.log(\"validate\");\n\n    for (const validator of fieldValidators.current) {\n      const errorInfo = validator();\n      if (errorInfo) return props.onSubmit(e, errorInfo);\n    }\n\n    props.onSubmit(e, null);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: validateAllFields,\n    noValidate: true,\n    children: [children, /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n/*\r\n\r\nform is responsible for\r\n-validating all its children\r\n-sending response of validation to parent\r\n-keeping state of children\r\n*/\n\n/*\r\nFormField\r\n should be used as children to a Form\r\n    -value= starting value, after that, form takes over\r\n\r\n\r\n*/","map":{"version":3,"sources":["C:/Users/adnan/web-dev/my-game-page/components/Form.js"],"names":["React","useState","useRef","nanoid","Form","props","fieldValues","setFieldValues","Children","map","children","child","value","fieldValidators","index","cloneElement","addValidator","validator","current","push","onChange","handleChange","uniqueId","e","newFieldValues","i","target","validateAllFields","console","log","errorInfo","onSubmit"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,SAASC,MAAT,QAAuB,QAAvB;AAEA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAClC;AACA;AACA;AACA,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCN,QAAQ,CAC5CD,KAAK,CAACQ,QAAN,CAAeC,GAAf,CAAmBJ,KAAK,CAACK,QAAzB,EAAoCC,KAAD,IAAWA,KAAK,CAACN,KAAN,CAAYO,KAA1D,CAD4C,CAA9C;AAIA,QAAMC,eAAe,GAAGX,MAAM,CAAC,EAAD,CAA9B,CARkC,CAUlC;;AACA,QAAMQ,QAAQ,GAAGV,KAAK,CAACQ,QAAN,CAAeC,GAAf,CAAmBJ,KAAK,CAACK,QAAzB,EAAmC,CAACC,KAAD,EAAQG,KAAR,kBAClDd,KAAK,CAACe,YAAN,CAAmBJ,KAAnB,EAA0B;AACxBC,IAAAA,KAAK,EAAEN,WAAW,CAACQ,KAAD,CADM;AAExBE,IAAAA,YAAY,EAAGC,SAAD,IAAeJ,eAAe,CAACK,OAAhB,CAAwBC,IAAxB,CAA6BF,SAA7B,CAFL;AAGxBG,IAAAA,QAAQ,EAAEC,YAHc;AAIxBC,IAAAA,QAAQ,EAAEnB,MAAM,EAJQ;AAKxBW,IAAAA;AALwB,GAA1B,CADe,CAAjB;AAUA;AACF;AACA;AACA;AACA;AACA;;AACE,WAASO,YAAT,CAAsBE,CAAtB,EAAyBT,KAAzB,EAAgC;AAC9B;AACA;AACA;AACA,UAAMU,cAAc,GAAGlB,WAAW,CAACG,GAAZ,CAAgB,CAACG,KAAD,EAAQa,CAAR,KACrCA,CAAC,KAAKX,KAAN,GAAcS,CAAC,CAACG,MAAF,CAASd,KAAvB,GAA+BA,KADV,CAAvB;AAGAL,IAAAA,cAAc,CAACiB,cAAD,CAAd;AACD;;AAED,WAASG,iBAAT,CAA2BJ,CAA3B,EAA8B;AAC5BK,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;;AACA,SAAK,MAAMZ,SAAX,IAAwBJ,eAAe,CAACK,OAAxC,EAAiD;AAC/C,YAAMY,SAAS,GAAGb,SAAS,EAA3B;AACA,UAAIa,SAAJ,EAAe,OAAOzB,KAAK,CAAC0B,QAAN,CAAeR,CAAf,EAAkBO,SAAlB,CAAP;AAChB;;AACDzB,IAAAA,KAAK,CAAC0B,QAAN,CAAeR,CAAf,EAAkB,IAAlB;AACD;;AACD,sBACE;AAAM,IAAA,QAAQ,EAAEI,iBAAhB;AAAmC,IAAA,UAAU,EAAE,IAA/C;AAAA,eACGjB,QADH,eAEE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nexport default function Form(props) {\r\n  //array of values for all children (FormFields)\r\n  //initializes state to be equal to the initial value given by\r\n  //parent component\r\n  const [fieldValues, setFieldValues] = useState(\r\n    React.Children.map(props.children, (child) => child.props.value)\r\n  );\r\n\r\n  const fieldValidators = useRef([]);\r\n\r\n  //takes control of childrens state and passes own props\r\n  const children = React.Children.map(props.children, (child, index) =>\r\n    React.cloneElement(child, {\r\n      value: fieldValues[index],\r\n      addValidator: (validator) => fieldValidators.current.push(validator),\r\n      onChange: handleChange,\r\n      uniqueId: nanoid(),\r\n      index,\r\n    })\r\n  );\r\n\r\n  /**\r\n   * Handles value changes for all of a Form's FormFields.\r\n   *\r\n   * @param {Event} e\r\n   * @param {Number} index FormField's index prop\r\n   */\r\n  function handleChange(e, index) {\r\n    //the index prop of each FormField and fieldValues are parallel\r\n    //so if a FormField passes it's props.index, we can set\r\n    //the correct state\r\n    const newFieldValues = fieldValues.map((value, i) =>\r\n      i === index ? e.target.value : value\r\n    );\r\n    setFieldValues(newFieldValues);\r\n  }\r\n\r\n  function validateAllFields(e) {\r\n    console.log(\"validate\");\r\n    for (const validator of fieldValidators.current) {\r\n      const errorInfo = validator();\r\n      if (errorInfo) return props.onSubmit(e, errorInfo);\r\n    }\r\n    props.onSubmit(e, null);\r\n  }\r\n  return (\r\n    <form onSubmit={validateAllFields} noValidate={true}>\r\n      {children}\r\n      <button type=\"submit\">Submit</button>\r\n    </form>\r\n  );\r\n}\r\n\r\n/*\r\n\r\nform is responsible for\r\n-validating all its children\r\n-sending response of validation to parent\r\n-keeping state of children\r\n*/\r\n\r\n/*\r\nFormField\r\n should be used as children to a Form\r\n    -value= starting value, after that, form takes over\r\n\r\n\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}