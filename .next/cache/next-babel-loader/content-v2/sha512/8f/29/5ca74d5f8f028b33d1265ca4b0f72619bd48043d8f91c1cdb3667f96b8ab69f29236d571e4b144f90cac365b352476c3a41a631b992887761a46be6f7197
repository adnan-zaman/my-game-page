{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\adnan\\\\web-dev\\\\azure-test\\\\components\\\\FormFields.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\n/**\r\n * FormFields are meant to be used with the Form component.\r\n * They are a combination of a label and a corresponding input element of some kind.\r\n * They make up the fields of a Form component. Each FormField has its own\r\n * validator function that checks the validity of its input. FormField validators\r\n * are called by its parent Form. FormFields should be the children of a Form\r\n * component and should be initialied with an initial value prop. After first render,\r\n * the Form component will take control of the FormField's value state.\r\n *\r\n */\n\n/**\r\n * Common layout template that FormFields use\r\n * @param {object} props expected props:\r\n * - FormField's label should be first child\r\n * - FormField's control should be second child\r\n *\r\n */\n\nfunction FormFieldTemplate(props) {\n  const children = React.Children.toArray(props.children); //preserve existing css classes + add bootstrap classes\n\n  const label = /*#__PURE__*/React.cloneElement(children[0], {\n    className: (children[0].className || \"\") + \" col-form-label col-md-1\"\n  });\n  const control = /*#__PURE__*/React.cloneElement(children[1], {\n    className: (children[1].className || \"\") + \" form-control\"\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-md mb-3\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [label, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-11\",\n        children: control\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n/**\r\n * General text input field.\r\n *\r\n * @param {object} props\r\n * - label {string} FormField's label\r\n * - name {string} name for input element\r\n * - required? {boolean} whether this FormField is required or not\r\n * - min? {number} minimum number of characters\r\n * - max? {number} maximum number of characters\r\n */\n\n\nexport function TextField(props) {\n  const inputId = `form-field-${props.label}-${props.parentId}`;\n  const minLength = props.min;\n  const maxLength = props.max;\n  const validatorAdded = useRef(false); //to ensure validator only gets added to parent Form once\n\n  if (!validatorAdded.current) {\n    props.addValidator(validate);\n    validatorAdded.current = true;\n  }\n  /**\r\n   * Checks the validity of input\r\n   */\n\n\n  function validate() {\n    const [element, validityState] = getElementAndValidityState(inputId);\n    if (validityState.valueMissing) return {\n      message: `${props.label} is required.`,\n      element\n    };\n    if (validityState.tooShort) return {\n      message: `${props.label} must be at least ${minLength} characters long.`,\n      element\n    };\n    if (validityState.tooLong) return {\n      message: `${props.label} must be less than or equal to ${maxLength} characters long.`,\n      element\n    };\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(FormFieldTemplate, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: inputId,\n      children: props.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: inputId,\n      name: props.name,\n      value: props.value || \"\",\n      onChange: e => props.onChange(e, props.index),\n      required: props.required,\n      minLength: minLength,\n      maxLength: maxLength\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n/**\r\n * Input field for emails.\r\n *\r\n * @param {object} props\r\n * - label? {string} FormField's label (default label is Email)\r\n * - name {string} name for input element\r\n * - required? {boolean} whether this FormField is required or not\r\n * - min? {number} minimum number of characters\r\n * - max? {number} maximum number of characters\r\n */\n\nexport function EmailField(props) {\n  const labelName = props.label || \"Email\";\n  const inputId = `form-field-${labelName}-${props.parentId}`;\n  const minLength = props.min;\n  const maxLength = props.max || 50;\n  const validatorAdded = useRef(false); //to ensure validator only gets added to parent Form once\n\n  if (!validatorAdded.current) {\n    props.addValidator(validate);\n    validatorAdded.current = true;\n  }\n  /**\r\n   * Checks the validity of input.\r\n   *\r\n   * @returns {object} if input is valid, returns null. Otherwise, returns an object\r\n   * containg information about the error\r\n   * {message: error message, element: reference to HtmlElement that contains error}\r\n   */\n\n\n  function validate() {\n    const [element, validityState] = getElementAndValidityState(inputId);\n    if (validityState.valueMissing) return {\n      message: `${labelName} is required.`,\n      element\n    };\n    if (validityState.typeMismatch) return {\n      message: `${labelName} must be an email.`,\n      element\n    };\n    if (validityState.tooShort) return {\n      message: `${labelName} must be at least ${minLength} characters long.`,\n      element\n    };\n    if (validityState.tooLong) return {\n      message: `${labelName} must be less than or equal to ${maxLength} characters long.`,\n      element\n    };\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(FormFieldTemplate, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: inputId,\n      children: labelName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: inputId,\n      name: props.name,\n      value: props.value,\n      type: \"email\",\n      onChange: e => props.onChange(e, props.index),\n      required: props.required,\n      minLength: minLength,\n      maxLength: maxLength\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n}\n/**\r\n * Input field for passwords. Input is always required.\r\n *\r\n * @param {object} props\r\n * - label? {string} FormField's label (default label is Password)\r\n * - name {string} name for input element\r\n * - min? {number} minimum number of characters\r\n */\n\nexport function PasswordField(props) {\n  const labelName = props.label || \"Password\";\n  const inputId = `form-field-${labelName}-${props.parentId}`;\n  const minLength = props.min;\n  const maxLength = props.max || 50;\n  const validatorAdded = useRef(false); //to ensure validator only gets added to parent Form once\n\n  if (!validatorAdded.current) {\n    props.addValidator(validate);\n    validatorAdded.current = true;\n  }\n  /**\r\n   * Checks the validity of input\r\n   */\n\n\n  function validate() {\n    const [element, validityState] = getElementAndValidityState(inputId);\n    if (validityState.valueMissing) return {\n      message: `${labelName} is required.`,\n      element\n    };\n    if (validityState.tooShort) return {\n      message: `${labelName} must be at least ${minLength} characters long.`,\n      element\n    };\n    if (validityState.tooLong) return {\n      message: `${labelName} must be less than or equal to ${maxLength} characters long.`,\n      element\n    };\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(FormFieldTemplate, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: inputId,\n      children: labelName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: inputId,\n      name: props.name,\n      value: props.value || \"\",\n      type: \"password\",\n      onChange: e => props.onChange(e, props.index),\n      required: true,\n      minLength: minLength,\n      maxLength: maxLength\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 5\n  }, this);\n}\n/**\r\n * Convenience function that returns an HtmlElement and its ValidityState\r\n * object given an id.\r\n *\r\n * @param {string} elementId id of FormField's HtmlElement to validate\r\n * @returns {array} [HtmlElement, validityState]\r\n */\n\nfunction getElementAndValidityState(elementId) {\n  const element = document.querySelector(`[id='${elementId}']`);\n  const validityState = element.validity;\n  return [element, validityState];\n}","map":{"version":3,"sources":["C:/Users/adnan/web-dev/azure-test/components/FormFields.js"],"names":["React","useState","useRef","useEffect","FormFieldTemplate","props","children","Children","toArray","label","cloneElement","className","control","TextField","inputId","parentId","minLength","min","maxLength","max","validatorAdded","current","addValidator","validate","element","validityState","getElementAndValidityState","valueMissing","message","tooShort","tooLong","name","value","e","onChange","index","required","EmailField","labelName","typeMismatch","PasswordField","elementId","document","querySelector","validity"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\n\r\n/**\r\n * FormFields are meant to be used with the Form component.\r\n * They are a combination of a label and a corresponding input element of some kind.\r\n * They make up the fields of a Form component. Each FormField has its own\r\n * validator function that checks the validity of its input. FormField validators\r\n * are called by its parent Form. FormFields should be the children of a Form\r\n * component and should be initialied with an initial value prop. After first render,\r\n * the Form component will take control of the FormField's value state.\r\n *\r\n */\r\n\r\n/**\r\n * Common layout template that FormFields use\r\n * @param {object} props expected props:\r\n * - FormField's label should be first child\r\n * - FormField's control should be second child\r\n *\r\n */\r\nfunction FormFieldTemplate(props) {\r\n  const children = React.Children.toArray(props.children);\r\n  //preserve existing css classes + add bootstrap classes\r\n  const label = React.cloneElement(children[0], {\r\n    className: (children[0].className || \"\") + \" col-form-label col-md-1\",\r\n  });\r\n  const control = React.cloneElement(children[1], {\r\n    className: (children[1].className || \"\") + \" form-control\",\r\n  });\r\n\r\n  return (\r\n    <div className=\"container-md mb-3\">\r\n      <div className=\"row\">\r\n        {label}\r\n        <div className=\"col-md-11\">{control}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * General text input field.\r\n *\r\n * @param {object} props\r\n * - label {string} FormField's label\r\n * - name {string} name for input element\r\n * - required? {boolean} whether this FormField is required or not\r\n * - min? {number} minimum number of characters\r\n * - max? {number} maximum number of characters\r\n */\r\nexport function TextField(props) {\r\n  const inputId = `form-field-${props.label}-${props.parentId}`;\r\n  const minLength = props.min;\r\n  const maxLength = props.max;\r\n\r\n  const validatorAdded = useRef(false);\r\n\r\n  //to ensure validator only gets added to parent Form once\r\n  if (!validatorAdded.current) {\r\n    props.addValidator(validate);\r\n    validatorAdded.current = true;\r\n  }\r\n\r\n  /**\r\n   * Checks the validity of input\r\n   */\r\n  function validate() {\r\n    const [element, validityState] = getElementAndValidityState(inputId);\r\n\r\n    if (validityState.valueMissing)\r\n      return { message: `${props.label} is required.`, element };\r\n    if (validityState.tooShort)\r\n      return {\r\n        message: `${props.label} must be at least ${minLength} characters long.`,\r\n        element,\r\n      };\r\n    if (validityState.tooLong)\r\n      return {\r\n        message: `${props.label} must be less than or equal to ${maxLength} characters long.`,\r\n        element,\r\n      };\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <FormFieldTemplate>\r\n      <label htmlFor={inputId}>{props.label}</label>\r\n      <input\r\n        id={inputId}\r\n        name={props.name}\r\n        value={props.value || \"\"}\r\n        onChange={(e) => props.onChange(e, props.index)}\r\n        required={props.required}\r\n        minLength={minLength}\r\n        maxLength={maxLength}\r\n      />\r\n    </FormFieldTemplate>\r\n  );\r\n}\r\n\r\n/**\r\n * Input field for emails.\r\n *\r\n * @param {object} props\r\n * - label? {string} FormField's label (default label is Email)\r\n * - name {string} name for input element\r\n * - required? {boolean} whether this FormField is required or not\r\n * - min? {number} minimum number of characters\r\n * - max? {number} maximum number of characters\r\n */\r\nexport function EmailField(props) {\r\n  const labelName = props.label || \"Email\";\r\n  const inputId = `form-field-${labelName}-${props.parentId}`;\r\n  const minLength = props.min;\r\n  const maxLength = props.max || 50;\r\n\r\n  const validatorAdded = useRef(false);\r\n\r\n  //to ensure validator only gets added to parent Form once\r\n  if (!validatorAdded.current) {\r\n    props.addValidator(validate);\r\n    validatorAdded.current = true;\r\n  }\r\n\r\n  /**\r\n   * Checks the validity of input.\r\n   *\r\n   * @returns {object} if input is valid, returns null. Otherwise, returns an object\r\n   * containg information about the error\r\n   * {message: error message, element: reference to HtmlElement that contains error}\r\n   */\r\n  function validate() {\r\n    const [element, validityState] = getElementAndValidityState(inputId);\r\n\r\n    if (validityState.valueMissing)\r\n      return { message: `${labelName} is required.`, element };\r\n    if (validityState.typeMismatch)\r\n      return { message: `${labelName} must be an email.`, element };\r\n    if (validityState.tooShort)\r\n      return {\r\n        message: `${labelName} must be at least ${minLength} characters long.`,\r\n        element,\r\n      };\r\n    if (validityState.tooLong)\r\n      return {\r\n        message: `${labelName} must be less than or equal to ${maxLength} characters long.`,\r\n        element,\r\n      };\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <FormFieldTemplate>\r\n      <label htmlFor={inputId}>{labelName}</label>\r\n      <input\r\n        id={inputId}\r\n        name={props.name}\r\n        value={props.value}\r\n        type=\"email\"\r\n        onChange={(e) => props.onChange(e, props.index)}\r\n        required={props.required}\r\n        minLength={minLength}\r\n        maxLength={maxLength}\r\n      />\r\n    </FormFieldTemplate>\r\n  );\r\n}\r\n\r\n/**\r\n * Input field for passwords. Input is always required.\r\n *\r\n * @param {object} props\r\n * - label? {string} FormField's label (default label is Password)\r\n * - name {string} name for input element\r\n * - min? {number} minimum number of characters\r\n */\r\nexport function PasswordField(props) {\r\n  const labelName = props.label || \"Password\";\r\n  const inputId = `form-field-${labelName}-${props.parentId}`;\r\n  const minLength = props.min;\r\n  const maxLength = props.max || 50;\r\n\r\n  const validatorAdded = useRef(false);\r\n\r\n  //to ensure validator only gets added to parent Form once\r\n  if (!validatorAdded.current) {\r\n    props.addValidator(validate);\r\n    validatorAdded.current = true;\r\n  }\r\n\r\n  /**\r\n   * Checks the validity of input\r\n   */\r\n  function validate() {\r\n    const [element, validityState] = getElementAndValidityState(inputId);\r\n\r\n    if (validityState.valueMissing)\r\n      return { message: `${labelName} is required.`, element };\r\n    if (validityState.tooShort)\r\n      return {\r\n        message: `${labelName} must be at least ${minLength} characters long.`,\r\n        element,\r\n      };\r\n    if (validityState.tooLong)\r\n      return {\r\n        message: `${labelName} must be less than or equal to ${maxLength} characters long.`,\r\n        element,\r\n      };\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <FormFieldTemplate>\r\n      <label htmlFor={inputId}>{labelName}</label>\r\n      <input\r\n        id={inputId}\r\n        name={props.name}\r\n        value={props.value || \"\"}\r\n        type=\"password\"\r\n        onChange={(e) => props.onChange(e, props.index)}\r\n        required={true}\r\n        minLength={minLength}\r\n        maxLength={maxLength}\r\n      />\r\n    </FormFieldTemplate>\r\n  );\r\n}\r\n\r\n/**\r\n * Convenience function that returns an HtmlElement and its ValidityState\r\n * object given an id.\r\n *\r\n * @param {string} elementId id of FormField's HtmlElement to validate\r\n * @returns {array} [HtmlElement, validityState]\r\n */\r\nfunction getElementAndValidityState(elementId) {\r\n  const element = document.querySelector(`[id='${elementId}']`);\r\n  const validityState = element.validity;\r\n  return [element, validityState];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}