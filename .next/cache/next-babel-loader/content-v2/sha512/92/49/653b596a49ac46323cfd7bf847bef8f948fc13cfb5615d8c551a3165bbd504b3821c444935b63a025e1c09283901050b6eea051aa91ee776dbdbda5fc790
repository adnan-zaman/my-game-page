{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\adnan\\\\web-dev\\\\my-game-page\\\\pages\\\\userPage.js\";\nimport { useState, useRef } from \"react\";\nimport Game from \"../components/Game\";\n/**\r\n *\r\n * The page that is displayed when\r\n * viewing a user's profile\r\n *\r\n * @param {object} props\r\n */\n\nexport default function UserPage(props) {\n  /* setting state */\n  //the user's actual favorite games\n  const {\n    0: favoriteGames,\n    1: setFavoriteGames\n  } = useState(props.games); //the user's favorite game as currently displayed (as in, while making changes. this\n  //list will differ from favoriteGames)\n\n  const {\n    0: currFavoriteGames,\n    1: setCurrFavoriteGames\n  } = useState(favoriteGames); //whether or not user is editing favorite games\n\n  const {\n    0: isEditing,\n    1: setIsEditing\n  } = useState(false);\n\n  function startDragGame(e) {\n    e.stopPropagation();\n    e.dataTransfer.setData(\"text/plain\", e.target.dataset.index);\n  }\n\n  function dragOver(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    e.dataTransfer.dropEffect = \"move\";\n  }\n  /**\r\n   * The dragged game will be swapped with the game\r\n   * it's dropped on.\r\n   *\r\n   * @param {DragEvent} e\r\n   */\n\n\n  function dropGame(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const newFaveGames = [...currFavoriteGames];\n    const i = Number(e.target.dataset.index);\n    const j = Number(e.dataTransfer.getData(\"text/plain\"));\n    const temp = newFaveGames[i];\n    newFaveGames[i] = newFaveGames[j];\n    newFaveGames[j] = temp;\n    setCurrFavoriteGames(newFaveGames);\n  }\n\n  function deleteGame(gameId) {\n    setCurrFavoriteGames(currFavoriteGames.filter(game => game.id !== gameId));\n  }\n\n  function rollbackChanges() {\n    setCurrFavoriteGames(favoriteGames);\n  } //get a list of Game components corresponding to favorite games\n  //each is given a data-index attribute that corresponds to\n  //what position in the list they are. this will be used during\n  //editing favorite games.\n\n\n  const favoriteGamesList = currFavoriteGames.map((game, index) => /*#__PURE__*/_jsxDEV(Game, {\n    gameId: game.id,\n    gameName: game.name,\n    gameCoverUrl: game.coverurl,\n    isEditing: isEditing,\n    \"data-index\": \"\" + index,\n    draggable: isEditing + \"\",\n    onDragStart: isEditing ? startDragGame : undefined,\n    onDragOver: isEditing ? dragOver : undefined,\n    onDrop: isEditing ? dropGame : undefined,\n    onDelete: deleteGame\n  }, game.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: props.displayName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"favorite-games-list\",\n      children: favoriteGamesList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), props.id && (!isEditing ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setIsEditing(true),\n      children: \"Edit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }, this) : isEditing && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: rollbackChanges,\n      children: \"Cancel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 24\n    }, this))]\n  }, void 0, true);\n}\nexport function getServerSideProps(context) {\n  return {\n    props: JSON.parse(JSON.stringify(context.res.locals))\n  };\n}","map":{"version":3,"sources":["C:/Users/adnan/web-dev/my-game-page/pages/userPage.js"],"names":["useState","useRef","Game","UserPage","props","favoriteGames","setFavoriteGames","games","currFavoriteGames","setCurrFavoriteGames","isEditing","setIsEditing","startDragGame","e","stopPropagation","dataTransfer","setData","target","dataset","index","dragOver","preventDefault","dropEffect","dropGame","newFaveGames","i","Number","j","getData","temp","deleteGame","gameId","filter","game","id","rollbackChanges","favoriteGamesList","map","name","coverurl","undefined","displayName","getServerSideProps","context","JSON","parse","stringify","res","locals"],"mappings":"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","sourcesContent":["import { useState, useRef } from \"react\";\r\nimport Game from \"../components/Game\";\r\n\r\n/**\r\n *\r\n * The page that is displayed when\r\n * viewing a user's profile\r\n *\r\n * @param {object} props\r\n */\r\n\r\nexport default function UserPage(props) {\r\n  /* setting state */\r\n  //the user's actual favorite games\r\n  const [favoriteGames, setFavoriteGames] = useState(props.games);\r\n  //the user's favorite game as currently displayed (as in, while making changes. this\r\n  //list will differ from favoriteGames)\r\n  const [currFavoriteGames, setCurrFavoriteGames] = useState(favoriteGames);\r\n  //whether or not user is editing favorite games\r\n  const [isEditing, setIsEditing] = useState(false);\r\n\r\n  function startDragGame(e) {\r\n    e.stopPropagation();\r\n    e.dataTransfer.setData(\"text/plain\", e.target.dataset.index);\r\n  }\r\n\r\n  function dragOver(e) {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    e.dataTransfer.dropEffect = \"move\";\r\n  }\r\n\r\n  /**\r\n   * The dragged game will be swapped with the game\r\n   * it's dropped on.\r\n   *\r\n   * @param {DragEvent} e\r\n   */\r\n  function dropGame(e) {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    const newFaveGames = [...currFavoriteGames];\r\n    const i = Number(e.target.dataset.index);\r\n    const j = Number(e.dataTransfer.getData(\"text/plain\"));\r\n    const temp = newFaveGames[i];\r\n    newFaveGames[i] = newFaveGames[j];\r\n    newFaveGames[j] = temp;\r\n    setCurrFavoriteGames(newFaveGames);\r\n  }\r\n\r\n  function deleteGame(gameId) {\r\n    setCurrFavoriteGames(\r\n      currFavoriteGames.filter((game) => game.id !== gameId)\r\n    );\r\n  }\r\n\r\n  function rollbackChanges() {\r\n    setCurrFavoriteGames(favoriteGames);\r\n  }\r\n\r\n  //get a list of Game components corresponding to favorite games\r\n  //each is given a data-index attribute that corresponds to\r\n  //what position in the list they are. this will be used during\r\n  //editing favorite games.\r\n  const favoriteGamesList = currFavoriteGames.map((game, index) => (\r\n    <Game\r\n      key={game.id}\r\n      gameId={game.id}\r\n      gameName={game.name}\r\n      gameCoverUrl={game.coverurl}\r\n      isEditing={isEditing}\r\n      data-index={\"\" + index}\r\n      draggable={isEditing + \"\"}\r\n      onDragStart={isEditing ? startDragGame : undefined}\r\n      onDragOver={isEditing ? dragOver : undefined}\r\n      onDrop={isEditing ? dropGame : undefined}\r\n      onDelete={deleteGame}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      <h1>{props.displayName}</h1>\r\n      <div className=\"favorite-games-list\">{favoriteGamesList}</div>\r\n      {props.id &&\r\n        (!isEditing ? (\r\n          <button onClick={() => setIsEditing(true)}>Edit</button>\r\n        ) : (\r\n          isEditing && <button onClick={rollbackChanges}>Cancel</button>\r\n        ))}\r\n      {}\r\n    </>\r\n  );\r\n}\r\n\r\nexport function getServerSideProps(context) {\r\n  return {\r\n    props: JSON.parse(JSON.stringify(context.res.locals)),\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}