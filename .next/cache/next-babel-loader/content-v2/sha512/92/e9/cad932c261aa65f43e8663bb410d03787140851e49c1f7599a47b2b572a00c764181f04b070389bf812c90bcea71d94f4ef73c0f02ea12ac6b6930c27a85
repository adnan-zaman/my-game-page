{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\adnan\\\\web-dev\\\\my-game-page\\\\components\\\\Form.js\";\nimport React, { useState } from \"react\";\nexport default function Form(props) {\n  const {\n    0: fieldValues,\n    1: setFieldValues\n  } = useState(React.Children.map(props.children, child => child.props.value));\n  const children = React.Children.map(props.children, (child, index) => /*#__PURE__*/React.cloneElement(child, {\n    value: fieldValues[index],\n    onChange: handleChange,\n    index\n  }));\n\n  function handleChange(e, index) {\n    const newFieldValues = fieldValues.map((value, i) => i === index ? e.target.value : value);\n    setFieldValues(newFieldValues);\n  }\n\n  function handleSubmit(e) {}\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 10\n  }, this);\n}\n/*\r\n\r\nform is responsible for\r\n-validating all its children\r\n-sending response of validation to parent\r\n-keeping state of children\r\n*/\n\n/*\r\nFormField\r\n should be used as children to a Form\r\n    -value= starting value, after that, form takes over\r\n\r\n\r\n*/","map":{"version":3,"sources":["C:/Users/adnan/web-dev/my-game-page/components/Form.js"],"names":["React","useState","Form","props","fieldValues","setFieldValues","Children","map","children","child","value","index","cloneElement","onChange","handleChange","e","newFieldValues","i","target","handleSubmit"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAClC,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCJ,QAAQ,CAC5CD,KAAK,CAACM,QAAN,CAAeC,GAAf,CAAmBJ,KAAK,CAACK,QAAzB,EAAoCC,KAAD,IAAWA,KAAK,CAACN,KAAN,CAAYO,KAA1D,CAD4C,CAA9C;AAIA,QAAMF,QAAQ,GAAGR,KAAK,CAACM,QAAN,CAAeC,GAAf,CAAmBJ,KAAK,CAACK,QAAzB,EAAmC,CAACC,KAAD,EAAQE,KAAR,kBAClDX,KAAK,CAACY,YAAN,CAAmBH,KAAnB,EAA0B;AACxBC,IAAAA,KAAK,EAAEN,WAAW,CAACO,KAAD,CADM;AAExBE,IAAAA,QAAQ,EAAEC,YAFc;AAGxBH,IAAAA;AAHwB,GAA1B,CADe,CAAjB;;AAQA,WAASG,YAAT,CAAsBC,CAAtB,EAAyBJ,KAAzB,EAAgC;AAC9B,UAAMK,cAAc,GAAGZ,WAAW,CAACG,GAAZ,CAAgB,CAACG,KAAD,EAAQO,CAAR,KACrCA,CAAC,KAAKN,KAAN,GAAcI,CAAC,CAACG,MAAF,CAASR,KAAvB,GAA+BA,KADV,CAAvB;AAGAL,IAAAA,cAAc,CAACW,cAAD,CAAd;AACD;;AAED,WAASG,YAAT,CAAsBJ,CAAtB,EAAyB,CAAE;;AAC3B,sBAAO;AAAM,IAAA,QAAQ,EAAEI,YAAhB;AAAA,cAA+BX;AAA/B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function Form(props) {\r\n  const [fieldValues, setFieldValues] = useState(\r\n    React.Children.map(props.children, (child) => child.props.value)\r\n  );\r\n\r\n  const children = React.Children.map(props.children, (child, index) =>\r\n    React.cloneElement(child, {\r\n      value: fieldValues[index],\r\n      onChange: handleChange,\r\n      index,\r\n    })\r\n  );\r\n\r\n  function handleChange(e, index) {\r\n    const newFieldValues = fieldValues.map((value, i) =>\r\n      i === index ? e.target.value : value\r\n    );\r\n    setFieldValues(newFieldValues);\r\n  }\r\n\r\n  function handleSubmit(e) {}\r\n  return <form onSubmit={handleSubmit}>{children}</form>;\r\n}\r\n\r\n/*\r\n\r\nform is responsible for\r\n-validating all its children\r\n-sending response of validation to parent\r\n-keeping state of children\r\n*/\r\n\r\n/*\r\nFormField\r\n should be used as children to a Form\r\n    -value= starting value, after that, form takes over\r\n\r\n\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}