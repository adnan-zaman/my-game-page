{"ast":null,"code":"var _s2 = $RefreshSig$();\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState, useRef } from \"react\";\nimport Game from \"../components/Game\";\nimport GameSearchBox from \"../components/GameSearchBox\";\nimport Toolbar from \"../components/Toolbar\";\n/**\r\n *\r\n * The page that is displayed when\r\n * viewing a user's profile\r\n *\r\n * @param {object} props\r\n */\n\nexport var __N_SSP = true;\nexport default function UserPage(props) {\n  _s2();\n\n  /* setting state */\n  //the user's actual favorite games\n  var _useState = useState(props.games),\n      _useState2 = _slicedToArray(_useState, 2),\n      favoriteGames = _useState2[0],\n      setFavoriteGames = _useState2[1]; //the user's favorite game as currently displayed. these may differ\n  //from actual favorite games during editing\n\n\n  var _useState3 = useState(favoriteGames),\n      _useState4 = _slicedToArray(_useState3, 2),\n      displayedFavoriteGames = _useState4[0],\n      setDisplayedFavoriteGames = _useState4[1]; //whether or not user is editing favorite games\n\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isEditing = _useState6[0],\n      setIsEditing = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      errorMessage = _useState8[0],\n      setErrorMessage = _useState8[1];\n  /**\r\n   * Called when a Game is dragged. Adds\r\n   * the Game's data-index attribute to\r\n   * DragEvent.dataTransfer to be used by\r\n   * dropGame() later on\r\n   *\r\n   * @param {DragEvent} e\r\n   */\n\n\n  function startDragGame(e) {\n    e.stopPropagation();\n    e.dataTransfer.setData(\"text/plain\", e.currentTarget.dataset.index);\n  } //dragover handler is needed to make element\n  //draggable\n\n\n  function dragOver(e) {\n    e.stopPropagation();\n    e.preventDefault();\n    e.dataTransfer.dropEffect = \"move\";\n  }\n  /**\r\n   * The dragged game will be swapped with the game\r\n   * it's dropped on.\r\n   *\r\n   * @param {DragEvent} e\r\n   */\n\n\n  function dropGameOnGame(e) {\n    e.stopPropagation();\n    e.preventDefault();\n\n    var newFaveGames = _toConsumableArray(displayedFavoriteGames);\n\n    var newGame = e.dataTransfer.getData(\"application/json\"); //index of game that was dropped on\n\n    var dropTarget = Number(e.currentTarget.dataset.index); //dataTransfer will contain a js object if the game being dragged\n    //is from search results, meaning a new game is being added\n    //to favorite games\n\n    if (newGame) {\n      var newGameAsObject = JSON.parse(newGame);\n      if (gameAlreadyExists(newGameAsObject)) return; //we replace elements as we go, eventually we an element to newFaveGames[newFaveGames.length]\n      //this increases the length and the loop goes on forever\n      //so we keep the length of the list before we start\n\n      var length = newFaveGames.length; //game to be added in\n\n      var holder = newGameAsObject;\n\n      for (var i = 0; i <= length; i++) {\n        // if (newFaveGames[i] && newFaveGames[i].id === newGameAsObject.id)\n        //   return;\n        //start swapping from dropTarget onwards\n        if (i >= dropTarget) {\n          //put holder into the list, take what was there and put into holder\n          var temp = newFaveGames[i];\n          newFaveGames[i] = holder;\n          holder = temp;\n        }\n      }\n    } //if there is no js object, then the game being dragged is an already\n    //existing game so we just swap places\n    else {\n        //the game that was being dragged\n        var draggedGame = Number(e.dataTransfer.getData(\"text/plain\"));\n        var _temp = newFaveGames[dropTarget];\n        newFaveGames[dropTarget] = newFaveGames[draggedGame];\n        newFaveGames[draggedGame] = _temp;\n      }\n\n    setDisplayedFavoriteGames(newFaveGames);\n  }\n  /**\r\n   * The dragged game will be added to the\r\n   * end of the list\r\n   *\r\n   * @param {DragEvent} e\r\n   */\n\n\n  function dropGameOnContainer(e) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    var newFaveGames = _toConsumableArray(displayedFavoriteGames);\n\n    var newGame = e.dataTransfer.getData(\"application/json\"); //dataTransfer will contain a js object if the game being dragged\n    //is from search results, meaning a new game is being added\n    //to favorite games\n\n    if (newGame) {\n      var newGameAsObject = JSON.parse(newGame);\n      if (gameAlreadyExists(newGameAsObject)) return;\n      newFaveGames.push(newGameAsObject);\n    } //if there is no js object, then the game being dragged is an already\n    //existing game. dragged game is added to the end and rest are shifted up\n    else {\n        var newPos = Number(e.dataTransfer.getData(\"text/plain\"));\n        var draggedGame = newFaveGames[newPos]; //shift everything towards the front\n\n        for (; newPos < newFaveGames.length - 1; newPos++) {\n          newFaveGames[newPos] = newFaveGames[newPos + 1];\n        } //add draggedGame back to the end\n\n\n        newFaveGames[newPos] = draggedGame;\n      }\n\n    setDisplayedFavoriteGames(newFaveGames);\n  }\n  /**\r\n   * Deletes a game from displayedFavoriteGames.\r\n   *\r\n   * @param {number} gameId the id of game to be deleted\r\n   */\n\n\n  function deleteGame(gameId) {\n    setDisplayedFavoriteGames(displayedFavoriteGames.filter(function (game) {\n      return game.id !== gameId;\n    }));\n  }\n  /**\r\n   * Called when editing is cancelled. Sets displayed favorite games\r\n   * to actual favorite games.\r\n   */\n\n\n  function rollbackChanges() {\n    setErrorMessage(\"\");\n    setDisplayedFavoriteGames(favoriteGames);\n    setIsEditing(false);\n  }\n\n  function saveChanges() {\n    return _saveChanges.apply(this, arguments);\n  }\n  /**\r\n   * Adds a game to the end of displayedFavoriteGames.\r\n   *\r\n   * @param {object} game game object\r\n   */\n\n\n  function _saveChanges() {\n    _saveChanges = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      var faveGameIds, response, error;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setErrorMessage(\"\");\n              faveGameIds = displayedFavoriteGames.map(function (game) {\n                return game.id;\n              });\n              _context.next = 4;\n              return fetch(\"/api/favorites/\".concat(props.id), {\n                method: \"PUT\",\n                credentials: \"same-origin\",\n                body: JSON.stringify(faveGameIds),\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                }\n              });\n\n            case 4:\n              response = _context.sent;\n\n              if (!response.ok) {\n                _context.next = 10;\n                break;\n              }\n\n              setIsEditing(false);\n              setFavoriteGames(displayedFavoriteGames);\n              _context.next = 14;\n              break;\n\n            case 10:\n              _context.next = 12;\n              return response.json();\n\n            case 12:\n              error = _context.sent;\n              setErrorMessage(error.message);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _saveChanges.apply(this, arguments);\n  }\n\n  function onAdd(game) {\n    if (gameAlreadyExists(game)) return;\n    setDisplayedFavoriteGames([].concat(_toConsumableArray(displayedFavoriteGames), [game]));\n  }\n  /**\r\n   * Called by Games in mobile view to change positions in the fave game list.\r\n   *\r\n   * @param {number} currIndex the index of the game that is changing position\r\n   * @param {number} nextIndex the index the game is trying to move to\r\n   */\n\n\n  function changePosition(currIndex, nextIndex) {\n    var newFaveGames = _toConsumableArray(displayedFavoriteGames);\n\n    var temp = newFaveGames[nextIndex];\n    newFaveGames[nextIndex] = newFaveGames[currIndex];\n    newFaveGames[currIndex] = temp;\n    setDisplayedFavoriteGames(newFaveGames);\n  }\n  /**\r\n   * Checks if a game is already in displayedFavoriteGames\r\n   *\r\n   * @param {object} listOfGames game json object\r\n   * @returns true if game already exists, false otherwise\r\n   */\n\n\n  function gameAlreadyExists(game) {\n    var _iterator = _createForOfIteratorHelper(displayedFavoriteGames),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var g = _step.value;\n        console.log(\"\".concat(g.id, \" \").concat(game.id));\n        if (g.id === game.id) return true;\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return false;\n  } //get a list of Game components corresponding to favorite games\n  //each is given a data-index attribute that corresponds to\n  //what position in the list they are. this will be used during\n  //editing favorite games.\n\n\n  var favoriteGamesList = displayedFavoriteGames.map(function (game, index) {\n    return /*#__PURE__*/React.createElement(Game, {\n      key: game.id,\n      gameId: game.id,\n      gameName: game.name,\n      gameCoverUrl: game.coverurl,\n      isEditing: isEditing,\n      \"data-index\": \"\" + index,\n      draggable: isEditing + \"\",\n      onDragStart: isEditing ? startDragGame : undefined,\n      onDragOver: isEditing ? dragOver : undefined,\n      onDrop: isEditing ? dropGameOnGame : undefined,\n      onDelete: deleteGame,\n      changePosition: changePosition,\n      isLast: index === displayedFavoriteGames.length - 1\n    });\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Toolbar, {\n    userId: props.toolbarId,\n    profilePic: props.userProfilePic\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"user-page-header mb-3\"\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: props.profilePic,\n    alt: \"\".concat(props.displayName, \"'s profile picture\"),\n    className: \"page-profile-pic rounded-circle\"\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"display-1 d-inline\"\n  }, props.displayName)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"user-page-main \".concat(isEditing && \"d-md-flex rounded-lg\")\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"user-page-games rounded-lg d-flex flex-column \".concat(isEditing ? \"is-editing\" : \"m-auto\")\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"favorite-games-list game-list\"\n  }, favoriteGamesList, isEditing && /*#__PURE__*/React.createElement(\"div\", {\n    id: \"drop-space\",\n    className: \"my-3 mx-2\",\n    onDrop: dropGameOnContainer,\n    onDragOver: dragOver\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"button-bar\"\n  }, props.id && (!isEditing ? /*#__PURE__*/React.createElement(\"button\", {\n    onClick: function onClick() {\n      return setIsEditing(true);\n    },\n    className: \"btn btn-secondary\"\n  }, \"Edit\") : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: rollbackChanges,\n    className: \"btn btn-secondary\"\n  }, \"Cancel\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: saveChanges,\n    className: \"btn btn-primary\"\n  }, \"Save\"))), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"text-danger\"\n  }, errorMessage))), isEditing && /*#__PURE__*/React.createElement(GameSearchBox, {\n    onAdd: onAdd\n  })));\n}\n\n_s2(UserPage, \"22CiGVluGG7G1b0clOaHSp1dmwc=\");\n\n_c = UserPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserPage\");","map":{"version":3,"sources":["C:/Users/adnan/web-dev/my-game-page/pages/userPage.js"],"names":["React","useState","useRef","Game","GameSearchBox","Toolbar","UserPage","props","games","favoriteGames","setFavoriteGames","displayedFavoriteGames","setDisplayedFavoriteGames","isEditing","setIsEditing","errorMessage","setErrorMessage","startDragGame","e","stopPropagation","dataTransfer","setData","currentTarget","dataset","index","dragOver","preventDefault","dropEffect","dropGameOnGame","newFaveGames","newGame","getData","dropTarget","Number","newGameAsObject","JSON","parse","gameAlreadyExists","length","holder","i","temp","draggedGame","dropGameOnContainer","push","newPos","deleteGame","gameId","filter","game","id","rollbackChanges","saveChanges","faveGameIds","map","fetch","method","credentials","body","stringify","headers","response","ok","json","error","message","onAdd","changePosition","currIndex","nextIndex","g","console","log","favoriteGamesList","name","coverurl","undefined","toolbarId","userProfilePic","profilePic","displayName"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport Game from \"../components/Game\";\r\nimport GameSearchBox from \"../components/GameSearchBox\";\r\n\r\nimport Toolbar from \"../components/Toolbar\";\r\n\r\n/**\r\n *\r\n * The page that is displayed when\r\n * viewing a user's profile\r\n *\r\n * @param {object} props\r\n */\r\n\r\nexport default function UserPage(props) {\r\n  /* setting state */\r\n  //the user's actual favorite games\r\n  const [favoriteGames, setFavoriteGames] = useState(props.games);\r\n  //the user's favorite game as currently displayed. these may differ\r\n  //from actual favorite games during editing\r\n  const [displayedFavoriteGames, setDisplayedFavoriteGames] = useState(\r\n    favoriteGames\r\n  );\r\n  //whether or not user is editing favorite games\r\n  const [isEditing, setIsEditing] = useState(false);\r\n\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  /**\r\n   * Called when a Game is dragged. Adds\r\n   * the Game's data-index attribute to\r\n   * DragEvent.dataTransfer to be used by\r\n   * dropGame() later on\r\n   *\r\n   * @param {DragEvent} e\r\n   */\r\n  function startDragGame(e) {\r\n    e.stopPropagation();\r\n    e.dataTransfer.setData(\"text/plain\", e.currentTarget.dataset.index);\r\n  }\r\n\r\n  //dragover handler is needed to make element\r\n  //draggable\r\n  function dragOver(e) {\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n\r\n    e.dataTransfer.dropEffect = \"move\";\r\n  }\r\n\r\n  /**\r\n   * The dragged game will be swapped with the game\r\n   * it's dropped on.\r\n   *\r\n   * @param {DragEvent} e\r\n   */\r\n  function dropGameOnGame(e) {\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n\r\n    const newFaveGames = [...displayedFavoriteGames];\r\n    const newGame = e.dataTransfer.getData(\"application/json\");\r\n    //index of game that was dropped on\r\n    const dropTarget = Number(e.currentTarget.dataset.index);\r\n    //dataTransfer will contain a js object if the game being dragged\r\n    //is from search results, meaning a new game is being added\r\n    //to favorite games\r\n    if (newGame) {\r\n      const newGameAsObject = JSON.parse(newGame);\r\n      if (gameAlreadyExists(newGameAsObject)) return;\r\n      //we replace elements as we go, eventually we an element to newFaveGames[newFaveGames.length]\r\n      //this increases the length and the loop goes on forever\r\n      //so we keep the length of the list before we start\r\n      const length = newFaveGames.length;\r\n      //game to be added in\r\n      let holder = newGameAsObject;\r\n      for (let i = 0; i <= length; i++) {\r\n        // if (newFaveGames[i] && newFaveGames[i].id === newGameAsObject.id)\r\n        //   return;\r\n        //start swapping from dropTarget onwards\r\n        if (i >= dropTarget) {\r\n          //put holder into the list, take what was there and put into holder\r\n          const temp = newFaveGames[i];\r\n          newFaveGames[i] = holder;\r\n          holder = temp;\r\n        }\r\n      }\r\n    }\r\n    //if there is no js object, then the game being dragged is an already\r\n    //existing game so we just swap places\r\n    else {\r\n      //the game that was being dragged\r\n      const draggedGame = Number(e.dataTransfer.getData(\"text/plain\"));\r\n      const temp = newFaveGames[dropTarget];\r\n      newFaveGames[dropTarget] = newFaveGames[draggedGame];\r\n      newFaveGames[draggedGame] = temp;\r\n    }\r\n\r\n    setDisplayedFavoriteGames(newFaveGames);\r\n  }\r\n\r\n  /**\r\n   * The dragged game will be added to the\r\n   * end of the list\r\n   *\r\n   * @param {DragEvent} e\r\n   */\r\n  function dropGameOnContainer(e) {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n\r\n    const newFaveGames = [...displayedFavoriteGames];\r\n    const newGame = e.dataTransfer.getData(\"application/json\");\r\n    //dataTransfer will contain a js object if the game being dragged\r\n    //is from search results, meaning a new game is being added\r\n    //to favorite games\r\n    if (newGame) {\r\n      const newGameAsObject = JSON.parse(newGame);\r\n      if (gameAlreadyExists(newGameAsObject)) return;\r\n\r\n      newFaveGames.push(newGameAsObject);\r\n    }\r\n    //if there is no js object, then the game being dragged is an already\r\n    //existing game. dragged game is added to the end and rest are shifted up\r\n    else {\r\n      let newPos = Number(e.dataTransfer.getData(\"text/plain\"));\r\n      let draggedGame = newFaveGames[newPos];\r\n      //shift everything towards the front\r\n      for (; newPos < newFaveGames.length - 1; newPos++)\r\n        newFaveGames[newPos] = newFaveGames[newPos + 1];\r\n\r\n      //add draggedGame back to the end\r\n      newFaveGames[newPos] = draggedGame;\r\n    }\r\n\r\n    setDisplayedFavoriteGames(newFaveGames);\r\n  }\r\n\r\n  /**\r\n   * Deletes a game from displayedFavoriteGames.\r\n   *\r\n   * @param {number} gameId the id of game to be deleted\r\n   */\r\n  function deleteGame(gameId) {\r\n    setDisplayedFavoriteGames(\r\n      displayedFavoriteGames.filter((game) => game.id !== gameId)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Called when editing is cancelled. Sets displayed favorite games\r\n   * to actual favorite games.\r\n   */\r\n  function rollbackChanges() {\r\n    setErrorMessage(\"\");\r\n    setDisplayedFavoriteGames(favoriteGames);\r\n    setIsEditing(false);\r\n  }\r\n\r\n  async function saveChanges() {\r\n    setErrorMessage(\"\");\r\n    const faveGameIds = displayedFavoriteGames.map((game) => game.id);\r\n\r\n    const response = await fetch(`/api/favorites/${props.id}`, {\r\n      method: \"PUT\",\r\n      credentials: \"same-origin\",\r\n      body: JSON.stringify(faveGameIds),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n    if (response.ok) {\r\n      setIsEditing(false);\r\n      setFavoriteGames(displayedFavoriteGames);\r\n    } else {\r\n      const error = await response.json();\r\n      setErrorMessage(error.message);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a game to the end of displayedFavoriteGames.\r\n   *\r\n   * @param {object} game game object\r\n   */\r\n  function onAdd(game) {\r\n    if (gameAlreadyExists(game)) return;\r\n    setDisplayedFavoriteGames([...displayedFavoriteGames, game]);\r\n  }\r\n\r\n  /**\r\n   * Called by Games in mobile view to change positions in the fave game list.\r\n   *\r\n   * @param {number} currIndex the index of the game that is changing position\r\n   * @param {number} nextIndex the index the game is trying to move to\r\n   */\r\n  function changePosition(currIndex, nextIndex) {\r\n    const newFaveGames = [...displayedFavoriteGames];\r\n    const temp = newFaveGames[nextIndex];\r\n    newFaveGames[nextIndex] = newFaveGames[currIndex];\r\n    newFaveGames[currIndex] = temp;\r\n    setDisplayedFavoriteGames(newFaveGames);\r\n  }\r\n\r\n  /**\r\n   * Checks if a game is already in displayedFavoriteGames\r\n   *\r\n   * @param {object} listOfGames game json object\r\n   * @returns true if game already exists, false otherwise\r\n   */\r\n  function gameAlreadyExists(game) {\r\n    for (const g of displayedFavoriteGames) {\r\n      console.log(`${g.id} ${game.id}`);\r\n      if (g.id === game.id) return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  //get a list of Game components corresponding to favorite games\r\n  //each is given a data-index attribute that corresponds to\r\n  //what position in the list they are. this will be used during\r\n  //editing favorite games.\r\n  const favoriteGamesList = displayedFavoriteGames.map((game, index) => (\r\n    <Game\r\n      key={game.id}\r\n      gameId={game.id}\r\n      gameName={game.name}\r\n      gameCoverUrl={game.coverurl}\r\n      isEditing={isEditing}\r\n      data-index={\"\" + index}\r\n      draggable={isEditing + \"\"}\r\n      onDragStart={isEditing ? startDragGame : undefined}\r\n      onDragOver={isEditing ? dragOver : undefined}\r\n      onDrop={isEditing ? dropGameOnGame : undefined}\r\n      onDelete={deleteGame}\r\n      changePosition={changePosition}\r\n      isLast={index === displayedFavoriteGames.length - 1}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      <Toolbar userId={props.toolbarId} profilePic={props.userProfilePic} />\r\n      <div className=\"user-page-header mb-3\">\r\n        <img\r\n          src={props.profilePic}\r\n          alt={`${props.displayName}'s profile picture`}\r\n          className=\"page-profile-pic rounded-circle\"\r\n        />\r\n        <h1 className=\"display-1 d-inline\">{props.displayName}</h1>\r\n      </div>\r\n      <div className={`user-page-main ${isEditing && \"d-md-flex rounded-lg\"}`}>\r\n        <div\r\n          className={`user-page-games rounded-lg d-flex flex-column ${\r\n            isEditing ? \"is-editing\" : \"m-auto\"\r\n          }`}\r\n        >\r\n          <div className=\"favorite-games-list game-list\">\r\n            {favoriteGamesList}\r\n            {isEditing && (\r\n              <div\r\n                id=\"drop-space\"\r\n                className=\"my-3 mx-2\"\r\n                onDrop={dropGameOnContainer}\r\n                onDragOver={dragOver}\r\n              ></div>\r\n            )}\r\n          </div>\r\n          <div className=\"button-bar\">\r\n            {props.id &&\r\n              (!isEditing ? (\r\n                <button\r\n                  onClick={() => setIsEditing(true)}\r\n                  className=\"btn btn-secondary\"\r\n                >\r\n                  Edit\r\n                </button>\r\n              ) : (\r\n                <>\r\n                  <button\r\n                    onClick={rollbackChanges}\r\n                    className=\"btn btn-secondary\"\r\n                  >\r\n                    Cancel\r\n                  </button>\r\n                  <button onClick={saveChanges} className=\"btn btn-primary\">\r\n                    Save\r\n                  </button>\r\n                </>\r\n              ))}\r\n            <span className=\"text-danger\">{errorMessage}</span>\r\n          </div>\r\n        </div>\r\n        {isEditing && <GameSearchBox onAdd={onAdd} />}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport function getServerSideProps(context) {\r\n  return {\r\n    props: JSON.parse(JSON.stringify(context.res.locals)),\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}