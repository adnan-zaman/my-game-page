{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState, useRef } from \"react\";\n/**\r\n *\r\n * General form component that validates and controls the state\r\n * of all of its fields. Children of Form should be a list of FormElements.\r\n *\r\n *\r\n * @param {object} props Expected props:\r\n * - id {string} form htmlElement's id\r\n *\r\n * - onSubmit {function(event, object)} callback for when form submits.\r\n *   Form will send two arguments, the first is the event, the second\r\n *   is the error info object. If one of the FormFields within the Form\r\n *   were not valid, the second argument will be an object containing\r\n *   information about the error. If everything was valid, it will be null.\r\n *\r\n * - submitBtnText {string} the textContent for the submit button\r\n *\r\n * - action? {string} value for form's action attribute\r\n *\r\n * - method? {string} value for form's method attribute\r\n *\r\n * - inline {boolean} whether this is an inline form or not\r\n *\r\n * - encType? {string} form's enctype\r\n *\r\n * -props.children should be a list of FormField elements. Each FormField\r\n *  should be initialized with an initial value prop.\r\n *\r\n */\n\nexport default function Form(props) {\n  //array of values for all children (FormFields)\n  //initializes state to be equal to the initial value given by\n  //parent component\n  var _useState = useState(React.Children.map(props.children, function (child) {\n    return child.props.value;\n  })),\n      _useState2 = _slicedToArray(_useState, 2),\n      fieldValues = _useState2[0],\n      setFieldValues = _useState2[1]; //list of validators of all of this Form's FormFields\n\n\n  var fieldValidators = useRef([]); //takes control of childrens state and passes own props\n\n  var children = React.Children.map(props.children, function (child, index) {\n    return /*#__PURE__*/React.cloneElement(child, {\n      value: fieldValues[index],\n      addValidator: function addValidator(validator) {\n        return fieldValidators.current.push(validator);\n      },\n      onChange: handleChange,\n      parentId: props.id,\n      //add parent id to so FormField can make unique ids for its elements\n      index: index,\n      inline: props.inline\n    });\n  });\n  var submitBtn = /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary \".concat(props.btnClass),\n    type: \"submit\"\n  }, props.submitBtnText || \"Submit\"); //what to display inside the form\n  //if its an inline form, put all children and button in one row\n  //else display children as they are\n\n  var innerForm = props.inline ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\"\n  }, children, submitBtn) : /*#__PURE__*/React.createElement(React.Fragment, null, children, submitBtn);\n  /**\r\n   * Handles value changes for all of a Form's FormFields.\r\n   *\r\n   * @param {Event} e\r\n   * @param {Number} index FormField's index prop\r\n   */\n\n  function handleChange(e, index) {\n    //the index prop of each FormField and fieldValues are parallel\n    //so if a FormField passes it's props.index, we can set\n    //the correct state\n    var newFieldValues = fieldValues.map(function (value, i) {\n      return i === index ? e.target.value : value;\n    });\n    setFieldValues(newFieldValues);\n  }\n  /**\r\n   * Calls every FormField's validator function. If any field\r\n   * is invalid, will send the error info object to parent component.\r\n   *\r\n   * @param {event} e\r\n   */\n\n\n  function validateAllFields(e) {\n    var _iterator = _createForOfIteratorHelper(fieldValidators.current),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var validator = _step.value;\n        var errorInfo = validator();\n        if (errorInfo) return props.onSubmit(e, errorInfo);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    props.onSubmit(e, null);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"form\", {\n    id: props.id,\n    onSubmit: validateAllFields,\n    noValidate: true,\n    action: props.action,\n    method: props.method,\n    className: props.className,\n    encType: props.encType\n  }, innerForm));\n}","map":{"version":3,"sources":["C:/Users/adnan/web-dev/my-game-page/components/Form.js"],"names":["React","useState","useRef","Form","props","Children","map","children","child","value","fieldValues","setFieldValues","fieldValidators","index","cloneElement","addValidator","validator","current","push","onChange","handleChange","parentId","id","inline","submitBtn","btnClass","submitBtnText","innerForm","e","newFieldValues","i","target","validateAllFields","errorInfo","onSubmit","action","method","className","encType"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\r\n\r\n/**\r\n *\r\n * General form component that validates and controls the state\r\n * of all of its fields. Children of Form should be a list of FormElements.\r\n *\r\n *\r\n * @param {object} props Expected props:\r\n * - id {string} form htmlElement's id\r\n *\r\n * - onSubmit {function(event, object)} callback for when form submits.\r\n *   Form will send two arguments, the first is the event, the second\r\n *   is the error info object. If one of the FormFields within the Form\r\n *   were not valid, the second argument will be an object containing\r\n *   information about the error. If everything was valid, it will be null.\r\n *\r\n * - submitBtnText {string} the textContent for the submit button\r\n *\r\n * - action? {string} value for form's action attribute\r\n *\r\n * - method? {string} value for form's method attribute\r\n *\r\n * - inline {boolean} whether this is an inline form or not\r\n *\r\n * - encType? {string} form's enctype\r\n *\r\n * -props.children should be a list of FormField elements. Each FormField\r\n *  should be initialized with an initial value prop.\r\n *\r\n */\r\nexport default function Form(props) {\r\n  //array of values for all children (FormFields)\r\n  //initializes state to be equal to the initial value given by\r\n  //parent component\r\n  const [fieldValues, setFieldValues] = useState(\r\n    React.Children.map(props.children, (child) => child.props.value)\r\n  );\r\n\r\n  //list of validators of all of this Form's FormFields\r\n  const fieldValidators = useRef([]);\r\n\r\n  //takes control of childrens state and passes own props\r\n  const children = React.Children.map(props.children, (child, index) =>\r\n    React.cloneElement(child, {\r\n      value: fieldValues[index],\r\n      addValidator: (validator) => fieldValidators.current.push(validator),\r\n      onChange: handleChange,\r\n      parentId: props.id, //add parent id to so FormField can make unique ids for its elements\r\n      index,\r\n      inline: props.inline,\r\n    })\r\n  );\r\n\r\n  const submitBtn = (\r\n    <button className={`btn btn-primary ${props.btnClass}`} type=\"submit\">\r\n      {props.submitBtnText || \"Submit\"}\r\n    </button>\r\n  );\r\n\r\n  //what to display inside the form\r\n  //if its an inline form, put all children and button in one row\r\n  //else display children as they are\r\n  const innerForm = props.inline ? (\r\n    <div className=\"row\">\r\n      {children}\r\n      {submitBtn}\r\n    </div>\r\n  ) : (\r\n    <>\r\n      {children}\r\n      {submitBtn}\r\n    </>\r\n  );\r\n\r\n  /**\r\n   * Handles value changes for all of a Form's FormFields.\r\n   *\r\n   * @param {Event} e\r\n   * @param {Number} index FormField's index prop\r\n   */\r\n  function handleChange(e, index) {\r\n    //the index prop of each FormField and fieldValues are parallel\r\n    //so if a FormField passes it's props.index, we can set\r\n    //the correct state\r\n    const newFieldValues = fieldValues.map((value, i) =>\r\n      i === index ? e.target.value : value\r\n    );\r\n\r\n    setFieldValues(newFieldValues);\r\n  }\r\n\r\n  /**\r\n   * Calls every FormField's validator function. If any field\r\n   * is invalid, will send the error info object to parent component.\r\n   *\r\n   * @param {event} e\r\n   */\r\n  function validateAllFields(e) {\r\n    for (const validator of fieldValidators.current) {\r\n      const errorInfo = validator();\r\n      if (errorInfo) return props.onSubmit(e, errorInfo);\r\n    }\r\n    props.onSubmit(e, null);\r\n  }\r\n  return (\r\n    <>\r\n      <form\r\n        id={props.id}\r\n        onSubmit={validateAllFields}\r\n        noValidate={true}\r\n        action={props.action}\r\n        method={props.method}\r\n        className={props.className}\r\n        encType={props.encType}\r\n      >\r\n        {innerForm}\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}