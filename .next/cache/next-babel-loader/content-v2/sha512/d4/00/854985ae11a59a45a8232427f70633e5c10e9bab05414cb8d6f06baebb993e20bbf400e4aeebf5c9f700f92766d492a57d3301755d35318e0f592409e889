{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\adnan\\\\web-dev\\\\my-game-page\\\\components\\\\GameSearchBox.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from \"react\";\nimport Game from \"./Game\";\nexport default function GameSearchBox(props) {\n  _s();\n\n  var _this = this;\n\n  //search term in search bar\n  var _useState = useState(\"\"),\n      searchTerm = _useState[0],\n      setSearchTerm = _useState[1]; //page of search results\n\n\n  var _useState2 = useState(undefined),\n      searchPage = _useState2[0],\n      setSearchPage = _useState2[1]; //list of objects that will be retrieved from search api\n\n\n  var _useState3 = useState([]),\n      searchResults = _useState3[0],\n      setSearchResults = _useState3[1];\n\n  var _useState4 = useState(false),\n      loading = _useState4[0],\n      setLoading = _useState4[1]; //used to determine whether its first render or not\n\n\n  var firstRender = useRef(true);\n  var displayedSearchResults = searchResults.map(function (game) {\n    return /*#__PURE__*/_jsxDEV(Game, {\n      gameId: game.id,\n      gameName: game.name,\n      gameCoverUrl: game.coverurl\n    }, game.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }, _this);\n  });\n\n  function handleChange(e) {\n    setSearchTerm(e.target.value);\n  }\n\n  function handleSearch(e) {\n    e.preventDefault();\n    setPageNumber(0);\n  }\n\n  function setPageNumber(pageNumber) {\n    if (pageNumber < 0) return;\n    setSearchPage(pageNumber);\n  }\n\n  function fetchAndPopulateSearchResults() {\n    return _fetchAndPopulateSearchResults.apply(this, arguments);\n  } //whenever page number changes, new search results are fetched\n  //needs to be done in useEffect because useState doesnt change\n  //values immediately, accessing searchPage after render ensures\n  //we have new value\n\n\n  function _fetchAndPopulateSearchResults() {\n    _fetchAndPopulateSearchResults = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var query, response, results;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              query = \"http://localhost:3000/api/search/\".concat(searchTerm, \"/\").concat(searchPage);\n              _context.next = 4;\n              return fetch(query);\n\n            case 4:\n              response = _context.sent;\n              _context.next = 7;\n              return response.json();\n\n            case 7:\n              results = _context.sent;\n              setSearchResults(results);\n              setLoading(false);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _fetchAndPopulateSearchResults.apply(this, arguments);\n  }\n\n  useEffect(function () {\n    //dont want fetchAndPopulateSearchResults() being\n    //called on first render\n    if (firstRender.current) {\n      firstRender.current = false;\n      return;\n    }\n\n    fetchAndPopulateSearchResults();\n  }, [searchPage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSearch,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"game-search-bar\",\n          children: \"Name of Game:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"game-search-bar\",\n          value: searchTerm,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), searchPage >= 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: function onClick() {\n              return setPageNumber(searchPage - 1);\n            },\n            children: \"Prev\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"page-number\",\n            children: \"Page:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"page-number\",\n            disabled: true,\n            value: searchPage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: function onClick() {\n              return setPageNumber(searchPage + 1);\n            },\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-results\",\n      children: [loading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this), displayedSearchResults]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GameSearchBox, \"JiPD2WKUd76+oXb/PNLpnhj7tZI=\");\n\n_c = GameSearchBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameSearchBox\");","map":{"version":3,"sources":["C:/Users/adnan/web-dev/my-game-page/components/GameSearchBox.js"],"names":["useState","useEffect","useRef","Game","GameSearchBox","props","searchTerm","setSearchTerm","undefined","searchPage","setSearchPage","searchResults","setSearchResults","loading","setLoading","firstRender","displayedSearchResults","map","game","id","name","coverurl","handleChange","e","target","value","handleSearch","preventDefault","setPageNumber","pageNumber","fetchAndPopulateSearchResults","query","fetch","response","json","results","current"],"mappings":"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","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\r\nimport Game from \"./Game\";\r\n\r\nexport default function GameSearchBox(props) {\r\n  //search term in search bar\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  //page of search results\r\n  const [searchPage, setSearchPage] = useState(undefined);\r\n  //list of objects that will be retrieved from search api\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  //used to determine whether its first render or not\r\n  const firstRender = useRef(true);\r\n\r\n  const displayedSearchResults = searchResults.map((game) => (\r\n    <Game\r\n      key={game.id}\r\n      gameId={game.id}\r\n      gameName={game.name}\r\n      gameCoverUrl={game.coverurl}\r\n    />\r\n  ));\r\n\r\n  function handleChange(e) {\r\n    setSearchTerm(e.target.value);\r\n  }\r\n\r\n  function handleSearch(e) {\r\n    e.preventDefault();\r\n    setPageNumber(0);\r\n  }\r\n\r\n  function setPageNumber(pageNumber) {\r\n    if (pageNumber < 0) return;\r\n    setSearchPage(pageNumber);\r\n  }\r\n\r\n  async function fetchAndPopulateSearchResults() {\r\n    setLoading(true);\r\n    const query = `http://localhost:3000/api/search/${searchTerm}/${searchPage}`;\r\n    const response = await fetch(query);\r\n    const results = await response.json();\r\n    setSearchResults(results);\r\n    setLoading(false);\r\n  }\r\n\r\n  //whenever page number changes, new search results are fetched\r\n  //needs to be done in useEffect because useState doesnt change\r\n  //values immediately, accessing searchPage after render ensures\r\n  //we have new value\r\n  useEffect(() => {\r\n    //dont want fetchAndPopulateSearchResults() being\r\n    //called on first render\r\n    if (firstRender.current) {\r\n      firstRender.current = false;\r\n      return;\r\n    }\r\n    fetchAndPopulateSearchResults();\r\n  }, [searchPage]);\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <form onSubmit={handleSearch}>\r\n          <label htmlFor=\"game-search-bar\">Name of Game:</label>\r\n          <input\r\n            id=\"game-search-bar\"\r\n            value={searchTerm}\r\n            onChange={handleChange}\r\n          ></input>\r\n          <button type=\"submit\">Search</button>\r\n          {searchPage >= 0 && (\r\n            <>\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => setPageNumber(searchPage - 1)}\r\n              >\r\n                Prev\r\n              </button>\r\n              <label htmlFor=\"page-number\">Page:</label>\r\n              <input\r\n                id=\"page-number\"\r\n                disabled={true}\r\n                value={searchPage}\r\n              ></input>\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => setPageNumber(searchPage + 1)}\r\n              >\r\n                Next\r\n              </button>\r\n            </>\r\n          )}\r\n        </form>\r\n      </div>\r\n      <div className=\"search-results\">\r\n        {loading && <p>Loading...</p>}\r\n        {displayedSearchResults}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}