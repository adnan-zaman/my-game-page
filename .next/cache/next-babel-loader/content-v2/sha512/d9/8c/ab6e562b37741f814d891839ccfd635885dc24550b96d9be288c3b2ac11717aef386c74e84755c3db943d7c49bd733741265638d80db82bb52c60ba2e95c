{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\adnan\\\\web-dev\\\\my-game-page\\\\components\\\\FormFields.js\";\nimport { useState, useRef, useEffect } from \"react\";\n/**\r\n * FormFields are meant to be used with the Form component.\r\n * They are a combination of a label and a corresponding input element of some kind.\r\n * They make up the fields of a Form component. Each FormField has its own\r\n * validator function that checks the validity of its input. FormField validators\r\n * are called by its parent Form. FormFields should be the children of a Form\r\n * component and should be initialied with an initial value prop. After first render,\r\n * the Form component will take control of the FormField's value state.\r\n *\r\n */\n\n/**\r\n * General text input field.\r\n *\r\n * @param {object} props\r\n * - label {string} FormField's label\r\n * - name {string} name for input element\r\n * - required? {boolean} whether this FormField is required or not\r\n * - min? {number} minimum number of characters\r\n * - max? {number} maximum number of characters\r\n */\n\nexport function TextField(props) {\n  const inputId = `form-field-${props.label}-${props.parentId}`;\n  const minLength = props.min;\n  const maxLength = props.max;\n  const validatorAdded = useRef(false); //to ensure validator only gets added to parent Form once\n\n  if (!validatorAdded.current) {\n    props.addValidator(validate);\n    validatorAdded.current = true;\n  }\n  /**\r\n   * Checks the validity of input\r\n   */\n\n\n  function validate() {\n    const [element, validityState] = getElementAndValidityState(inputId);\n    if (validityState.valueMissing) return {\n      message: `${props.label} is required.`,\n      element\n    };\n    if (validityState.tooShort) return {\n      message: `${props.label} must be at least ${minLength} characters long.`,\n      element\n    };\n    if (validityState.tooLong) return {\n      message: `${props.label} must be less than or equal to ${maxLength} characters long.`,\n      element\n    };\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"col-form-label\",\n      htmlFor: inputId,\n      children: [props.label, \":\", \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: inputId,\n      name: props.name,\n      value: props.value || \"\",\n      onChange: e => props.onChange(e, props.index),\n      required: props.required,\n      minLength: minLength,\n      maxLength: maxLength\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n/**\r\n * Input field for emails.\r\n *\r\n * @param {object} props\r\n * - label? {string} FormField's label (default label is Email)\r\n * - name {string} name for input element\r\n * - required? {boolean} whether this FormField is required or not\r\n * - min? {number} minimum number of characters\r\n * - max? {number} maximum number of characters\r\n */\n\nexport function EmailField(props) {\n  const labelName = props.label || \"Email\";\n  const inputId = `form-field-${labelName}-${props.parentId}`;\n  const minLength = props.min;\n  const maxLength = props.max || 50;\n  const validatorAdded = useRef(false); //to ensure validator only gets added to parent Form once\n\n  if (!validatorAdded.current) {\n    props.addValidator(validate);\n    validatorAdded.current = true;\n  }\n  /**\r\n   * Checks the validity of input.\r\n   *\r\n   * @returns {object} if input is valid, returns null. Otherwise, returns an object\r\n   * containg information about the error\r\n   * {message: error message, element: reference to HtmlElement that contains error}\r\n   */\n\n\n  function validate() {\n    const [element, validityState] = getElementAndValidityState(inputId);\n    if (validityState.valueMissing) return {\n      message: `${labelName} is required.`,\n      element\n    };\n    if (validityState.typeMismatch) return {\n      message: `${labelName} must be an email.`,\n      element\n    };\n    if (validityState.tooShort) return {\n      message: `${labelName} must be at least ${minLength} characters long.`,\n      element\n    };\n    if (validityState.tooLong) return {\n      message: `${labelName} must be less than or equal to ${maxLength} characters long.`,\n      element\n    };\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"form-label col-2\",\n        htmlFor: inputId,\n        children: labelName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-control col-10\",\n        id: inputId,\n        name: props.name,\n        value: props.value,\n        type: \"email\",\n        onChange: e => props.onChange(e, props.index),\n        required: props.required,\n        minLength: minLength,\n        maxLength: maxLength\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n/**\r\n * Input field for passwords. Input is always required.\r\n *\r\n * @param {object} props\r\n * - label? {string} FormField's label (default label is Password)\r\n * - name {string} name for input element\r\n * - min? {number} minimum number of characters\r\n */\n\nexport function PasswordField(props) {\n  const labelName = props.label || \"Password\";\n  const inputId = `form-field-${labelName}-${props.parentId}`;\n  const minLength = props.min;\n  const maxLength = props.max || 50;\n  const validatorAdded = useRef(false); //to ensure validator only gets added to parent Form once\n\n  if (!validatorAdded.current) {\n    props.addValidator(validate);\n    validatorAdded.current = true;\n  }\n  /**\r\n   * Checks the validity of input\r\n   */\n\n\n  function validate() {\n    const [element, validityState] = getElementAndValidityState(inputId);\n    if (validityState.valueMissing) return {\n      message: `${labelName} is required.`,\n      element\n    };\n    if (validityState.tooShort) return {\n      message: `${labelName} must be at least ${minLength} characters long.`,\n      element\n    };\n    if (validityState.tooLong) return {\n      message: `${labelName} must be less than or equal to ${maxLength} characters long.`,\n      element\n    };\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mb-3\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"col-form-label col-2\",\n          htmlFor: inputId,\n          children: labelName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-10\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-control\",\n            id: inputId,\n            name: props.name,\n            value: props.value || \"\",\n            type: \"password\",\n            onChange: e => props.onChange(e, props.index),\n            required: true,\n            minLength: minLength,\n            maxLength: maxLength\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n/**\r\n * Convenience function that returns an HtmlElement and its ValidityState\r\n * object given an id.\r\n *\r\n * @param {string} elementId id of FormField's HtmlElement to validate\r\n * @returns {array} [HtmlElement, validityState]\r\n */\n\nfunction getElementAndValidityState(elementId) {\n  const element = document.querySelector(`[id='${elementId}']`);\n  const validityState = element.validity;\n  return [element, validityState];\n}","map":{"version":3,"sources":["C:/Users/adnan/web-dev/my-game-page/components/FormFields.js"],"names":["useState","useRef","useEffect","TextField","props","inputId","label","parentId","minLength","min","maxLength","max","validatorAdded","current","addValidator","validate","element","validityState","getElementAndValidityState","valueMissing","message","tooShort","tooLong","name","value","e","onChange","index","required","EmailField","labelName","typeMismatch","PasswordField","elementId","document","querySelector","validity"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,SAA3B,QAA4C,OAA5C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAC/B,QAAMC,OAAO,GAAI,cAAaD,KAAK,CAACE,KAAM,IAAGF,KAAK,CAACG,QAAS,EAA5D;AACA,QAAMC,SAAS,GAAGJ,KAAK,CAACK,GAAxB;AACA,QAAMC,SAAS,GAAGN,KAAK,CAACO,GAAxB;AAEA,QAAMC,cAAc,GAAGX,MAAM,CAAC,KAAD,CAA7B,CAL+B,CAO/B;;AACA,MAAI,CAACW,cAAc,CAACC,OAApB,EAA6B;AAC3BT,IAAAA,KAAK,CAACU,YAAN,CAAmBC,QAAnB;AACAH,IAAAA,cAAc,CAACC,OAAf,GAAyB,IAAzB;AACD;AAED;AACF;AACA;;;AACE,WAASE,QAAT,GAAoB;AAClB,UAAM,CAACC,OAAD,EAAUC,aAAV,IAA2BC,0BAA0B,CAACb,OAAD,CAA3D;AAEA,QAAIY,aAAa,CAACE,YAAlB,EACE,OAAO;AAAEC,MAAAA,OAAO,EAAG,GAAEhB,KAAK,CAACE,KAAM,eAA1B;AAA0CU,MAAAA;AAA1C,KAAP;AACF,QAAIC,aAAa,CAACI,QAAlB,EACE,OAAO;AACLD,MAAAA,OAAO,EAAG,GAAEhB,KAAK,CAACE,KAAM,qBAAoBE,SAAU,mBADjD;AAELQ,MAAAA;AAFK,KAAP;AAIF,QAAIC,aAAa,CAACK,OAAlB,EACE,OAAO;AACLF,MAAAA,OAAO,EAAG,GAAEhB,KAAK,CAACE,KAAM,kCAAiCI,SAAU,mBAD9D;AAELM,MAAAA;AAFK,KAAP;AAIF,WAAO,IAAP;AACD;;AAED,sBACE;AAAA,4BACE;AAAO,MAAA,SAAS,EAAC,gBAAjB;AAAkC,MAAA,OAAO,EAAEX,OAA3C;AAAA,iBACGD,KAAK,CAACE,KADT,OACiB,GADjB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AACE,MAAA,EAAE,EAAED,OADN;AAEE,MAAA,IAAI,EAAED,KAAK,CAACmB,IAFd;AAGE,MAAA,KAAK,EAAEnB,KAAK,CAACoB,KAAN,IAAe,EAHxB;AAIE,MAAA,QAAQ,EAAGC,CAAD,IAAOrB,KAAK,CAACsB,QAAN,CAAeD,CAAf,EAAkBrB,KAAK,CAACuB,KAAxB,CAJnB;AAKE,MAAA,QAAQ,EAAEvB,KAAK,CAACwB,QALlB;AAME,MAAA,SAAS,EAAEpB,SANb;AAOE,MAAA,SAAS,EAAEE;AAPb;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA,kBADF;AAgBD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASmB,UAAT,CAAoBzB,KAApB,EAA2B;AAChC,QAAM0B,SAAS,GAAG1B,KAAK,CAACE,KAAN,IAAe,OAAjC;AACA,QAAMD,OAAO,GAAI,cAAayB,SAAU,IAAG1B,KAAK,CAACG,QAAS,EAA1D;AACA,QAAMC,SAAS,GAAGJ,KAAK,CAACK,GAAxB;AACA,QAAMC,SAAS,GAAGN,KAAK,CAACO,GAAN,IAAa,EAA/B;AAEA,QAAMC,cAAc,GAAGX,MAAM,CAAC,KAAD,CAA7B,CANgC,CAQhC;;AACA,MAAI,CAACW,cAAc,CAACC,OAApB,EAA6B;AAC3BT,IAAAA,KAAK,CAACU,YAAN,CAAmBC,QAAnB;AACAH,IAAAA,cAAc,CAACC,OAAf,GAAyB,IAAzB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASE,QAAT,GAAoB;AAClB,UAAM,CAACC,OAAD,EAAUC,aAAV,IAA2BC,0BAA0B,CAACb,OAAD,CAA3D;AAEA,QAAIY,aAAa,CAACE,YAAlB,EACE,OAAO;AAAEC,MAAAA,OAAO,EAAG,GAAEU,SAAU,eAAxB;AAAwCd,MAAAA;AAAxC,KAAP;AACF,QAAIC,aAAa,CAACc,YAAlB,EACE,OAAO;AAAEX,MAAAA,OAAO,EAAG,GAAEU,SAAU,oBAAxB;AAA6Cd,MAAAA;AAA7C,KAAP;AACF,QAAIC,aAAa,CAACI,QAAlB,EACE,OAAO;AACLD,MAAAA,OAAO,EAAG,GAAEU,SAAU,qBAAoBtB,SAAU,mBAD/C;AAELQ,MAAAA;AAFK,KAAP;AAIF,QAAIC,aAAa,CAACK,OAAlB,EACE,OAAO;AACLF,MAAAA,OAAO,EAAG,GAAEU,SAAU,kCAAiCpB,SAAU,mBAD5D;AAELM,MAAAA;AAFK,KAAP;AAIF,WAAO,IAAP;AACD;;AAED,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAO,QAAA,SAAS,EAAC,kBAAjB;AAAoC,QAAA,OAAO,EAAEX,OAA7C;AAAA,kBACGyB;AADH;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AACE,QAAA,SAAS,EAAC,qBADZ;AAEE,QAAA,EAAE,EAAEzB,OAFN;AAGE,QAAA,IAAI,EAAED,KAAK,CAACmB,IAHd;AAIE,QAAA,KAAK,EAAEnB,KAAK,CAACoB,KAJf;AAKE,QAAA,IAAI,EAAC,OALP;AAME,QAAA,QAAQ,EAAGC,CAAD,IAAOrB,KAAK,CAACsB,QAAN,CAAeD,CAAf,EAAkBrB,KAAK,CAACuB,KAAxB,CANnB;AAOE,QAAA,QAAQ,EAAEvB,KAAK,CAACwB,QAPlB;AAQE,QAAA,SAAS,EAAEpB,SARb;AASE,QAAA,SAAS,EAAEE;AATb;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAoBD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASsB,aAAT,CAAuB5B,KAAvB,EAA8B;AACnC,QAAM0B,SAAS,GAAG1B,KAAK,CAACE,KAAN,IAAe,UAAjC;AACA,QAAMD,OAAO,GAAI,cAAayB,SAAU,IAAG1B,KAAK,CAACG,QAAS,EAA1D;AACA,QAAMC,SAAS,GAAGJ,KAAK,CAACK,GAAxB;AACA,QAAMC,SAAS,GAAGN,KAAK,CAACO,GAAN,IAAa,EAA/B;AAEA,QAAMC,cAAc,GAAGX,MAAM,CAAC,KAAD,CAA7B,CANmC,CAQnC;;AACA,MAAI,CAACW,cAAc,CAACC,OAApB,EAA6B;AAC3BT,IAAAA,KAAK,CAACU,YAAN,CAAmBC,QAAnB;AACAH,IAAAA,cAAc,CAACC,OAAf,GAAyB,IAAzB;AACD;AAED;AACF;AACA;;;AACE,WAASE,QAAT,GAAoB;AAClB,UAAM,CAACC,OAAD,EAAUC,aAAV,IAA2BC,0BAA0B,CAACb,OAAD,CAA3D;AAEA,QAAIY,aAAa,CAACE,YAAlB,EACE,OAAO;AAAEC,MAAAA,OAAO,EAAG,GAAEU,SAAU,eAAxB;AAAwCd,MAAAA;AAAxC,KAAP;AACF,QAAIC,aAAa,CAACI,QAAlB,EACE,OAAO;AACLD,MAAAA,OAAO,EAAG,GAAEU,SAAU,qBAAoBtB,SAAU,mBAD/C;AAELQ,MAAAA;AAFK,KAAP;AAIF,QAAIC,aAAa,CAACK,OAAlB,EACE,OAAO;AACLF,MAAAA,OAAO,EAAG,GAAEU,SAAU,kCAAiCpB,SAAU,mBAD5D;AAELM,MAAAA;AAFK,KAAP;AAIF,WAAO,IAAP;AACD;;AAED,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,gCACE;AAAO,UAAA,SAAS,EAAC,sBAAjB;AAAwC,UAAA,OAAO,EAAEX,OAAjD;AAAA,oBACGyB;AADH;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA,iCACE;AACE,YAAA,SAAS,EAAC,cADZ;AAEE,YAAA,EAAE,EAAEzB,OAFN;AAGE,YAAA,IAAI,EAAED,KAAK,CAACmB,IAHd;AAIE,YAAA,KAAK,EAAEnB,KAAK,CAACoB,KAAN,IAAe,EAJxB;AAKE,YAAA,IAAI,EAAC,UALP;AAME,YAAA,QAAQ,EAAGC,CAAD,IAAOrB,KAAK,CAACsB,QAAN,CAAeD,CAAf,EAAkBrB,KAAK,CAACuB,KAAxB,CANnB;AAOE,YAAA,QAAQ,EAAE,IAPZ;AAQE,YAAA,SAAS,EAAEnB,SARb;AASE,YAAA,SAAS,EAAEE;AATb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAwBD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASQ,0BAAT,CAAoCe,SAApC,EAA+C;AAC7C,QAAMjB,OAAO,GAAGkB,QAAQ,CAACC,aAAT,CAAwB,QAAOF,SAAU,IAAzC,CAAhB;AACA,QAAMhB,aAAa,GAAGD,OAAO,CAACoB,QAA9B;AACA,SAAO,CAACpB,OAAD,EAAUC,aAAV,CAAP;AACD","sourcesContent":["import { useState, useRef, useEffect } from \"react\";\r\n\r\n/**\r\n * FormFields are meant to be used with the Form component.\r\n * They are a combination of a label and a corresponding input element of some kind.\r\n * They make up the fields of a Form component. Each FormField has its own\r\n * validator function that checks the validity of its input. FormField validators\r\n * are called by its parent Form. FormFields should be the children of a Form\r\n * component and should be initialied with an initial value prop. After first render,\r\n * the Form component will take control of the FormField's value state.\r\n *\r\n */\r\n\r\n/**\r\n * General text input field.\r\n *\r\n * @param {object} props\r\n * - label {string} FormField's label\r\n * - name {string} name for input element\r\n * - required? {boolean} whether this FormField is required or not\r\n * - min? {number} minimum number of characters\r\n * - max? {number} maximum number of characters\r\n */\r\nexport function TextField(props) {\r\n  const inputId = `form-field-${props.label}-${props.parentId}`;\r\n  const minLength = props.min;\r\n  const maxLength = props.max;\r\n\r\n  const validatorAdded = useRef(false);\r\n\r\n  //to ensure validator only gets added to parent Form once\r\n  if (!validatorAdded.current) {\r\n    props.addValidator(validate);\r\n    validatorAdded.current = true;\r\n  }\r\n\r\n  /**\r\n   * Checks the validity of input\r\n   */\r\n  function validate() {\r\n    const [element, validityState] = getElementAndValidityState(inputId);\r\n\r\n    if (validityState.valueMissing)\r\n      return { message: `${props.label} is required.`, element };\r\n    if (validityState.tooShort)\r\n      return {\r\n        message: `${props.label} must be at least ${minLength} characters long.`,\r\n        element,\r\n      };\r\n    if (validityState.tooLong)\r\n      return {\r\n        message: `${props.label} must be less than or equal to ${maxLength} characters long.`,\r\n        element,\r\n      };\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <label className=\"col-form-label\" htmlFor={inputId}>\r\n        {props.label}:{\" \"}\r\n      </label>\r\n      <input\r\n        id={inputId}\r\n        name={props.name}\r\n        value={props.value || \"\"}\r\n        onChange={(e) => props.onChange(e, props.index)}\r\n        required={props.required}\r\n        minLength={minLength}\r\n        maxLength={maxLength}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\n/**\r\n * Input field for emails.\r\n *\r\n * @param {object} props\r\n * - label? {string} FormField's label (default label is Email)\r\n * - name {string} name for input element\r\n * - required? {boolean} whether this FormField is required or not\r\n * - min? {number} minimum number of characters\r\n * - max? {number} maximum number of characters\r\n */\r\nexport function EmailField(props) {\r\n  const labelName = props.label || \"Email\";\r\n  const inputId = `form-field-${labelName}-${props.parentId}`;\r\n  const minLength = props.min;\r\n  const maxLength = props.max || 50;\r\n\r\n  const validatorAdded = useRef(false);\r\n\r\n  //to ensure validator only gets added to parent Form once\r\n  if (!validatorAdded.current) {\r\n    props.addValidator(validate);\r\n    validatorAdded.current = true;\r\n  }\r\n\r\n  /**\r\n   * Checks the validity of input.\r\n   *\r\n   * @returns {object} if input is valid, returns null. Otherwise, returns an object\r\n   * containg information about the error\r\n   * {message: error message, element: reference to HtmlElement that contains error}\r\n   */\r\n  function validate() {\r\n    const [element, validityState] = getElementAndValidityState(inputId);\r\n\r\n    if (validityState.valueMissing)\r\n      return { message: `${labelName} is required.`, element };\r\n    if (validityState.typeMismatch)\r\n      return { message: `${labelName} must be an email.`, element };\r\n    if (validityState.tooShort)\r\n      return {\r\n        message: `${labelName} must be at least ${minLength} characters long.`,\r\n        element,\r\n      };\r\n    if (validityState.tooLong)\r\n      return {\r\n        message: `${labelName} must be less than or equal to ${maxLength} characters long.`,\r\n        element,\r\n      };\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <label className=\"form-label col-2\" htmlFor={inputId}>\r\n          {labelName}\r\n        </label>\r\n        <input\r\n          className=\"form-control col-10\"\r\n          id={inputId}\r\n          name={props.name}\r\n          value={props.value}\r\n          type=\"email\"\r\n          onChange={(e) => props.onChange(e, props.index)}\r\n          required={props.required}\r\n          minLength={minLength}\r\n          maxLength={maxLength}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\n/**\r\n * Input field for passwords. Input is always required.\r\n *\r\n * @param {object} props\r\n * - label? {string} FormField's label (default label is Password)\r\n * - name {string} name for input element\r\n * - min? {number} minimum number of characters\r\n */\r\nexport function PasswordField(props) {\r\n  const labelName = props.label || \"Password\";\r\n  const inputId = `form-field-${labelName}-${props.parentId}`;\r\n  const minLength = props.min;\r\n  const maxLength = props.max || 50;\r\n\r\n  const validatorAdded = useRef(false);\r\n\r\n  //to ensure validator only gets added to parent Form once\r\n  if (!validatorAdded.current) {\r\n    props.addValidator(validate);\r\n    validatorAdded.current = true;\r\n  }\r\n\r\n  /**\r\n   * Checks the validity of input\r\n   */\r\n  function validate() {\r\n    const [element, validityState] = getElementAndValidityState(inputId);\r\n\r\n    if (validityState.valueMissing)\r\n      return { message: `${labelName} is required.`, element };\r\n    if (validityState.tooShort)\r\n      return {\r\n        message: `${labelName} must be at least ${minLength} characters long.`,\r\n        element,\r\n      };\r\n    if (validityState.tooLong)\r\n      return {\r\n        message: `${labelName} must be less than or equal to ${maxLength} characters long.`,\r\n        element,\r\n      };\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container mb-3\">\r\n        <div className=\"row\">\r\n          <label className=\"col-form-label col-2\" htmlFor={inputId}>\r\n            {labelName}\r\n          </label>\r\n          <div className=\"col-10\">\r\n            <input\r\n              className=\"form-control\"\r\n              id={inputId}\r\n              name={props.name}\r\n              value={props.value || \"\"}\r\n              type=\"password\"\r\n              onChange={(e) => props.onChange(e, props.index)}\r\n              required={true}\r\n              minLength={minLength}\r\n              maxLength={maxLength}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\n/**\r\n * Convenience function that returns an HtmlElement and its ValidityState\r\n * object given an id.\r\n *\r\n * @param {string} elementId id of FormField's HtmlElement to validate\r\n * @returns {array} [HtmlElement, validityState]\r\n */\r\nfunction getElementAndValidityState(elementId) {\r\n  const element = document.querySelector(`[id='${elementId}']`);\r\n  const validityState = element.validity;\r\n  return [element, validityState];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}