{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\adnan\\\\web-dev\\\\my-game-page\\\\pages\\\\userPage.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef } from \"react\";\nimport Game from \"../components/Game\";\nimport GameSearchBox from \"../components/GameSearchBox\";\n/**\r\n *\r\n * The page that is displayed when\r\n * viewing a user's profile\r\n *\r\n * @param {object} props\r\n */\n\nexport var __N_SSP = true;\nexport default function UserPage(props) {\n  _s();\n\n  var _this = this;\n\n  /* setting state */\n  //the user's actual favorite games\n  var _useState = useState(props.games),\n      favoriteGames = _useState[0],\n      setFavoriteGames = _useState[1]; //the user's favorite game as currently displayed. these may differ\n  //from actual favorite games during editing\n\n\n  var _useState2 = useState(favoriteGames),\n      displayedFavoriteGames = _useState2[0],\n      setDisplayedFavoriteGames = _useState2[1]; //whether or not user is editing favorite games\n\n\n  var _useState3 = useState(false),\n      isEditing = _useState3[0],\n      setIsEditing = _useState3[1];\n\n  var _useState4 = useState(\"\"),\n      errorMessage = _useState4[0],\n      setErrorMessage = _useState4[1];\n  /**\r\n   * Called when a Game is dragged. Adds\r\n   * the Game's data-index attribute to\r\n   * DragEvent.dataTransfer to be used by\r\n   * dropGame() later on\r\n   *\r\n   * @param {DragEvent} e\r\n   */\n\n\n  function startDragGame(e) {\n    e.stopPropagation();\n    e.dataTransfer.setData(\"text/plain\", e.target.dataset.index);\n  } //dragover handler is needed to make element\n  //draggable\n\n\n  function dragOver(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    e.dataTransfer.dropEffect = \"move\";\n  }\n  /**\r\n   * The dragged game will be swapped with the game\r\n   * it's dropped on.\r\n   *\r\n   * @param {DragEvent} e\r\n   */\n\n\n  function dropGameOnGame(e) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    var newFaveGames = _toConsumableArray(displayedFavoriteGames);\n\n    var newGame = e.dataTransfer.getData(\"application/json\"); //index of game that was dropped on\n\n    var dropTarget = Number(e.target.dataset.index); //dataTransfer will contain a js object if the game being dragged\n    //is from search results, meaning a new game is being added\n    //to favorite games\n\n    if (newGame) {\n      var newGameAsObject = JSON.parse(newGame); //we replace elements as we go, eventually we an element to newFaveGames[newFaveGames.length]\n      //this increases the length and the loop goes on forever\n      //so we keep the length of the list before we start\n\n      var length = newFaveGames.length; //game to be added in\n\n      var holder = newGameAsObject;\n\n      for (var i = 0; i <= length; i++) {\n        if (newFaveGames[i] && newFaveGames[i].id === newGameAsObject.id) return; //start swapping from dropTarget onwards\n\n        if (i >= dropTarget) {\n          //put holder into the list, take what was there and put into holder\n          var temp = newFaveGames[i];\n          newFaveGames[i] = holder;\n          holder = temp;\n        }\n      }\n    } //if there is no js object, then the game being dragged is an already\n    //existing game so we just swap places\n    else {\n        //the game that was being dragged\n        var _draggedGame = Number(e.dataTransfer.getData(\"text/plain\"));\n\n        var _temp = newFaveGames[dropTarget];\n        newFaveGames[dropTarget] = newFaveGames[_draggedGame];\n        newFaveGames[_draggedGame] = _temp;\n      }\n\n    setDisplayedFavoriteGames(newFaveGames);\n  }\n  /**\r\n   * The dragged game will be added to the\r\n   * end of the list\r\n   *\r\n   * @param {DragEvent} e\r\n   */\n\n\n  function dropGameOnContainer(e) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    var newFaveGames = _toConsumableArray(displayedFavoriteGames);\n\n    var newGame = e.dataTransfer.getData(\"application/json\"); //dataTransfer will contain a js object if the game being dragged\n    //is from search results, meaning a new game is being added\n    //to favorite games\n\n    if (newGame) {\n      newFaveGames.push(JSON.parse(newGame));\n    } //if there is no js object, then the game being dragged is an already\n    //existing game. dragged game is added to the end and rest are shifted up\n    else {\n        var _newPos = e.dataTransfer.getData(\"text/plain\");\n\n        var _draggedGame2 = newFaveGames[_newPos]; //shift everything towards the front\n\n        for (; _newPos < newFaveGames.length; _newPos++) {\n          newFaveGames[_newPos] = newFaveGames[_newPos + 1];\n        }\n      } //add draggedGame back to the end\n\n\n    newFaveGames[newPos] = draggedGame;\n    setDisplayedFavoriteGames(newFaveGames);\n  }\n  /**\r\n   * Deletes a game from displayedFavoriteGames.\r\n   *\r\n   * @param {number} gameId the id of game to be deleted\r\n   */\n\n\n  function deleteGame(gameId) {\n    setDisplayedFavoriteGames(displayedFavoriteGames.filter(function (game) {\n      return game.id !== gameId;\n    }));\n  }\n  /**\r\n   * Called when editing is cancelled. Sets displayed favorite games\r\n   * to actual favorite games.\r\n   */\n\n\n  function rollbackChanges() {\n    setErrorMessage(\"\");\n    setDisplayedFavoriteGames(favoriteGames);\n    setIsEditing(false);\n  }\n\n  function saveChanges() {\n    return _saveChanges.apply(this, arguments);\n  } //get a list of Game components corresponding to favorite games\n  //each is given a data-index attribute that corresponds to\n  //what position in the list they are. this will be used during\n  //editing favorite games.\n\n\n  function _saveChanges() {\n    _saveChanges = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var faveGameIds, response, error;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setErrorMessage(\"\");\n              faveGameIds = displayedFavoriteGames.map(function (game) {\n                return game.id;\n              });\n              _context.next = 4;\n              return fetch(\"http://localhost:3000/api/favorites/\".concat(props.id), {\n                method: \"PUT\",\n                credentials: \"same-origin\",\n                body: JSON.stringify(faveGameIds),\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                }\n              });\n\n            case 4:\n              response = _context.sent;\n\n              if (!response.ok) {\n                _context.next = 10;\n                break;\n              }\n\n              setIsEditing(false);\n              setFavoriteGames(displayedFavoriteGames);\n              _context.next = 14;\n              break;\n\n            case 10:\n              _context.next = 12;\n              return response.json();\n\n            case 12:\n              error = _context.sent;\n              setErrorMessage(error.message);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _saveChanges.apply(this, arguments);\n  }\n\n  var favoriteGamesList = displayedFavoriteGames.map(function (game, index) {\n    return /*#__PURE__*/_jsxDEV(Game, {\n      gameId: game.id,\n      gameName: game.name,\n      gameCoverUrl: game.coverurl,\n      isEditing: isEditing,\n      \"data-index\": \"\" + index,\n      draggable: isEditing + \"\",\n      onDragStart: isEditing ? startDragGame : undefined,\n      onDragOver: isEditing ? dragOver : undefined,\n      onDrop: isEditing ? dropGameOnGame : undefined,\n      onDelete: deleteGame\n    }, game.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 5\n    }, _this);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: props.displayName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"favorite-games-list\",\n        children: favoriteGamesList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this), props.id && (!isEditing ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: function onClick() {\n          return setIsEditing(true);\n        },\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: rollbackChanges,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: saveChanges,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)), errorMessage && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), isEditing && /*#__PURE__*/_jsxDEV(GameSearchBox, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true);\n}\n\n_s(UserPage, \"22CiGVluGG7G1b0clOaHSp1dmwc=\");\n\n_c = UserPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserPage\");","map":{"version":3,"sources":["C:/Users/adnan/web-dev/my-game-page/pages/userPage.js"],"names":["useState","useRef","Game","GameSearchBox","UserPage","props","games","favoriteGames","setFavoriteGames","displayedFavoriteGames","setDisplayedFavoriteGames","isEditing","setIsEditing","errorMessage","setErrorMessage","startDragGame","e","stopPropagation","dataTransfer","setData","target","dataset","index","dragOver","preventDefault","dropEffect","dropGameOnGame","newFaveGames","newGame","getData","dropTarget","Number","newGameAsObject","JSON","parse","length","holder","i","id","temp","draggedGame","dropGameOnContainer","push","newPos","deleteGame","gameId","filter","game","rollbackChanges","saveChanges","faveGameIds","map","fetch","method","credentials","body","stringify","headers","response","ok","json","error","message","favoriteGamesList","name","coverurl","undefined","displayName"],"mappings":"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","sourcesContent":["import { useState, useRef } from \"react\";\r\nimport Game from \"../components/Game\";\r\nimport GameSearchBox from \"../components/GameSearchBox\";\r\n\r\n/**\r\n *\r\n * The page that is displayed when\r\n * viewing a user's profile\r\n *\r\n * @param {object} props\r\n */\r\n\r\nexport default function UserPage(props) {\r\n  /* setting state */\r\n  //the user's actual favorite games\r\n  const [favoriteGames, setFavoriteGames] = useState(props.games);\r\n  //the user's favorite game as currently displayed. these may differ\r\n  //from actual favorite games during editing\r\n  const [displayedFavoriteGames, setDisplayedFavoriteGames] = useState(\r\n    favoriteGames\r\n  );\r\n  //whether or not user is editing favorite games\r\n  const [isEditing, setIsEditing] = useState(false);\r\n\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  /**\r\n   * Called when a Game is dragged. Adds\r\n   * the Game's data-index attribute to\r\n   * DragEvent.dataTransfer to be used by\r\n   * dropGame() later on\r\n   *\r\n   * @param {DragEvent} e\r\n   */\r\n  function startDragGame(e) {\r\n    e.stopPropagation();\r\n    e.dataTransfer.setData(\"text/plain\", e.target.dataset.index);\r\n  }\r\n\r\n  //dragover handler is needed to make element\r\n  //draggable\r\n  function dragOver(e) {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    e.dataTransfer.dropEffect = \"move\";\r\n  }\r\n\r\n  /**\r\n   * The dragged game will be swapped with the game\r\n   * it's dropped on.\r\n   *\r\n   * @param {DragEvent} e\r\n   */\r\n  function dropGameOnGame(e) {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    const newFaveGames = [...displayedFavoriteGames];\r\n    const newGame = e.dataTransfer.getData(\"application/json\");\r\n    //index of game that was dropped on\r\n    const dropTarget = Number(e.target.dataset.index);\r\n    //dataTransfer will contain a js object if the game being dragged\r\n    //is from search results, meaning a new game is being added\r\n    //to favorite games\r\n    if (newGame) {\r\n      const newGameAsObject = JSON.parse(newGame);\r\n      //we replace elements as we go, eventually we an element to newFaveGames[newFaveGames.length]\r\n      //this increases the length and the loop goes on forever\r\n      //so we keep the length of the list before we start\r\n      const length = newFaveGames.length;\r\n      //game to be added in\r\n      let holder = newGameAsObject;\r\n      for (let i = 0; i <= length; i++) {\r\n        if (newFaveGames[i] && newFaveGames[i].id === newGameAsObject.id)\r\n          return;\r\n        //start swapping from dropTarget onwards\r\n        if (i >= dropTarget) {\r\n          //put holder into the list, take what was there and put into holder\r\n          const temp = newFaveGames[i];\r\n          newFaveGames[i] = holder;\r\n          holder = temp;\r\n        }\r\n      }\r\n    }\r\n    //if there is no js object, then the game being dragged is an already\r\n    //existing game so we just swap places\r\n    else {\r\n      //the game that was being dragged\r\n      const draggedGame = Number(e.dataTransfer.getData(\"text/plain\"));\r\n      const temp = newFaveGames[dropTarget];\r\n      newFaveGames[dropTarget] = newFaveGames[draggedGame];\r\n      newFaveGames[draggedGame] = temp;\r\n    }\r\n\r\n    setDisplayedFavoriteGames(newFaveGames);\r\n  }\r\n\r\n  /**\r\n   * The dragged game will be added to the\r\n   * end of the list\r\n   *\r\n   * @param {DragEvent} e\r\n   */\r\n  function dropGameOnContainer(e) {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    const newFaveGames = [...displayedFavoriteGames];\r\n    const newGame = e.dataTransfer.getData(\"application/json\");\r\n    //dataTransfer will contain a js object if the game being dragged\r\n    //is from search results, meaning a new game is being added\r\n    //to favorite games\r\n    if (newGame) {\r\n      newFaveGames.push(JSON.parse(newGame));\r\n    }\r\n    //if there is no js object, then the game being dragged is an already\r\n    //existing game. dragged game is added to the end and rest are shifted up\r\n    else {\r\n      let newPos = e.dataTransfer.getData(\"text/plain\");\r\n      let draggedGame = newFaveGames[newPos];\r\n      //shift everything towards the front\r\n      for (; newPos < newFaveGames.length; newPos++)\r\n        newFaveGames[newPos] = newFaveGames[newPos + 1];\r\n    }\r\n    //add draggedGame back to the end\r\n    newFaveGames[newPos] = draggedGame;\r\n\r\n    setDisplayedFavoriteGames(newFaveGames);\r\n  }\r\n\r\n  /**\r\n   * Deletes a game from displayedFavoriteGames.\r\n   *\r\n   * @param {number} gameId the id of game to be deleted\r\n   */\r\n  function deleteGame(gameId) {\r\n    setDisplayedFavoriteGames(\r\n      displayedFavoriteGames.filter((game) => game.id !== gameId)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Called when editing is cancelled. Sets displayed favorite games\r\n   * to actual favorite games.\r\n   */\r\n  function rollbackChanges() {\r\n    setErrorMessage(\"\");\r\n    setDisplayedFavoriteGames(favoriteGames);\r\n    setIsEditing(false);\r\n  }\r\n\r\n  async function saveChanges() {\r\n    setErrorMessage(\"\");\r\n    const faveGameIds = displayedFavoriteGames.map((game) => game.id);\r\n\r\n    const response = await fetch(\r\n      `http://localhost:3000/api/favorites/${props.id}`,\r\n      {\r\n        method: \"PUT\",\r\n        credentials: \"same-origin\",\r\n        body: JSON.stringify(faveGameIds),\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      }\r\n    );\r\n    if (response.ok) {\r\n      setIsEditing(false);\r\n      setFavoriteGames(displayedFavoriteGames);\r\n    } else {\r\n      const error = await response.json();\r\n      setErrorMessage(error.message);\r\n    }\r\n  }\r\n\r\n  //get a list of Game components corresponding to favorite games\r\n  //each is given a data-index attribute that corresponds to\r\n  //what position in the list they are. this will be used during\r\n  //editing favorite games.\r\n  const favoriteGamesList = displayedFavoriteGames.map((game, index) => (\r\n    <Game\r\n      key={game.id}\r\n      gameId={game.id}\r\n      gameName={game.name}\r\n      gameCoverUrl={game.coverurl}\r\n      isEditing={isEditing}\r\n      data-index={\"\" + index}\r\n      draggable={isEditing + \"\"}\r\n      onDragStart={isEditing ? startDragGame : undefined}\r\n      onDragOver={isEditing ? dragOver : undefined}\r\n      onDrop={isEditing ? dropGameOnGame : undefined}\r\n      onDelete={deleteGame}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      <h1>{props.displayName}</h1>\r\n      <div>\r\n        <div className=\"favorite-games-list\">{favoriteGamesList}</div>\r\n        {props.id &&\r\n          (!isEditing ? (\r\n            <button onClick={() => setIsEditing(true)}>Edit</button>\r\n          ) : (\r\n            <>\r\n              <button onClick={rollbackChanges}>Cancel</button>\r\n              <button onClick={saveChanges}>Save</button>\r\n            </>\r\n          ))}\r\n        {errorMessage && <span>{errorMessage}</span>}\r\n      </div>\r\n      {isEditing && <GameSearchBox />}\r\n    </>\r\n  );\r\n}\r\n\r\nexport function getServerSideProps(context) {\r\n  return {\r\n    props: JSON.parse(JSON.stringify(context.res.locals)),\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}