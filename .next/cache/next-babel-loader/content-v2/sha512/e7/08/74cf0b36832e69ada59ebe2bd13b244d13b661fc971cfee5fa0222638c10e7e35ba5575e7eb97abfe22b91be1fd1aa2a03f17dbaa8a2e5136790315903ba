{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\adnan\\\\web-dev\\\\my-game-page\\\\pages\\\\userPage.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef } from \"react\";\nimport Game from \"../components/Game\";\n/**\r\n *\r\n * The page that is displayed when\r\n * viewing a user's profile\r\n *\r\n * @param {object} props\r\n */\n\nexport var __N_SSP = true;\nexport default function UserPage(props) {\n  _s();\n\n  var _this = this;\n\n  /* setting state */\n  //the user's actual favorite games\n  var _useState = useState(props.games),\n      favoriteGames = _useState[0],\n      setFavoriteGames = _useState[1]; //the user's favorite game as currently displayed (as in, while making changes. this\n  //list will differ from favoriteGames)\n\n\n  var _useState2 = useState(favoriteGames),\n      currFavoriteGames = _useState2[0],\n      setCurrFavoriteGames = _useState2[1]; //whether or not user is editing favorite games\n\n\n  var _useState3 = useState(false),\n      isEditing = _useState3[0],\n      setIsEditing = _useState3[1];\n\n  function startDragGame(e) {\n    e.stopPropagation();\n    e.dataTransfer.setData(\"text/plain\", e.target.dataset.index);\n  }\n\n  function dragOver(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    e.dataTransfer.dropEffect = \"move\";\n  }\n\n  function dropGame(e) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    var newFaveGames = _toConsumableArray(favoriteGames);\n\n    var i = Number(e.target.dataset.index);\n    var j = Number(e.dataTransfer.getData(\"text/plain\"));\n    var temp = newFaveGames[i];\n    newFaveGames[i] = newFaveGames[j];\n    newFaveGames[j] = temp;\n    setFavoriteGames(newFaveGames);\n  } //get a list of Game components corresponding to favorite games\n  //each is given a data-index attribute that corresponds to\n  //what position in the list they are. this will be used during\n  //editing favorite games.\n\n\n  var favoriteGamesList = favoriteGames.map(function (game, index) {\n    return /*#__PURE__*/_jsxDEV(Game, {\n      gameId: game.id,\n      gameName: game.name,\n      gameCoverUrl: game.coverurl,\n      isEditing: isEditing,\n      \"data-index\": \"\" + index,\n      draggable: \"true\",\n      onDragStart: isEditing && startDragGame,\n      onDragOver: isEditing && dragOver,\n      onDrop: isEditing && dropGame\n    }, game.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }, _this);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: props.displayName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"favorite-games-list\",\n      children: favoriteGamesList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), props.id && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: function onClick() {\n        return setIsEditing(true);\n      },\n      children: \"Edit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 20\n    }, this), isEditing && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: function onClick() {\n        return setIsEditing(false);\n      },\n      children: \"Cancel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true);\n}\n\n_s(UserPage, \"Fa1uapSZAm248/2C+8qSJhU1pm0=\");\n\n_c = UserPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserPage\");","map":{"version":3,"sources":["C:/Users/adnan/web-dev/my-game-page/pages/userPage.js"],"names":["useState","useRef","Game","UserPage","props","games","favoriteGames","setFavoriteGames","currFavoriteGames","setCurrFavoriteGames","isEditing","setIsEditing","startDragGame","e","stopPropagation","dataTransfer","setData","target","dataset","index","dragOver","preventDefault","dropEffect","dropGame","newFaveGames","i","Number","j","getData","temp","favoriteGamesList","map","game","id","name","coverurl","displayName"],"mappings":"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","sourcesContent":["import { useState, useRef } from \"react\";\r\nimport Game from \"../components/Game\";\r\n\r\n/**\r\n *\r\n * The page that is displayed when\r\n * viewing a user's profile\r\n *\r\n * @param {object} props\r\n */\r\n\r\nexport default function UserPage(props) {\r\n  /* setting state */\r\n  //the user's actual favorite games\r\n  const [favoriteGames, setFavoriteGames] = useState(props.games);\r\n  //the user's favorite game as currently displayed (as in, while making changes. this\r\n  //list will differ from favoriteGames)\r\n  const [currFavoriteGames, setCurrFavoriteGames] = useState(favoriteGames);\r\n  //whether or not user is editing favorite games\r\n  const [isEditing, setIsEditing] = useState(false);\r\n\r\n  function startDragGame(e) {\r\n    e.stopPropagation();\r\n    e.dataTransfer.setData(\"text/plain\", e.target.dataset.index);\r\n  }\r\n\r\n  function dragOver(e) {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    e.dataTransfer.dropEffect = \"move\";\r\n  }\r\n\r\n  function dropGame(e) {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    const newFaveGames = [...favoriteGames];\r\n    const i = Number(e.target.dataset.index);\r\n    const j = Number(e.dataTransfer.getData(\"text/plain\"));\r\n    const temp = newFaveGames[i];\r\n    newFaveGames[i] = newFaveGames[j];\r\n    newFaveGames[j] = temp;\r\n    setFavoriteGames(newFaveGames);\r\n  }\r\n\r\n  //get a list of Game components corresponding to favorite games\r\n  //each is given a data-index attribute that corresponds to\r\n  //what position in the list they are. this will be used during\r\n  //editing favorite games.\r\n  const favoriteGamesList = favoriteGames.map((game, index) => (\r\n    <Game\r\n      key={game.id}\r\n      gameId={game.id}\r\n      gameName={game.name}\r\n      gameCoverUrl={game.coverurl}\r\n      isEditing={isEditing}\r\n      data-index={\"\" + index}\r\n      draggable=\"true\"\r\n      onDragStart={isEditing && startDragGame}\r\n      onDragOver={isEditing && dragOver}\r\n      onDrop={isEditing && dropGame}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      <h1>{props.displayName}</h1>\r\n      <div className=\"favorite-games-list\">{favoriteGamesList}</div>\r\n      {props.id && <button onClick={() => setIsEditing(true)}>Edit</button>}\r\n      {isEditing && <button onClick={() => setIsEditing(false)}>Cancel</button>}\r\n    </>\r\n  );\r\n}\r\n\r\nexport function getServerSideProps(context) {\r\n  return {\r\n    props: JSON.parse(JSON.stringify(context.res.locals)),\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}