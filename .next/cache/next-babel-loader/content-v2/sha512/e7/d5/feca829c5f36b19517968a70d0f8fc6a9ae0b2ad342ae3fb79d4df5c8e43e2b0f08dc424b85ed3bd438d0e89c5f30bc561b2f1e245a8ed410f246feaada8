{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\";\n/**\r\n * FormFields are meant to be used with the Form component.\r\n * They are a combination of a label and a corresponding input element of some kind.\r\n * They make up the fields of a Form component. Each FormField has its own\r\n * validator function that checks the validity of its input. FormField validators\r\n * are called by its parent Form. FormFields should be the children of a Form\r\n * component and should be initialied with an initial value prop. After first render,\r\n * the Form component will take control of the FormField's value state.\r\n *\r\n */\n\n/**\r\n * Common layout template that FormFields use\r\n * @param {object} props expected props:\r\n * - groupClass {str} css class for the form-group containing the input\r\n * - children:\r\n * - FormField's control\r\n *\r\n */\n\nfunction FormFieldTemplate(props) {\n  var children = React.Children.toArray(props.children); //preserve existing css classes + add bootstrap classes\n\n  var control = /*#__PURE__*/React.cloneElement(children[0], {\n    className: (children[0].className || \"\") + \" form-control \".concat(props.inline ? \"w-100\" : \"w-75\")\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(!props.inline && \"form-group\", \" m-3 \").concat(props.groupClass)\n  }, control);\n} //dont use the ado vacation/timeoff for holiday just dont put any time\n\n/**\r\n * General text input field.\r\n *\r\n * @param {object} props\r\n * - label {string} FormField's label\r\n * - name {string} name for input element\r\n * - required? {boolean} whether this FormField is required or not\r\n * - min? {number} minimum number of characters\r\n * - max? {number} maximum number of characters\r\n */\n\n\n_c = FormFieldTemplate;\nexport function TextField(props) {\n  _s();\n\n  var inputId = \"form-field-\".concat(props.label, \"-\").concat(props.parentId);\n  var minLength = props.min;\n  var maxLength = props.max;\n  var validatorAdded = useRef(false); //reference to input html element\n\n  var inputField = useRef(undefined); //to ensure validator only gets added to parent Form once\n\n  if (!validatorAdded.current) {\n    props.addValidator(validate);\n    validatorAdded.current = true;\n  }\n  /**\r\n   * Checks the validity of input\r\n   */\n\n\n  function validate() {\n    var element = inputField.current;\n    var validityState = element.validity;\n    if (validityState.valueMissing) return {\n      message: \"\".concat(props.label, \" is required.\"),\n      element: element\n    };\n    if (validityState.tooShort) return {\n      message: \"\".concat(props.label, \" must be at least \").concat(minLength, \" characters long.\"),\n      element: element\n    };\n    if (validityState.tooLong) return {\n      message: \"\".concat(props.label, \" must be less than or equal to \").concat(maxLength, \" characters long.\"),\n      element: element\n    };\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(FormFieldTemplate, {\n    groupClass: props.groupClass\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    id: inputId,\n    name: props.name,\n    value: props.value || \"\",\n    onChange: function onChange(e) {\n      return props.onChange(e, props.index);\n    },\n    required: props.required,\n    minLength: minLength,\n    maxLength: maxLength,\n    placeholder: props.label,\n    ref: inputField\n  }));\n}\n/**\r\n * Input field for emails.\r\n *\r\n * @param {object} props\r\n * - label? {string} FormField's label (default label is Email)\r\n * - name {string} name for input element\r\n * - required? {boolean} whether this FormField is required or not\r\n * - min? {number} minimum number of characters\r\n * - max? {number} maximum number of characters\r\n */\n\n_s(TextField, \"eQG2hQMkdONxQmUA5JgMpWam8LM=\");\n\n_c2 = TextField;\nexport function EmailField(props) {\n  _s2();\n\n  var labelName = props.label || \"Email\";\n  var inputId = \"form-field-\".concat(labelName, \"-\").concat(props.parentId);\n  var minLength = props.min;\n  var maxLength = props.max || 50;\n  var validatorAdded = useRef(false); //reference to input html element\n\n  var inputField = useRef(undefined); //to ensure validator only gets added to parent Form once\n\n  if (!validatorAdded.current) {\n    props.addValidator(validate);\n    validatorAdded.current = true;\n  }\n  /**\r\n   * Checks the validity of input.\r\n   *\r\n   * @returns {object} if input is valid, returns null. Otherwise, returns an object\r\n   * containg information about the error\r\n   * {message: error message, element: reference to HtmlElement that contains error}\r\n   */\n\n\n  function validate() {\n    var element = inputField.current;\n    var validityState = element.validity;\n    if (validityState.valueMissing) return {\n      message: \"\".concat(labelName, \" is required.\"),\n      element: element\n    };\n    if (validityState.typeMismatch) return {\n      message: \"\".concat(labelName, \" must be an email.\"),\n      element: element\n    };\n    if (validityState.tooShort) return {\n      message: \"\".concat(labelName, \" must be at least \").concat(minLength, \" characters long.\"),\n      element: element\n    };\n    if (validityState.tooLong) return {\n      message: \"\".concat(labelName, \" must be less than or equal to \").concat(maxLength, \" characters long.\"),\n      element: element\n    };\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(FormFieldTemplate, {\n    groupClass: props.groupClass\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    id: inputId,\n    name: props.name,\n    value: props.value,\n    type: \"email\",\n    onChange: function onChange(e) {\n      return props.onChange(e, props.index);\n    },\n    required: props.required,\n    minLength: minLength,\n    maxLength: maxLength,\n    placeholder: labelName,\n    ref: inputField\n  }));\n}\n/**\r\n * Input field for passwords. Input is always required.\r\n *\r\n * @param {object} props\r\n * - label? {string} FormField's label (default label is Password)\r\n * - name {string} name for input element\r\n * - min? {number} minimum number of characters\r\n */\n\n_s2(EmailField, \"eQG2hQMkdONxQmUA5JgMpWam8LM=\");\n\n_c3 = EmailField;\nexport function PasswordField(props) {\n  _s3();\n\n  var labelName = props.label || \"Password\";\n  var inputId = \"form-field-\".concat(labelName, \"-\").concat(props.parentId);\n  var minLength = props.min;\n  var maxLength = props.max || 50;\n  var validatorAdded = useRef(false); //reference to input html element\n\n  var inputField = useRef(undefined); //to ensure validator only gets added to parent Form once\n\n  if (!validatorAdded.current) {\n    props.addValidator(validate);\n    validatorAdded.current = true;\n  }\n  /**\r\n   * Checks the validity of input\r\n   */\n\n\n  function validate() {\n    var element = inputField.current;\n    var validityState = element.validity;\n    if (validityState.valueMissing) return {\n      message: \"\".concat(labelName, \" is required.\"),\n      element: element\n    };\n    if (validityState.tooShort) return {\n      message: \"\".concat(labelName, \" must be at least \").concat(minLength, \" characters long.\"),\n      element: element\n    };\n    if (validityState.tooLong) return {\n      message: \"\".concat(labelName, \" must be less than or equal to \").concat(maxLength, \" characters long.\"),\n      element: element\n    };\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(FormFieldTemplate, {\n    groupClass: props.groupClass\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    id: inputId,\n    name: props.name,\n    value: props.value || \"\",\n    type: \"password\",\n    onChange: function onChange(e) {\n      return props.onChange(e, props.index);\n    },\n    required: true,\n    minLength: minLength,\n    maxLength: maxLength,\n    placeholder: labelName,\n    ref: inputField\n  }));\n}\n/**\r\n * Hidden input field\r\n *\r\n * @param {object} props\r\n * - label {string} FormField's label (not visible, just for naming purposes)\r\n * - name {string} name for input element\r\n * - value {string} input's value\r\n */\n\n_s3(PasswordField, \"eQG2hQMkdONxQmUA5JgMpWam8LM=\");\n\n_c4 = PasswordField;\nexport function HiddenField(props) {\n  _s4();\n\n  var inputId = \"form-field-\".concat(props.label, \"-\").concat(props.parentId);\n  var validatorAdded = useRef(false); //reference to input html element\n\n  var inputField = useRef(undefined); //to ensure validator only gets added to parent Form once\n\n  if (!validatorAdded.current) {\n    props.addValidator(validate);\n    validatorAdded.current = true;\n  }\n  /**\r\n   * Checks the validity of input\r\n   */\n\n\n  function validate() {\n    //always valid\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(FormFieldTemplate, {\n    groupClass: props.groupClass\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    id: inputId,\n    name: props.name,\n    value: props.value,\n    hidden: true,\n    readOnly: true,\n    ref: inputField\n  }));\n}\n\n_s4(HiddenField, \"eQG2hQMkdONxQmUA5JgMpWam8LM=\");\n\n_c5 = HiddenField;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"FormFieldTemplate\");\n$RefreshReg$(_c2, \"TextField\");\n$RefreshReg$(_c3, \"EmailField\");\n$RefreshReg$(_c4, \"PasswordField\");\n$RefreshReg$(_c5, \"HiddenField\");","map":{"version":3,"sources":["C:/Users/adnan/web-dev/my-game-page/components/FormFields.js"],"names":["React","useState","useRef","useEffect","FormFieldTemplate","props","children","Children","toArray","control","cloneElement","className","inline","groupClass","TextField","inputId","label","parentId","minLength","min","maxLength","max","validatorAdded","inputField","undefined","current","addValidator","validate","element","validityState","validity","valueMissing","message","tooShort","tooLong","name","value","e","onChange","index","required","EmailField","labelName","typeMismatch","PasswordField","HiddenField"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAChC,MAAMC,QAAQ,GAAGN,KAAK,CAACO,QAAN,CAAeC,OAAf,CAAuBH,KAAK,CAACC,QAA7B,CAAjB,CADgC,CAEhC;;AACA,MAAMG,OAAO,gBAAGT,KAAK,CAACU,YAAN,CAAmBJ,QAAQ,CAAC,CAAD,CAA3B,EAAgC;AAC9CK,IAAAA,SAAS,EACP,CAACL,QAAQ,CAAC,CAAD,CAAR,CAAYK,SAAZ,IAAyB,EAA1B,4BACiBN,KAAK,CAACO,MAAN,GAAe,OAAf,GAAyB,MAD1C;AAF4C,GAAhC,CAAhB;AAMA,sBACE;AAAK,IAAA,SAAS,YAAK,CAACP,KAAK,CAACO,MAAP,IAAiB,YAAtB,kBAA0CP,KAAK,CAACQ,UAAhD;AAAd,KACGJ,OADH,CADF;AAKD,C,CAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;KA3BSL,iB;AA4BT,OAAO,SAASU,SAAT,CAAmBT,KAAnB,EAA0B;AAAA;;AAC/B,MAAMU,OAAO,wBAAiBV,KAAK,CAACW,KAAvB,cAAgCX,KAAK,CAACY,QAAtC,CAAb;AACA,MAAMC,SAAS,GAAGb,KAAK,CAACc,GAAxB;AACA,MAAMC,SAAS,GAAGf,KAAK,CAACgB,GAAxB;AACA,MAAMC,cAAc,GAAGpB,MAAM,CAAC,KAAD,CAA7B,CAJ+B,CAK/B;;AACA,MAAMqB,UAAU,GAAGrB,MAAM,CAACsB,SAAD,CAAzB,CAN+B,CAQ/B;;AACA,MAAI,CAACF,cAAc,CAACG,OAApB,EAA6B;AAC3BpB,IAAAA,KAAK,CAACqB,YAAN,CAAmBC,QAAnB;AACAL,IAAAA,cAAc,CAACG,OAAf,GAAyB,IAAzB;AACD;AAED;AACF;AACA;;;AACE,WAASE,QAAT,GAAoB;AAClB,QAAMC,OAAO,GAAGL,UAAU,CAACE,OAA3B;AACA,QAAMI,aAAa,GAAGD,OAAO,CAACE,QAA9B;AAEA,QAAID,aAAa,CAACE,YAAlB,EACE,OAAO;AAAEC,MAAAA,OAAO,YAAK3B,KAAK,CAACW,KAAX,kBAAT;AAA0CY,MAAAA,OAAO,EAAPA;AAA1C,KAAP;AACF,QAAIC,aAAa,CAACI,QAAlB,EACE,OAAO;AACLD,MAAAA,OAAO,YAAK3B,KAAK,CAACW,KAAX,+BAAqCE,SAArC,sBADF;AAELU,MAAAA,OAAO,EAAPA;AAFK,KAAP;AAIF,QAAIC,aAAa,CAACK,OAAlB,EACE,OAAO;AACLF,MAAAA,OAAO,YAAK3B,KAAK,CAACW,KAAX,4CAAkDI,SAAlD,sBADF;AAELQ,MAAAA,OAAO,EAAPA;AAFK,KAAP;AAIF,WAAO,IAAP;AACD;;AAED,sBACE,oBAAC,iBAAD;AAAmB,IAAA,UAAU,EAAEvB,KAAK,CAACQ;AAArC,kBACE;AACE,IAAA,EAAE,EAAEE,OADN;AAEE,IAAA,IAAI,EAAEV,KAAK,CAAC8B,IAFd;AAGE,IAAA,KAAK,EAAE9B,KAAK,CAAC+B,KAAN,IAAe,EAHxB;AAIE,IAAA,QAAQ,EAAE,kBAACC,CAAD;AAAA,aAAOhC,KAAK,CAACiC,QAAN,CAAeD,CAAf,EAAkBhC,KAAK,CAACkC,KAAxB,CAAP;AAAA,KAJZ;AAKE,IAAA,QAAQ,EAAElC,KAAK,CAACmC,QALlB;AAME,IAAA,SAAS,EAAEtB,SANb;AAOE,IAAA,SAAS,EAAEE,SAPb;AAQE,IAAA,WAAW,EAAEf,KAAK,CAACW,KARrB;AASE,IAAA,GAAG,EAAEO;AATP,IADF,CADF;AAeD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GA9DgBT,S;;MAAAA,S;AA+DhB,OAAO,SAAS2B,UAAT,CAAoBpC,KAApB,EAA2B;AAAA;;AAChC,MAAMqC,SAAS,GAAGrC,KAAK,CAACW,KAAN,IAAe,OAAjC;AACA,MAAMD,OAAO,wBAAiB2B,SAAjB,cAA8BrC,KAAK,CAACY,QAApC,CAAb;AACA,MAAMC,SAAS,GAAGb,KAAK,CAACc,GAAxB;AACA,MAAMC,SAAS,GAAGf,KAAK,CAACgB,GAAN,IAAa,EAA/B;AAEA,MAAMC,cAAc,GAAGpB,MAAM,CAAC,KAAD,CAA7B,CANgC,CAOhC;;AACA,MAAMqB,UAAU,GAAGrB,MAAM,CAACsB,SAAD,CAAzB,CARgC,CAUhC;;AACA,MAAI,CAACF,cAAc,CAACG,OAApB,EAA6B;AAC3BpB,IAAAA,KAAK,CAACqB,YAAN,CAAmBC,QAAnB;AACAL,IAAAA,cAAc,CAACG,OAAf,GAAyB,IAAzB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASE,QAAT,GAAoB;AAClB,QAAMC,OAAO,GAAGL,UAAU,CAACE,OAA3B;AACA,QAAMI,aAAa,GAAGD,OAAO,CAACE,QAA9B;AAEA,QAAID,aAAa,CAACE,YAAlB,EACE,OAAO;AAAEC,MAAAA,OAAO,YAAKU,SAAL,kBAAT;AAAwCd,MAAAA,OAAO,EAAPA;AAAxC,KAAP;AACF,QAAIC,aAAa,CAACc,YAAlB,EACE,OAAO;AAAEX,MAAAA,OAAO,YAAKU,SAAL,uBAAT;AAA6Cd,MAAAA,OAAO,EAAPA;AAA7C,KAAP;AACF,QAAIC,aAAa,CAACI,QAAlB,EACE,OAAO;AACLD,MAAAA,OAAO,YAAKU,SAAL,+BAAmCxB,SAAnC,sBADF;AAELU,MAAAA,OAAO,EAAPA;AAFK,KAAP;AAIF,QAAIC,aAAa,CAACK,OAAlB,EACE,OAAO;AACLF,MAAAA,OAAO,YAAKU,SAAL,4CAAgDtB,SAAhD,sBADF;AAELQ,MAAAA,OAAO,EAAPA;AAFK,KAAP;AAIF,WAAO,IAAP;AACD;;AAED,sBACE,oBAAC,iBAAD;AAAmB,IAAA,UAAU,EAAEvB,KAAK,CAACQ;AAArC,kBACE;AACE,IAAA,EAAE,EAAEE,OADN;AAEE,IAAA,IAAI,EAAEV,KAAK,CAAC8B,IAFd;AAGE,IAAA,KAAK,EAAE9B,KAAK,CAAC+B,KAHf;AAIE,IAAA,IAAI,EAAC,OAJP;AAKE,IAAA,QAAQ,EAAE,kBAACC,CAAD;AAAA,aAAOhC,KAAK,CAACiC,QAAN,CAAeD,CAAf,EAAkBhC,KAAK,CAACkC,KAAxB,CAAP;AAAA,KALZ;AAME,IAAA,QAAQ,EAAElC,KAAK,CAACmC,QANlB;AAOE,IAAA,SAAS,EAAEtB,SAPb;AAQE,IAAA,SAAS,EAAEE,SARb;AASE,IAAA,WAAW,EAAEsB,SATf;AAUE,IAAA,GAAG,EAAEnB;AAVP,IADF,CADF;AAgBD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IArEgBkB,U;;MAAAA,U;AAsEhB,OAAO,SAASG,aAAT,CAAuBvC,KAAvB,EAA8B;AAAA;;AACnC,MAAMqC,SAAS,GAAGrC,KAAK,CAACW,KAAN,IAAe,UAAjC;AACA,MAAMD,OAAO,wBAAiB2B,SAAjB,cAA8BrC,KAAK,CAACY,QAApC,CAAb;AACA,MAAMC,SAAS,GAAGb,KAAK,CAACc,GAAxB;AACA,MAAMC,SAAS,GAAGf,KAAK,CAACgB,GAAN,IAAa,EAA/B;AAEA,MAAMC,cAAc,GAAGpB,MAAM,CAAC,KAAD,CAA7B,CANmC,CAOnC;;AACA,MAAMqB,UAAU,GAAGrB,MAAM,CAACsB,SAAD,CAAzB,CARmC,CAUnC;;AACA,MAAI,CAACF,cAAc,CAACG,OAApB,EAA6B;AAC3BpB,IAAAA,KAAK,CAACqB,YAAN,CAAmBC,QAAnB;AACAL,IAAAA,cAAc,CAACG,OAAf,GAAyB,IAAzB;AACD;AAED;AACF;AACA;;;AACE,WAASE,QAAT,GAAoB;AAClB,QAAMC,OAAO,GAAGL,UAAU,CAACE,OAA3B;AACA,QAAMI,aAAa,GAAGD,OAAO,CAACE,QAA9B;AAEA,QAAID,aAAa,CAACE,YAAlB,EACE,OAAO;AAAEC,MAAAA,OAAO,YAAKU,SAAL,kBAAT;AAAwCd,MAAAA,OAAO,EAAPA;AAAxC,KAAP;AACF,QAAIC,aAAa,CAACI,QAAlB,EACE,OAAO;AACLD,MAAAA,OAAO,YAAKU,SAAL,+BAAmCxB,SAAnC,sBADF;AAELU,MAAAA,OAAO,EAAPA;AAFK,KAAP;AAIF,QAAIC,aAAa,CAACK,OAAlB,EACE,OAAO;AACLF,MAAAA,OAAO,YAAKU,SAAL,4CAAgDtB,SAAhD,sBADF;AAELQ,MAAAA,OAAO,EAAPA;AAFK,KAAP;AAIF,WAAO,IAAP;AACD;;AAED,sBACE,oBAAC,iBAAD;AAAmB,IAAA,UAAU,EAAEvB,KAAK,CAACQ;AAArC,kBACE;AACE,IAAA,EAAE,EAAEE,OADN;AAEE,IAAA,IAAI,EAAEV,KAAK,CAAC8B,IAFd;AAGE,IAAA,KAAK,EAAE9B,KAAK,CAAC+B,KAAN,IAAe,EAHxB;AAIE,IAAA,IAAI,EAAC,UAJP;AAKE,IAAA,QAAQ,EAAE,kBAACC,CAAD;AAAA,aAAOhC,KAAK,CAACiC,QAAN,CAAeD,CAAf,EAAkBhC,KAAK,CAACkC,KAAxB,CAAP;AAAA,KALZ;AAME,IAAA,QAAQ,EAAE,IANZ;AAOE,IAAA,SAAS,EAAErB,SAPb;AAQE,IAAA,SAAS,EAAEE,SARb;AASE,IAAA,WAAW,EAAEsB,SATf;AAUE,IAAA,GAAG,EAAEnB;AAVP,IADF,CADF;AAgBD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IA/DgBqB,a;;MAAAA,a;AAgEhB,OAAO,SAASC,WAAT,CAAqBxC,KAArB,EAA4B;AAAA;;AACjC,MAAMU,OAAO,wBAAiBV,KAAK,CAACW,KAAvB,cAAgCX,KAAK,CAACY,QAAtC,CAAb;AAEA,MAAMK,cAAc,GAAGpB,MAAM,CAAC,KAAD,CAA7B,CAHiC,CAIjC;;AACA,MAAMqB,UAAU,GAAGrB,MAAM,CAACsB,SAAD,CAAzB,CALiC,CAOjC;;AACA,MAAI,CAACF,cAAc,CAACG,OAApB,EAA6B;AAC3BpB,IAAAA,KAAK,CAACqB,YAAN,CAAmBC,QAAnB;AACAL,IAAAA,cAAc,CAACG,OAAf,GAAyB,IAAzB;AACD;AAED;AACF;AACA;;;AACE,WAASE,QAAT,GAAoB;AAClB;AACA,WAAO,IAAP;AACD;;AAED,sBACE,oBAAC,iBAAD;AAAmB,IAAA,UAAU,EAAEtB,KAAK,CAACQ;AAArC,kBACE;AACE,IAAA,EAAE,EAAEE,OADN;AAEE,IAAA,IAAI,EAAEV,KAAK,CAAC8B,IAFd;AAGE,IAAA,KAAK,EAAE9B,KAAK,CAAC+B,KAHf;AAIE,IAAA,MAAM,EAAE,IAJV;AAKE,IAAA,QAAQ,EAAE,IALZ;AAME,IAAA,GAAG,EAAEb;AANP,IADF,CADF;AAYD;;IAjCesB,W;;MAAAA,W","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\n\r\n/**\r\n * FormFields are meant to be used with the Form component.\r\n * They are a combination of a label and a corresponding input element of some kind.\r\n * They make up the fields of a Form component. Each FormField has its own\r\n * validator function that checks the validity of its input. FormField validators\r\n * are called by its parent Form. FormFields should be the children of a Form\r\n * component and should be initialied with an initial value prop. After first render,\r\n * the Form component will take control of the FormField's value state.\r\n *\r\n */\r\n\r\n/**\r\n * Common layout template that FormFields use\r\n * @param {object} props expected props:\r\n * - groupClass {str} css class for the form-group containing the input\r\n * - children:\r\n * - FormField's control\r\n *\r\n */\r\nfunction FormFieldTemplate(props) {\r\n  const children = React.Children.toArray(props.children);\r\n  //preserve existing css classes + add bootstrap classes\r\n  const control = React.cloneElement(children[0], {\r\n    className:\r\n      (children[0].className || \"\") +\r\n      ` form-control ${props.inline ? \"w-100\" : \"w-75\"}`,\r\n  });\r\n\r\n  return (\r\n    <div className={`${!props.inline && \"form-group\"} m-3 ${props.groupClass}`}>\r\n      {control}\r\n    </div>\r\n  );\r\n}\r\n\r\n//dont use the ado vacation/timeoff for holiday just dont put any time\r\n\r\n/**\r\n * General text input field.\r\n *\r\n * @param {object} props\r\n * - label {string} FormField's label\r\n * - name {string} name for input element\r\n * - required? {boolean} whether this FormField is required or not\r\n * - min? {number} minimum number of characters\r\n * - max? {number} maximum number of characters\r\n */\r\nexport function TextField(props) {\r\n  const inputId = `form-field-${props.label}-${props.parentId}`;\r\n  const minLength = props.min;\r\n  const maxLength = props.max;\r\n  const validatorAdded = useRef(false);\r\n  //reference to input html element\r\n  const inputField = useRef(undefined);\r\n\r\n  //to ensure validator only gets added to parent Form once\r\n  if (!validatorAdded.current) {\r\n    props.addValidator(validate);\r\n    validatorAdded.current = true;\r\n  }\r\n\r\n  /**\r\n   * Checks the validity of input\r\n   */\r\n  function validate() {\r\n    const element = inputField.current;\r\n    const validityState = element.validity;\r\n\r\n    if (validityState.valueMissing)\r\n      return { message: `${props.label} is required.`, element };\r\n    if (validityState.tooShort)\r\n      return {\r\n        message: `${props.label} must be at least ${minLength} characters long.`,\r\n        element,\r\n      };\r\n    if (validityState.tooLong)\r\n      return {\r\n        message: `${props.label} must be less than or equal to ${maxLength} characters long.`,\r\n        element,\r\n      };\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <FormFieldTemplate groupClass={props.groupClass}>\r\n      <input\r\n        id={inputId}\r\n        name={props.name}\r\n        value={props.value || \"\"}\r\n        onChange={(e) => props.onChange(e, props.index)}\r\n        required={props.required}\r\n        minLength={minLength}\r\n        maxLength={maxLength}\r\n        placeholder={props.label}\r\n        ref={inputField}\r\n      />\r\n    </FormFieldTemplate>\r\n  );\r\n}\r\n\r\n/**\r\n * Input field for emails.\r\n *\r\n * @param {object} props\r\n * - label? {string} FormField's label (default label is Email)\r\n * - name {string} name for input element\r\n * - required? {boolean} whether this FormField is required or not\r\n * - min? {number} minimum number of characters\r\n * - max? {number} maximum number of characters\r\n */\r\nexport function EmailField(props) {\r\n  const labelName = props.label || \"Email\";\r\n  const inputId = `form-field-${labelName}-${props.parentId}`;\r\n  const minLength = props.min;\r\n  const maxLength = props.max || 50;\r\n\r\n  const validatorAdded = useRef(false);\r\n  //reference to input html element\r\n  const inputField = useRef(undefined);\r\n\r\n  //to ensure validator only gets added to parent Form once\r\n  if (!validatorAdded.current) {\r\n    props.addValidator(validate);\r\n    validatorAdded.current = true;\r\n  }\r\n\r\n  /**\r\n   * Checks the validity of input.\r\n   *\r\n   * @returns {object} if input is valid, returns null. Otherwise, returns an object\r\n   * containg information about the error\r\n   * {message: error message, element: reference to HtmlElement that contains error}\r\n   */\r\n  function validate() {\r\n    const element = inputField.current;\r\n    const validityState = element.validity;\r\n\r\n    if (validityState.valueMissing)\r\n      return { message: `${labelName} is required.`, element };\r\n    if (validityState.typeMismatch)\r\n      return { message: `${labelName} must be an email.`, element };\r\n    if (validityState.tooShort)\r\n      return {\r\n        message: `${labelName} must be at least ${minLength} characters long.`,\r\n        element,\r\n      };\r\n    if (validityState.tooLong)\r\n      return {\r\n        message: `${labelName} must be less than or equal to ${maxLength} characters long.`,\r\n        element,\r\n      };\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <FormFieldTemplate groupClass={props.groupClass}>\r\n      <input\r\n        id={inputId}\r\n        name={props.name}\r\n        value={props.value}\r\n        type=\"email\"\r\n        onChange={(e) => props.onChange(e, props.index)}\r\n        required={props.required}\r\n        minLength={minLength}\r\n        maxLength={maxLength}\r\n        placeholder={labelName}\r\n        ref={inputField}\r\n      />\r\n    </FormFieldTemplate>\r\n  );\r\n}\r\n\r\n/**\r\n * Input field for passwords. Input is always required.\r\n *\r\n * @param {object} props\r\n * - label? {string} FormField's label (default label is Password)\r\n * - name {string} name for input element\r\n * - min? {number} minimum number of characters\r\n */\r\nexport function PasswordField(props) {\r\n  const labelName = props.label || \"Password\";\r\n  const inputId = `form-field-${labelName}-${props.parentId}`;\r\n  const minLength = props.min;\r\n  const maxLength = props.max || 50;\r\n\r\n  const validatorAdded = useRef(false);\r\n  //reference to input html element\r\n  const inputField = useRef(undefined);\r\n\r\n  //to ensure validator only gets added to parent Form once\r\n  if (!validatorAdded.current) {\r\n    props.addValidator(validate);\r\n    validatorAdded.current = true;\r\n  }\r\n\r\n  /**\r\n   * Checks the validity of input\r\n   */\r\n  function validate() {\r\n    const element = inputField.current;\r\n    const validityState = element.validity;\r\n\r\n    if (validityState.valueMissing)\r\n      return { message: `${labelName} is required.`, element };\r\n    if (validityState.tooShort)\r\n      return {\r\n        message: `${labelName} must be at least ${minLength} characters long.`,\r\n        element,\r\n      };\r\n    if (validityState.tooLong)\r\n      return {\r\n        message: `${labelName} must be less than or equal to ${maxLength} characters long.`,\r\n        element,\r\n      };\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <FormFieldTemplate groupClass={props.groupClass}>\r\n      <input\r\n        id={inputId}\r\n        name={props.name}\r\n        value={props.value || \"\"}\r\n        type=\"password\"\r\n        onChange={(e) => props.onChange(e, props.index)}\r\n        required={true}\r\n        minLength={minLength}\r\n        maxLength={maxLength}\r\n        placeholder={labelName}\r\n        ref={inputField}\r\n      />\r\n    </FormFieldTemplate>\r\n  );\r\n}\r\n\r\n/**\r\n * Hidden input field\r\n *\r\n * @param {object} props\r\n * - label {string} FormField's label (not visible, just for naming purposes)\r\n * - name {string} name for input element\r\n * - value {string} input's value\r\n */\r\nexport function HiddenField(props) {\r\n  const inputId = `form-field-${props.label}-${props.parentId}`;\r\n\r\n  const validatorAdded = useRef(false);\r\n  //reference to input html element\r\n  const inputField = useRef(undefined);\r\n\r\n  //to ensure validator only gets added to parent Form once\r\n  if (!validatorAdded.current) {\r\n    props.addValidator(validate);\r\n    validatorAdded.current = true;\r\n  }\r\n\r\n  /**\r\n   * Checks the validity of input\r\n   */\r\n  function validate() {\r\n    //always valid\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <FormFieldTemplate groupClass={props.groupClass}>\r\n      <input\r\n        id={inputId}\r\n        name={props.name}\r\n        value={props.value}\r\n        hidden={true}\r\n        readOnly={true}\r\n        ref={inputField}\r\n      />\r\n    </FormFieldTemplate>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}