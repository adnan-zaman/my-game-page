{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Game from \"./Game\";\nexport default function GameSearchBox(props) {\n  //search term in search bar\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      displayedSearchTerm = _useState2[0],\n      setDisplayedSearchTerm = _useState2[1]; //the actual underlying search term regardless of whats typed\n  //clicking next/prev will change pages for this value\n  //clicking search button will change this value\n\n\n  var _useState3 = useState(displayedSearchTerm),\n      _useState4 = _slicedToArray(_useState3, 2),\n      searchTerm = _useState4[0],\n      setSearchTerm = _useState4[1]; //page of search results\n\n\n  var _useState5 = useState(undefined),\n      _useState6 = _slicedToArray(_useState5, 2),\n      searchPage = _useState6[0],\n      setSearchPage = _useState6[1]; //list of objects that will be retrieved from search api\n\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      searchResults = _useState8[0],\n      setSearchResults = _useState8[1]; //whether or not search results are currently loading\n\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      loading = _useState10[0],\n      setLoading = _useState10[1]; //error message\n\n\n  var _useState11 = useState(\"\"),\n      _useState12 = _slicedToArray(_useState11, 2),\n      errorMessage = _useState12[0],\n      setErrorMessage = _useState12[1]; //whether or not there is a next page of search results\n\n\n  var _useState13 = useState(true),\n      _useState14 = _slicedToArray(_useState13, 2),\n      hasNext = _useState14[0],\n      setHasNext = _useState14[1]; //used to determine whether its first render or not\n\n\n  var firstRender = useRef(true);\n\n  function startDragGame(e, game) {\n    e.stopPropagation();\n    e.dataTransfer.setData(\"application/json\", JSON.stringify(game));\n  } //dragover handler is needed to make element\n  //draggable\n\n\n  function dragOver(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    e.dataTransfer.dropEffect = \"move\";\n  }\n\n  var displayedSearchResults = searchResults.map(function (game) {\n    return /*#__PURE__*/React.createElement(Game, {\n      key: game.id,\n      gameId: game.id,\n      gameName: game.name,\n      gameCoverUrl: game.coverurl,\n      draggable: true,\n      onDragStart: function onDragStart(e) {\n        return startDragGame(e, game);\n      },\n      onDragOver: dragOver\n    });\n  });\n  /**\r\n   * Updates displayed search term\r\n   * @param {Event} e\r\n   */\n\n  function handleChange(e) {\n    setDisplayedSearchTerm(e.target.value);\n  }\n  /**\r\n   * Sets searchTerm to displayedSearchTerm\r\n   * and fetches search results.\r\n   *\r\n   * @param {Event} e\r\n   */\n\n\n  function handleSearch(e) {\n    e.preventDefault();\n    if (displayedSearchTerm === \"\") return;\n    setSearchTerm(displayedSearchTerm);\n    setSearchPage(0);\n    fetchAndPopulateSearchResults(displayedSearchTerm, 0);\n  }\n  /**\r\n   * Changes page number for searchTerm\r\n   * (not displayedSearchTerm) and fetches search\r\n   * results.\r\n   *\r\n   * @param {number} pageNumber new page number\r\n   */\n\n\n  function changePage(pageNumber) {\n    if (pageNumber < 0) return;\n    setSearchPage(pageNumber);\n    fetchAndPopulateSearchResults(searchTerm, pageNumber);\n  }\n  /**\r\n   * Fetches a search from the API and populates page\r\n   * with search results. This function needs to be called\r\n   * with a search term and page manually instead of relying on\r\n   * checking state as reading state immediately after setting it\r\n   * will return stale values. So, we give it the fresh values manually.\r\n   *\r\n   * @param {string} term search term\r\n   * @param {number} page search page number\r\n   */\n\n\n  function fetchAndPopulateSearchResults(_x, _x2) {\n    return _fetchAndPopulateSearchResults.apply(this, arguments);\n  }\n\n  function _fetchAndPopulateSearchResults() {\n    _fetchAndPopulateSearchResults = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(term, page) {\n      var query, response, data;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setErrorMessage(\"\");\n              setLoading(true);\n              query = \"http://localhost:3000/api/search/\".concat(term, \"/\").concat(page);\n              _context.next = 5;\n              return fetch(query);\n\n            case 5:\n              response = _context.sent;\n              _context.next = 8;\n              return response.json();\n\n            case 8:\n              data = _context.sent;\n\n              if (response.ok) {\n                setSearchResults(data.results);\n                setHasNext(data.hasNext);\n              } else {\n                setErrorMessage(results.message);\n              }\n\n              setLoading(false);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _fetchAndPopulateSearchResults.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game-search-box d-inline-block d-flex-column\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"button-bar\"\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSearch\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"game-search-bar\"\n  }, \"Name of Game:\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"game-search-bar\",\n    value: displayedSearchTerm,\n    onChange: handleChange\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\"\n  }, \"Search\"), searchPage >= 0 && /*#__PURE__*/React.createElement(React.Fragment, null, searchPage > 0 && /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: function onClick() {\n      return changePage(searchPage - 1);\n    }\n  }, \"Prev\"), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"page-number\"\n  }, \"Page:\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"page-number\",\n    disabled: true,\n    value: searchPage + 1\n  }), hasNext && /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: function onClick() {\n      return changePage(searchPage + 1);\n    }\n  }, \"Next\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search-results game-list\"\n  }, errorMessage && /*#__PURE__*/React.createElement(\"p\", null, errorMessage), loading && /*#__PURE__*/React.createElement(\"p\", null, \"Loading...\"), displayedSearchResults));\n}","map":{"version":3,"sources":["C:/Users/adnan/web-dev/my-game-page/components/GameSearchBox.js"],"names":["React","useState","useEffect","useRef","Game","GameSearchBox","props","displayedSearchTerm","setDisplayedSearchTerm","searchTerm","setSearchTerm","undefined","searchPage","setSearchPage","searchResults","setSearchResults","loading","setLoading","errorMessage","setErrorMessage","hasNext","setHasNext","firstRender","startDragGame","e","game","stopPropagation","dataTransfer","setData","JSON","stringify","dragOver","preventDefault","dropEffect","displayedSearchResults","map","id","name","coverurl","handleChange","target","value","handleSearch","fetchAndPopulateSearchResults","changePage","pageNumber","term","page","query","fetch","response","json","data","ok","results","message"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport Game from \"./Game\";\r\n\r\nexport default function GameSearchBox(props) {\r\n  //search term in search bar\r\n  const [displayedSearchTerm, setDisplayedSearchTerm] = useState(\"\");\r\n  //the actual underlying search term regardless of whats typed\r\n  //clicking next/prev will change pages for this value\r\n  //clicking search button will change this value\r\n  const [searchTerm, setSearchTerm] = useState(displayedSearchTerm);\r\n  //page of search results\r\n  const [searchPage, setSearchPage] = useState(undefined);\r\n  //list of objects that will be retrieved from search api\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  //whether or not search results are currently loading\r\n  const [loading, setLoading] = useState(false);\r\n  //error message\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  //whether or not there is a next page of search results\r\n  const [hasNext, setHasNext] = useState(true);\r\n\r\n  //used to determine whether its first render or not\r\n  const firstRender = useRef(true);\r\n\r\n  function startDragGame(e, game) {\r\n    e.stopPropagation();\r\n    e.dataTransfer.setData(\"application/json\", JSON.stringify(game));\r\n  }\r\n\r\n  //dragover handler is needed to make element\r\n  //draggable\r\n  function dragOver(e) {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    e.dataTransfer.dropEffect = \"move\";\r\n  }\r\n\r\n  const displayedSearchResults = searchResults.map((game) => (\r\n    <Game\r\n      key={game.id}\r\n      gameId={game.id}\r\n      gameName={game.name}\r\n      gameCoverUrl={game.coverurl}\r\n      draggable={true}\r\n      onDragStart={(e) => startDragGame(e, game)}\r\n      onDragOver={dragOver}\r\n    />\r\n  ));\r\n\r\n  /**\r\n   * Updates displayed search term\r\n   * @param {Event} e\r\n   */\r\n  function handleChange(e) {\r\n    setDisplayedSearchTerm(e.target.value);\r\n  }\r\n\r\n  /**\r\n   * Sets searchTerm to displayedSearchTerm\r\n   * and fetches search results.\r\n   *\r\n   * @param {Event} e\r\n   */\r\n  function handleSearch(e) {\r\n    e.preventDefault();\r\n    if (displayedSearchTerm === \"\") return;\r\n    setSearchTerm(displayedSearchTerm);\r\n    setSearchPage(0);\r\n    fetchAndPopulateSearchResults(displayedSearchTerm, 0);\r\n  }\r\n\r\n  /**\r\n   * Changes page number for searchTerm\r\n   * (not displayedSearchTerm) and fetches search\r\n   * results.\r\n   *\r\n   * @param {number} pageNumber new page number\r\n   */\r\n  function changePage(pageNumber) {\r\n    if (pageNumber < 0) return;\r\n    setSearchPage(pageNumber);\r\n    fetchAndPopulateSearchResults(searchTerm, pageNumber);\r\n  }\r\n\r\n  /**\r\n   * Fetches a search from the API and populates page\r\n   * with search results. This function needs to be called\r\n   * with a search term and page manually instead of relying on\r\n   * checking state as reading state immediately after setting it\r\n   * will return stale values. So, we give it the fresh values manually.\r\n   *\r\n   * @param {string} term search term\r\n   * @param {number} page search page number\r\n   */\r\n  async function fetchAndPopulateSearchResults(term, page) {\r\n    setErrorMessage(\"\");\r\n    setLoading(true);\r\n    const query = `http://localhost:3000/api/search/${term}/${page}`;\r\n    const response = await fetch(query);\r\n    const data = await response.json();\r\n    if (response.ok) {\r\n      setSearchResults(data.results);\r\n      setHasNext(data.hasNext);\r\n    } else {\r\n      setErrorMessage(results.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  return (\r\n    <div className=\"game-search-box d-inline-block d-flex-column\">\r\n      <div className=\"button-bar\">\r\n        <form onSubmit={handleSearch}>\r\n          <label htmlFor=\"game-search-bar\">Name of Game:</label>\r\n          <input\r\n            id=\"game-search-bar\"\r\n            value={displayedSearchTerm}\r\n            onChange={handleChange}\r\n          ></input>\r\n          <button type=\"submit\">Search</button>\r\n          {searchPage >= 0 && (\r\n            <>\r\n              {searchPage > 0 && (\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => changePage(searchPage - 1)}\r\n                >\r\n                  Prev\r\n                </button>\r\n              )}\r\n              <label htmlFor=\"page-number\">Page:</label>\r\n              <input\r\n                id=\"page-number\"\r\n                disabled={true}\r\n                value={searchPage + 1}\r\n              ></input>\r\n              {hasNext && (\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => changePage(searchPage + 1)}\r\n                >\r\n                  Next\r\n                </button>\r\n              )}\r\n            </>\r\n          )}\r\n        </form>\r\n      </div>\r\n      <div className=\"search-results game-list\">\r\n        {errorMessage && <p>{errorMessage}</p>}\r\n        {loading && <p>Loading...</p>}\r\n        {displayedSearchResults}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}