{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\adnan\\\\web-dev\\\\my-game-page\\\\components\\\\FormFields.js\";\nimport { useState, useRef, useEffect } from \"react\";\n/**\r\n * FormFields are meant to be used with the Form component.\r\n * They are a combination of a label and a corresponding input element of some kind.\r\n * They make up the fields of a Form component. Each FormField has its own\r\n * validator function that checks the validity of its input. FormField validators\r\n * are called by its parent Form. FormFields should be the children of a Form\r\n * component and should be initialied with an initial value prop. After first render,\r\n * the Form component will take control of the FormField's value state.\r\n *\r\n */\n\n/**\r\n * General text input field.\r\n *\r\n * @param {object} props\r\n * - label {string} FormField's label\r\n * - required? {boolean} whether this FormField is required or not\r\n * - min? {number} minimum number of characters\r\n * - max? {number} maximum number of characters\r\n */\n\nexport function TextField(props) {\n  const inputId = `form-field-${props.label}-${props.parentId}`;\n  const minLength = props.min;\n  const maxLength = props.max;\n  const validatorAdded = useRef(false); //to ensure validator only gets added to parent Form once\n\n  if (!validatorAdded.current) {\n    props.addValidator(validate);\n    validatorAdded.current = true;\n  }\n  /**\r\n   * Checks the validity of input\r\n   */\n\n\n  function validate() {\n    const [element, validityState] = getElementAndValidityState(inputId);\n    if (validityState.valueMissing) return {\n      message: `${props.label} is required.`,\n      element\n    };\n    if (validityState.tooShort) return {\n      message: `${props.label} must be at least ${minLength} characters long.`,\n      element\n    };\n    if (validityState.tooLong) return {\n      message: `${props.label} must be less than or equal to ${maxLength} characters long.`,\n      element\n    };\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: inputId,\n      children: props.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: inputId,\n      value: props.value,\n      onChange: e => props.onChange(e, props.index),\n      required: props.required,\n      minLength: minLength,\n      maxLength: maxLength\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n/**\r\n * Input field for emails.\r\n *\r\n * @param {object} props\r\n * - label {string} FormField's label\r\n * - required? {boolean} whether this FormField is required or not\r\n * - min? {number} minimum number of characters\r\n * - max? {number} maximum number of characters\r\n */\n\nexport function emailField(props) {\n  const inputId = `form-field-${props.label}-${props.parentId}`;\n  const minLength = props.min;\n  const maxLength = props.max;\n  const validatorAdded = useRef(false); //to ensure validator only gets added to parent Form once\n\n  if (!validatorAdded.current) {\n    props.addValidator(validate);\n    validatorAdded.current = true;\n  }\n  /**\r\n   * Checks the validity of input\r\n   */\n\n\n  function validate() {\n    const [element, validityState] = getElementAndValidityState(inputId);\n    if (validityState.valueMissing) return {\n      message: `${props.label} is required.`,\n      element\n    };\n    if (validityState.tooShort) return {\n      message: `${props.label} must be at least ${minLength} characters long.`,\n      element\n    };\n    if (validityState.tooLong) return {\n      message: `${props.label} must be less than or equal to ${maxLength} characters long.`,\n      element\n    };\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: inputId,\n      children: props.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: inputId,\n      value: props.value,\n      type: \"email\",\n      onChange: e => props.onChange(e, props.index),\n      required: props.required,\n      minLength: minLength,\n      maxLength: maxLength\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n/**\r\n * Convenience function that returns an HtmlElement and its ValidityState\r\n * object given an id.\r\n *\r\n * @param {string} elementId id of FormField's HtmlElement to validate\r\n * @returns {array} [HtmlElement, validityState]\r\n */\n\nfunction getElementAndValidityState(elementId) {\n  const element = document.querySelector(`#${elementId}`);\n  const validityState = element.validity;\n  return [element, validityState];\n}","map":{"version":3,"sources":["C:/Users/adnan/web-dev/my-game-page/components/FormFields.js"],"names":["useState","useRef","useEffect","TextField","props","inputId","label","parentId","minLength","min","maxLength","max","validatorAdded","current","addValidator","validate","element","validityState","getElementAndValidityState","valueMissing","message","tooShort","tooLong","value","e","onChange","index","required","emailField","elementId","document","querySelector","validity"],"mappings":"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","sourcesContent":["import { useState, useRef, useEffect } from \"react\";\r\n\r\n/**\r\n * FormFields are meant to be used with the Form component.\r\n * They are a combination of a label and a corresponding input element of some kind.\r\n * They make up the fields of a Form component. Each FormField has its own\r\n * validator function that checks the validity of its input. FormField validators\r\n * are called by its parent Form. FormFields should be the children of a Form\r\n * component and should be initialied with an initial value prop. After first render,\r\n * the Form component will take control of the FormField's value state.\r\n *\r\n */\r\n\r\n/**\r\n * General text input field.\r\n *\r\n * @param {object} props\r\n * - label {string} FormField's label\r\n * - required? {boolean} whether this FormField is required or not\r\n * - min? {number} minimum number of characters\r\n * - max? {number} maximum number of characters\r\n */\r\nexport function TextField(props) {\r\n  const inputId = `form-field-${props.label}-${props.parentId}`;\r\n  const minLength = props.min;\r\n  const maxLength = props.max;\r\n\r\n  const validatorAdded = useRef(false);\r\n\r\n  //to ensure validator only gets added to parent Form once\r\n  if (!validatorAdded.current) {\r\n    props.addValidator(validate);\r\n    validatorAdded.current = true;\r\n  }\r\n\r\n  /**\r\n   * Checks the validity of input\r\n   */\r\n  function validate() {\r\n    const [element, validityState] = getElementAndValidityState(inputId);\r\n\r\n    if (validityState.valueMissing)\r\n      return { message: `${props.label} is required.`, element };\r\n    if (validityState.tooShort)\r\n      return {\r\n        message: `${props.label} must be at least ${minLength} characters long.`,\r\n        element,\r\n      };\r\n    if (validityState.tooLong)\r\n      return {\r\n        message: `${props.label} must be less than or equal to ${maxLength} characters long.`,\r\n        element,\r\n      };\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <label htmlFor={inputId}>{props.label}</label>\r\n      <input\r\n        id={inputId}\r\n        value={props.value}\r\n        onChange={(e) => props.onChange(e, props.index)}\r\n        required={props.required}\r\n        minLength={minLength}\r\n        maxLength={maxLength}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\n/**\r\n * Input field for emails.\r\n *\r\n * @param {object} props\r\n * - label {string} FormField's label\r\n * - required? {boolean} whether this FormField is required or not\r\n * - min? {number} minimum number of characters\r\n * - max? {number} maximum number of characters\r\n */\r\nexport function emailField(props) {\r\n  const inputId = `form-field-${props.label}-${props.parentId}`;\r\n  const minLength = props.min;\r\n  const maxLength = props.max;\r\n\r\n  const validatorAdded = useRef(false);\r\n\r\n  //to ensure validator only gets added to parent Form once\r\n  if (!validatorAdded.current) {\r\n    props.addValidator(validate);\r\n    validatorAdded.current = true;\r\n  }\r\n\r\n  /**\r\n   * Checks the validity of input\r\n   */\r\n  function validate() {\r\n    const [element, validityState] = getElementAndValidityState(inputId);\r\n\r\n    if (validityState.valueMissing)\r\n      return { message: `${props.label} is required.`, element };\r\n    if (validityState.tooShort)\r\n      return {\r\n        message: `${props.label} must be at least ${minLength} characters long.`,\r\n        element,\r\n      };\r\n    if (validityState.tooLong)\r\n      return {\r\n        message: `${props.label} must be less than or equal to ${maxLength} characters long.`,\r\n        element,\r\n      };\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <label htmlFor={inputId}>{props.label}</label>\r\n      <input\r\n        id={inputId}\r\n        value={props.value}\r\n        type=\"email\"\r\n        onChange={(e) => props.onChange(e, props.index)}\r\n        required={props.required}\r\n        minLength={minLength}\r\n        maxLength={maxLength}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\n/**\r\n * Convenience function that returns an HtmlElement and its ValidityState\r\n * object given an id.\r\n *\r\n * @param {string} elementId id of FormField's HtmlElement to validate\r\n * @returns {array} [HtmlElement, validityState]\r\n */\r\nfunction getElementAndValidityState(elementId) {\r\n  const element = document.querySelector(`#${elementId}`);\r\n  const validityState = element.validity;\r\n  return [element, validityState];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}